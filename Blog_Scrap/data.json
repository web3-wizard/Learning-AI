[
  {
    "id": 1,
    "title": "Aplicando o Learn In Public na Vida Real",
    "author": "Beatriz Oliveira",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--Iq6DqCOD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/6615/8d2c7945-199c-44b3-9341-04f89306f188.jpg",
    "time": "2023-02-16T17:52:30Z",
    "likes": "39",
    "link": "https://dev.to/devrelbr/aplicando-o-learn-in-public-na-vida-real-3027",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--gTY5mDSB--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsg1il2l9pdxbwg8cw84.png",
    "body": "A maneira mais r\u00e1pida de aprender\n\nTL:DR\nNesse texto compartilho como foi a minha trajet\u00f3ria aplicando o Learn in Public e tudo o que o mesmo me proporcionou na \u00e1rea da programa\u00e7\u00e3o.\n\n\n1. O que \u00e9?\n2. Como aplicar?\n3. Oportunidades\n\n\n\n\n  O que \u00e9?\n\nBasicamente o Learn in Public (Aprender em P\u00fablico) \u00e9 uma ideia/movimento criado pelo desenvolvedor @swyx, que ali\u00e1s \u00e9 grande influente em comunidades tech, e fez do \"Learn in Public\" uma comunidade com milhares de integrantes.\nEle explica que devemos nos expor mais para aprender mais. O que ganhamos quando nos expomos mais para as pessoas?\nResposta: Visibilidade, a melhor coisa em qualquer \u00e1rea profissional, pois abre muitas portas e oportunidades. \n\nE com isso tamb\u00e9m obtemos mais aprendizado, voc\u00ea pode se aperfei\u00e7oar com refer\u00eancias da sua \u00e1rea, assim como, algu\u00e9m que \u00e9 mais especialista do que voc\u00ea pode apontar lacunas de conhecimento ou at\u00e9 mesmo erros cometidos e aprender com eles (E isso \u00e9 \u00f3timo).\nVoc\u00ea precisa formar o h\u00e1bito de criar exaust\u00e3o de aprendizado, crie blogposts, escreva textos, fa\u00e7a v\u00eddeos, streams, participe de comunidades, seja ativo, d\u00ea palestras.\n\n\nA imagem acima mostra o dashboard do dev.to e um pouco dos textos que j\u00e1 publiquei nele.\n\nUma das coisas que mais me motiva para a cria\u00e7\u00e3o de conte\u00fado para outras pessoas \u00e9: \n\nCriar e compartilhar coisas que eu queria ter contato quando precisei, tanto como as maneiras que eu citei acima, ou qualquer outra forma de comunica\u00e7\u00e3o, se isso j\u00e1 ajudar algu\u00e9m j\u00e1 valer\u00e1 a pena.\nReceber feedbacks, todo tipo de feedback \u00e9 bom (basta saber filtrar e lidar com eles), voc\u00ea acaba recebendo praticamente uma mentoria indireta de \"estranhos\" e o melhor sem pedir por ela.\n\n\nFa\u00e7a o poss\u00edvel para acertar, mas n\u00e3o se preocupe quando estiver errado.\n\nN\u00e3o julgue e n\u00e3o tenha medo de ser julgado, todo mundo j\u00e1 foi iniciante um dia ent\u00e3o n\u00e3o faz sentido julgar algu\u00e9m que apenas est\u00e1 tentando aprender e se desenvolver. Voc\u00ea que j\u00e1 n\u00e3o \u00e9 mais iniciante seja mentor de um, se aperfei\u00e7oe mais ensinando e ajudando a pegar o caminho \"mais f\u00e1cil\" que voc\u00ea passou.\nValida\u00e7\u00e3o de aprendizagem, nada melhor do que compartilhar seus conhecimentos \u00e9 valid\u00e1-los, n\u00e3o tem como mentir para voc\u00ea mesmo, voc\u00ea n\u00e3o consegue explicar algo de fato se n\u00e3o dominar aquele assunto, nada melhor do que compartilhar para validar isso com os outros.\n\n\nA imagem acima mostra o Medium que \u00e9 outra plataforma para publica\u00e7\u00e3o de textos e artigos, outro meio para compartilhar conhecimento, e um pouco dos textos que fiz l\u00e1.\n\nJogo do win-win (ganha-ganha), no learn in public todos os lados ganham com a aplica\u00e7\u00e3o do mesmo, um exemplo bem legal sobre esse ponto \u00e9 atrav\u00e9s de perguntas, voc\u00ea n\u00e3o quer ficar travado em uma quest\u00e3o por muito tempo e compartilhar sua d\u00favida com a sua rede social ou comunidade \u00e9 uma \u00f3tima maneira de aprender e se destravar e a outra pessoa validar o conhecimento dela lhe respondendo.\n\n\nA imagem acima mostra mostra uma s\u00e9rie de perguntas e respostas que j\u00e1 publiquei no twitter fazendo perguntas e me destravando com a minha comunidade l\u00e1.\n\n\n\n\n  Como aplicar? \n\n\nJ\u00e1 listei v\u00e1rias formas de aplicar o Learn in Public mais aqui vai elas de novo, para n\u00e3o deixar batido:\n\nQualquer forma de expor em p\u00fablico seus aprendizados como:\n\n\nEscrever artigos, blog post, aqui mesmo no Dev.to;\n\nEx: dev.to/beatrizoliveira\n\n\n\n\nGravar v\u00eddeos sobre o assunto:\n\nEx: APRENDA MYSQL \n(Um v\u00eddeo educacional \u00f3timo sobre mySQL)\n\n\n\nPublicar em alguma rede social:\n\nEx: Twitter, Instagram, Linkedin, Tiktok, etc.\ngirl.coding (A Giovanna produz um \u00f3timo conte\u00fado atrav\u00e9s do instagram e outras redes)\n\n\n\nExplique seu c\u00f3digo:\n\nEx: twitch.tv/danielhe4rt  (O @danielhe4rt sempre quando est\u00e1 em live ele t\u00e1 programando algo e consequentemente explicando o mesmo)\n\n\n\nPalestras/Talks:\n\nEx: learn-in-public (a pr\u00f3pria palestra que originou esse texto!)\n\n\n\nBuild In Public:\n\nEx: twitch.tv/eduardorfs (O cara simplesmente est\u00e1 criando sua pr\u00f3pria linguagem de programa\u00e7\u00e3o em live)\n\n\n\n\n\n\n  Oportunidades \n\nAl\u00e9m das in\u00fameras vantagens que voc\u00ea obt\u00eam compartilhando conhecimento, aqui vai as oportunidades que tive me expondo mais:\n\n\nTive a grande oportunidade de palestrar pela primeira vez para He4rt Developers\n\nconfira aqui a talk He4rt Conf\n\n\n\n\nTive a oportunidade de participar tamb\u00e9m pela primeira vez de um podcast sobre tech, no pilhacheia\n\nconfira aqui o epis\u00f3dio O verdadeiro pilhacheia\n\n\n\nA \u00faltima foto \u00e9 bem especial, \u00e9 um feedback de umas das pessoas que dou mentoria (free hein), \u00e9 bem legal fazer essa troca e ajudar quem t\u00e1 come\u00e7ando ou em qualquer n\u00edvel!\n\n\n\nEsse texto foi criado atrav\u00e9s de uma talk que dei sobre o mesmo assunto, link: https://speakerdeck.com/beatrizoliveiira/learn-in-public\n\nObrigado quem leu at\u00e9 aqui e espero que esse post tenha lhe agregado em algo na sua trajet\u00f3ria \\o/\n\nQualquer d\u00favida s\u00f3 mandar DM no Twitter @biantris\nSe quiser continuar apoiando meus conte\u00fados Patreon\nMeu GitHub biantris"
  },
  {
    "id": 2,
    "title": "So You Think You Know For Loops? edited",
    "author": "Travis Bennett",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--Jq3-MpLg--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1028332/82237d47-f3ed-43d8-9afe-62e1ff6172b8.jpg",
    "time": "2023-02-16T23:09:32Z",
    "likes": "2",
    "link": "https://dev.to/travis_codez/so-you-think-you-know-for-loops-1k31",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--sgNpOcyL--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kll7403r26o6ofvm277a.jpg",
    "body": "So you've been learning JavaScript for a while; perhaps you've written several programs and solved dozens of problems on Code Wars? Or maybe you're just working your way through some tutorials and courses, or even just starting to get your feet a little wet? I assure you, if you've been writing all of your for loops like this:\nfor (let i = 0; i < n; i++) {\n}\nyou're only scratching the surface of the for loops potential.\nDuring my coding journey, I have discovered the weight room to have the greatest philosophical carryover to programming. Nobody in the weight room would believe they have a complete bench by exclusively doing flat barbell bench. In the weight room, you learn to hit the muscle from different angles and develop strength across several different planes of motion. Then yet, in programming, so many tutorials and resources only teach from a one dimensional perspective, the programming equivalent of exclusively doing flat barbell bench. Is it any wonder people get stuck in tutorial hell, when the tutorials do not approach learning from different angles and perspectives? That's why I think it's important to approach the for loop from an entirely different angle, to develop perspective on its true potential, and to develop a deeper understanding of how JavaScript works.\nI took inspiration for this post from the Chapter 5 of the book Eloquent JavaScript, by Marijin Haverbeke. It helped me see for loops in an entirely different perspective, one that I have yet to see in any single JavaScript tutorial or course yet. And I'm going to break it down in greater detail than the book itself. So grab your favourite beverage and hang on tight, this one's going to take you for a loop!\nThe for loop in this example takes a starting value, a test function (conditional expression) that if true, calls the body function and passes the current iterated value (the value of i) to the body function, which subsequently calls the update function with the value of i, updating the loop value. In text alone, this sounds quite convoluted and confusing, so let's take a look at the code.\n`const loop = (value, testFunction, updateFunction, bodyFunction) => {\nfor (let i = value; testFunction(i); i =updateFunction(i)){\n   bodyFunction(i)\n  }\n}\nloop(3, n => n > 0; n => n - 1, console.log)\n`\nTo understand what is going on here, we need to take a look at the arguments being passed into the loop function. The value being passed in is 3, n => n > 0 = testFunction, n - 1 = updateFunction, and console.log = bodyFunction. This would commonly be written out as:\n`for (let i = 3; i > 0; i--) {\nconsole.log(i)\n}`\nBut if it was written out like this, it would miss out on the power of JavaScript: you can pass values directly as arguments to a function call without having to declare them first as variables! This allows for more refined and customized control of the loop via callback functions! While in most use cases, using a traditionally instantiated iterator (let i = insert value) would be the best case, there may be use cases where one would want to control the loops behaviour via callback functions. By passing in values directly as function calls, it allows to write code more adherent to DRY principles, and thereby eliminates repetition if the values had to be declared elsewhere with let or const. Furthermore, this example demonstrates the power and flexibility of Javascript that is never shown in tutorials or courses when teaching loops. To write good code adherent to functional programming standards, understanding how functions and values can be passed as arguments is key, especially when chaining together several higher order functions, which is a common practice in the React framework.\nSo take a moment and experiment with the code example, change the values, and dig deeper to develop a greater understanding of the for loop. I encourage you to try and solve other problems by writing for loops in this manner, it will pay dividends later in your coding journey when you write more callback functions to solve problems."
  },
  {
    "id": 3,
    "title": "Edited Deploying a Lambda with a static IP has never been so simple \ud83c\udf70",
    "author": "Valentin BEGGI",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--39KDK_Ri--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4917/bd5f0dd0-537a-49b6-9728-091af6df0de0.png",
    "time": "2023-02-16T13:17:50Z",
    "likes": "24",
    "link": "https://dev.to/kumo/deploying-a-lambda-with-a-static-ip-has-never-been-so-simple-5dke",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--B3036_WP--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88uovzvmgxnl2j8r3scw.png",
    "body": "TL;DR \n\n\ud83e\udde0 Learn how to deploy a Lambda with a static IP (for whitelisting concerns)\n\u26a1 Perform NodeJS SFTP operations using this Lambda. \n\nYour Serverless application might need to connect to a partner server that requires IP whitelisting.\nWe will use the Serverless Framework to deploy our Lambda function and the Typescript AWS CDK to create the infrastructure needed to give our Lambda a static IP \ud83d\udd12. \nIf you are not familiar with these libraries, I recommend you check out this Ultimate Serverless DevX: Serverless Framework x CDK blog post to learn how to conciliate the two. \ud83e\udd1d\nMoreover, we will use the NodeJS ssh2-promise package to perform SFTP operations in our Lambda function. \ud83d\udcbd\nThis is what we will build \ud83d\udc77:\n\nLet's get to work \ud83d\udcaa\ud83d\udd28!\n\n\n\n  1\ufe0f\u20e3 Create a VPC hosted Lambda function with a static IP\n\n\n\n\n  \u2601\ufe0f VPC, NAT Gateway and Elastic IP\n\nFirst, we need to create a VPC with a public subnet and a private subnet. The private subnet will host our Lambda function and the public subnet will host our NAT Gateway. \n\n\nconst vpc = new Vpc(stack, 'Vpc', {\n    vpcName: 'vpc',\n    natGateways: 1, // \ud83d\udc48 Automatically creates an Elastic IP\n    maxAzs: 1, // \ud83d\udc48 Use more if you need high availability\n    subnetConfiguration: [\n        {\n        name: 'private-subnet-1',\n        subnetType: SubnetType.PRIVATE_WITH_NAT,\n        cidrMask: 24,\n        },\n        {\n        name: 'public-subnet-1',\n        subnetType: SubnetType.PUBLIC,\n        cidrMask: 24,\n        },\n    ],\n});\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\ud83d\udcb8 Pricing Disclaimer\nThis architecture will cost some money. The NAT Gateway runs on a EC2 instance which will cost you around 30$/month. This price is multiplied by the number of AZs you use. \n\nI also recommend that you use CloudFormation Outputs to store the IDs of the resources you will need later on. We want to slap that \u2728clean IaC code\u2728 in our PR \ud83d\udd90\ufe0f.\n\n\n\nexport const vpcSecurityGroupOutputId = 'SgOutputId';\nexport const vpcPrivateSubnetOutputId = 'VpcPvSubOutputId';\n...\n\nconst privateSubnets = vpc.selectSubnets(\n    { subnetType: SubnetType.PRIVATE_WITH_NAT }\n);\nexport const [privateSubnetId1] = privateSubnets.subnetIds;\n\n// \ud83d\udc47 Outputing the IDs of the resources in case another stack needs them\nnew CfnOutput(stack, vpcSecurityGroupOutputId, {\n    value: vpc.vpcDefaultSecurityGroup,\n});\nnew CfnOutput(stack, vpcPrivateSubnet1OutputId, {\n    value: privateSubnetId1,\n});\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  \u26a1 Deploy the Lambda function\n\nNow that we have our VPC, we can deploy our Lambda function, using the Serverless Framework.\n\n\nexport const staticIpLambda = {\n  timeout: 15,\n  handler: getHandlerPath(__dirname),\n  vpc: {\n    securityGroupIds: [ stack.resolve(vpc.vpcDefaultSecurityGroup) ],\n    subnetIds: [ stack.resolve(privateSubnetId1) ],\n    },\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nYou can also check out this Serverless Framework x CDK article to learn how to leverage the stack.resolve() method \ud83e\uddd1\u200d\ud83d\ude80.\nAnd bam! \ud83c\udf89 Our Lambda function is deployed in our private subnet. \nAll the outbound traffic from our Lambda function will now go through the NAT Gateway, which will use the Elastic IP we created earlier. \ud83d\ude80\n\nYou can retrieve the Elastic IP of your NAT Gateway using the AWS Console.\nGo to the VPC service and click Elastic IPs. You should see the Elastic IP created by the CDK. \n\nNow just message your partner and ask them to whitelist this IP. \ud83d\udce9\n\n\n\n  2\ufe0f\u20e3 Perform SFTP operations in your Lambda function\n\n\n\u2753 This part is actually optional. \nWe will cover a very specific SFTP use case and a problem I encountered while using the ssh2-promise and the serverless-esbuild plugin.\n\nNow let's talk about a very specific use case: performing SFTP operations in your Lambda function. \nI wanted to share with you this use case because I came across weird issues with the ssh2-promise package not being correctly bundled into my Lambda .zip code. \ud83e\udd2f\n\n\ud83d\udd12 SSH Key \nIf your SFTP partner requires a SSH Key, I recommend you to store the key in AWS Secrets Manager. You can then retrieve it in your Lambda function using Middy Secrets Manager middleware. It will provide the key as a string in your Lambda function context. \ud83e\udd13\n\n\n\n\n  \ud83d\udcbd Store the file you want to send in your Lambda's /tmp folder\n\nThe ssh2-promise package will need file system access to send your file. One way to achieve that in a Lambda function context is to leverage the /tmp folder.\nThis folder is writable and will be deleted when your Lambda function is terminated.\n\n\ud83d\udea7 Warning\nThe /tmp folder is not persistent. If you want to keep track of the files you've sent you should also use S3. \ud83d\udce6\nAlso be aware that the /tmp folder is shared between successive Lambda invocations in the same execution environment. Use a unique file name to avoid any bugs \ud83d\udc1b.\n\nThis is what the final code looks like with the ssh2-promise package:\n\n\nfs.writeFileSync('/tmp/myFile.txt', 'Hello World!');\n\nconst sshPrivateKey = context[\"SSH_PRIVATE_KEY\"]\n\nconst ssh = new SSH2Promise({\n    host: 'sftpIpAddress',\n    username: 'sftpUsername',\n    privateKey: sshPrivateKey,\n    port: \"SFTP_PORT\",\n});\n\nawait ssh.connect();\nconst sftp = ssh.sftp();\n\n\nawait sftp.fastPut('/tmp/myFile.txt', \"distant_name.txt\");\n\nawait ssh.close();\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  The catch \ud83c\udfa3\n\nIf like me you are using the serverless-esbuild plugin to bundle your Lambda function, you might encounter some weird issues. \nThe ssh2-promise package is not correctly bundled into your Lambda function. \ud83e\udd2f\nTo solve this issue, I first patched the serverless-esbuild plugin to allow yarn3 module bundling exclusion. I want the ssh2-promise package NOT to be bundled by esbuild. \nThe patch is available here as a github gist\nThen, I had to add the ssh2-promise package to the externals section of my esbuild config.\n\n\n// serverless.ts\n\nconst serverlessConfiguration = {\n  ..., // \ud83d\udc48 Your other serverless config\n  custom: {\n    esbuild: { ...esbuildConfig, external: ['ssh2-promise'] },\n  },\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nYour Lambda function should now be able to perform SFTP operations. \ud83d\ude80\n\nThanks for reading! \ud83d\ude4f\nIf you have any questions or feedback, feel free to reach out to me on Twitter or ask a question in the comments below. \ud83e\udd78\nAlso check out my Dev.to for more articles about AWS, Serverless and Cloud Development. \ud83d\udcdd"
  },
  {
    "id": 4,
    "title": "Star Trek & CSS Only Wormhole - Not For Your Eyes - Discuss",
    "author": "Expoverse\u26a1",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--ziYf1rLV--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1007101/5bef6350-690a-4503-aa6d-0dc76387ccc6.png",
    "time": "2023-02-17T02:00:13Z",
    "likes": "1",
    "link": "https://dev.to/expoverse/star-trek-css-only-wormhole-not-for-your-eyes-discuss-4jde",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--5KAeInsZ--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vsiwi669b1f5ggy1t4h.png",
    "body": "I've create a CSS only wormhole with the Starship Enterprise flying through it at light speed!\n\n\n\nDiscuss! What do you think? Please Leave your options and suggestions to improve the code below!\nHere is some of the code.\nHTML\n\n\n<div class=\"ship\"></div>\n<div class=\"scene scene1\">\n  <div class=\"wrap\">\n      <div class=\"wall wall-right\"></div>\n      <div class=\"wall wall-left\"></div>   \n      <div class=\"wall wall-top\"></div>\n      <div class=\"wall wall-bottom\"></div> \n      <div class=\"wall wall-back\"></div>    \n  </div>\n  <div class=\"wrap\">\n      <div class=\"wall wall-right\"></div>\n      <div class=\"wall wall-left\"></div>   \n      <div class=\"wall wall-top\"></div>\n      <div class=\"wall wall-bottom\"></div>   \n      <div class=\"wall wall-back\"></div>    \n  </div>\n</div>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nCSS\nMake sure to fill in the background-image src. You can find it in the source code on codepen.io.\n\n\nwall{\n  background: url(https://i.imgur.com/i1xdL.jpeg);\n  background-size: cover;\n}\n\nhtml, body{\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  margin: 0;\n}\n\nbody{\n  background: #000;\n  text-align: center;\n}\n\nbody:before {\n  content: '';\n  display: inline-block;\n  height: 100%;\n  vertical-align: middle;\n}\n\n.scene {\n  display: inline-block;\n  vertical-align: middle;\n  perspective: 5px;\n  perspective-origin: 50% 50%;\n  position: relative;\n}\n\n.wrap{\n  position: absolute;\n  width: 1000px;\n  height: 1000px;\n  left: -500px;\n  top: -500px;\n  transform-style: preserve-3d;\n  animation: move 20s infinite linear;\n  animation-fill-mode: forwards;\n}\n\n/* .wrap:nth-child(2){\n  animation: move 20s infinite linear;\n  animation-delay: 6s;\n} */\n\n.wall {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n/*   animation: fade 20s infinite linear; */\n  animation-delay: 0;\n}\n\n.wrap:nth-child(2) .wall {\n  animation-delay: 6s;\n}\n\n.wall-back {\n  opacity: 0.5;\n}\n\n.wrap .wall-right {\n  transform: rotateY(90deg) translateZ(500px);\n}\n\n.wrap .wall-left {\n  transform: rotateY(-90deg) translateZ(500px);\n}\n\n.wrap .wall-top {\n  transform: rotateX(90deg) translateZ(500px);\n}\n\n.wrap .wall-bottom {\n  transform: rotateX(-90deg) translateZ(500px);\n}\n\n.wrap .wall-back {\n  transform: rotateX(180deg) translateZ(500px);\n}\n\n@keyframes move {\n  0%{\n    transform: translateZ(500px) rotate(0deg);\n  }\n  100%{\n    transform: translateZ(-500px) rotate(0deg);\n  }\n}\n\n@keyframes fade {\n  0%{\n    opacity: 0;\n  }\n  25% {\n    opacity: 1;\n  }\n  75% {\n    opacity: 1;\n  }\n  100%{\n    opacity: 0;\n  }\n}\n\n.ship {\n  position: absolute;\n  z-index: 1;\n  top: 120px;\n  right: 100px;\n  bottom: 0;\n  height: 170px;\n  width: 350px;\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center center;\n  background-image: url('Too Big');\n}\n\n@keyframes \ud83e\udd2b {\n  0%{\n    filter: hue-rotate(0)\n  }\n  50% {\n    filter: hue-rotate(180deg) saturation(5);\n    transform: scaleX(4000);\n    perspective: 50px;\n  }\n\n  100%{\n    filter: hue-rotate(360deg);\n  }\n}\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\nYou can checkout more web development articles and resources on AppCode."
  },
  {
    "id": 5,
    "title": "E quando o hello world j\u00e1 come\u00e7a dando errado: a cultura de escrever artigos com tutoriais que s\u00f3 d\u00e3o certo.",
    "author": "Morganna",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--MEPrf_ab--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4218/6ba7e378-7eb8-4c33-a1d7-99296f37436d.png",
    "time": "2023-02-17T02:32:06Z",
    "likes": "1",
    "link": "https://dev.to/feministech/e-quando-o-hello-world-ja-comeca-dando-errado-a-cultura-de-escrever-artigos-com-tutoriais-que-so-dao-certo-379m",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--ZdUzqyYu--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1u5dtzv19xdyttyy4jg.png",
    "body": "Voc\u00ea, que est\u00e1 come\u00e7ando agora, provavelmente j\u00e1 recebeu a dica de algu\u00e9m para fazer um Hello World ao come\u00e7ar em uma linguagem de programa\u00e7\u00e3o.\nTem uma hist\u00f3ria m\u00edstica por tr\u00e1s dessa sugest\u00e3o, de que devemos fazer isso com todas as linguagens que come\u00e7amos a aprender do zero para n\u00e3o termos azar com ela. O problema \u00e9 quando j\u00e1 d\u00e1 errado antes mesmo de pensar em mostrar na tela essas duas palavrinhas inofensivas.\nEu sei, bate o desespero, voc\u00ea pensa que n\u00e3o nasceu para aquilo e que todo o seu sonho - ou at\u00e9 mesmo necessidade - de aprender programa\u00e7\u00e3o foi por \u00e1gua abaixo. E quer saber como eu sei disso? D\u00e1 uma olhada nesse meu artigo de Hello World em Python. Deu tudo errado, independente do fato de eu j\u00e1 ter quase 7 anos de experi\u00eancia como desenvolvedora.\nRespira fundo que logo tudo estar\u00e1 sob controle novamente. A quest\u00e3o \u00e9 como saber que deu errado e o que precisa ser corrigido. E, claro, aprendendo agora, n\u00e3o tem como voc\u00ea adivinhar, certo? Talvez com um pouco mais de experi\u00eancia, voc\u00ea comece a desconfiar de algumas coisas, justamente porque j\u00e1 deu errado antes e agora, talvez - e s\u00f3 talvez -, voc\u00ea consiga criar algumas hip\u00f3teses para atuar em rela\u00e7\u00e3o a cada uma delas.\nE o que voc\u00ea faz antes de fazer o famoso Hello World? \u00c9 poss\u00edvel que tenha pesquisado algum v\u00eddeo ou artigo na internet, ou at\u00e9 mesmo esteja seguindo uma pessoa que te ensinou, ou testando o que viu em algum livro. E qual \u00e9 o problema de ter feito isso? Na realidade, nenhum problema. A quest\u00e3o \u00e9 que muitos materiais costumam apenas ensinar o caminho feliz. E ent\u00e3o nasce a cren\u00e7a de que para ser uma pessoa desenvolvedora, voc\u00ea tem que acertar de primeira e acertar sempre. Mas n\u00e3o \u00e9 assim que funciona.\nCalma, veja s\u00f3, \u00e9 importante lembrar que v\u00eddeos s\u00e3o editados, artigos s\u00e3o ajustados, livros passam por corre\u00e7\u00f5es e pessoas n\u00e3o querem mostrar o erro, querem que voc\u00ea acerte de primeira. E n\u00e3o necessariamente isso vai acontecer.\nEnt\u00e3o aqui, eu inicio a campanha ESCREVA ARTIGOS QUE D\u00c3O ERRADO. Ou v\u00eddeos. Ou livros. Ou seja l\u00e1 qual for o formato do conte\u00fado que queiram criar.\nO que quero dizer com isso? Mostre tamb\u00e9m o que pode dar errado e como corrigir. Certamente esses conte\u00fados n\u00e3o cobrir\u00e3o todos os tipos de erros e tudo bem. Mas pelo menos alguns para dar um direcionamento para aquela pessoa que est\u00e1 come\u00e7ando.\nGostaria de deixar como exemplo mais um artigo que fiz sobre como come\u00e7ar no backend com Kotlin. Nele, eu fiz quest\u00e3o de registrar alguns erros que passei e como os corrigi. Primeiro, no intuito de ajudar a mim mesma que usou esse artigo como uma anota\u00e7\u00e3o em um caderno, para que eu me lembrasse como corrigir os problemas, caso passasse por eles novamente. Segundo, porque queria ajudar quem tivesse passado pelo mesmo problema que eu.\nTe convenci? Espero que sim. Mas por fim, vamos \u00e0s dicas de quando tudo d\u00e1 errado no Hello World:\n\nLeia o erro. Parece uma dica boba, mas vai por mim, eu sei como \u00e9 quando o erro acontece e ficamos com a preocupa\u00e7\u00e3o de resolver, sem nem tentar entender o que est\u00e1 escrito. Ou quando ficamos apenas tentando adivinhar onde est\u00e1 o problema, de fato. Isso \u00e9 o mais importante em qualquer parte da sua aventura como pessoa programadora, mesmo depois de passar da fase Hello World. Ler o erro \u00e9 necess\u00e1rio porque ele pode trazer informa\u00e7\u00f5es onde est\u00e1 o problema exatamente. E caso voc\u00ea n\u00e3o entenda o que o erro quer dizer, ou por estar muito gen\u00e9rico, ou por estar em outra l\u00edngua, ou por trazer nomes que voc\u00ea ainda n\u00e3o aprendeu, copie esse erro e fa\u00e7a uma pesquisa. Voc\u00ea pode acabar encontrando alguns direcionamentos;\nTalvez voc\u00ea tenha instalado alguma coisa de forma incorreta. Vale reler essa parte e lembrar cada passo que voc\u00ea fez para notar se esqueceu alguma coisa;\nAlgumas linguagens de programa\u00e7\u00e3o precisam de m\u00e1quinas virtuais para serem executadas no seu computador. Fa\u00e7a algumas pesquisas sobre m\u00e1quina virtual com o nome da sua linguagem na frente, talvez te ajude a identificar algo. Por exemplo: a linguagem Java tem a JVM, Java Virtual Machine;\nEm alguns casos, a instala\u00e7\u00e3o faz ajustes autom\u00e1ticos de vari\u00e1veis de ambiente no seu sistema operacional. E \u00e0s vezes isso n\u00e3o \u00e9 autom\u00e1tico e talvez voc\u00ea tenha que configurar manualmente. Pesquise \"configurar vari\u00e1vel de ambiente\" e o nome da linguagem na frente para entender se \u00e9 necess\u00e1rio fazer algo no seu computador;\nAlguns sistemas operacionais precisam ser reiniciados quando voc\u00ea instala determinada ferramenta. Quem sabe n\u00e3o \u00e9 isso que est\u00e1 faltando para seu Hello World funcionar? N\u00e3o custa tentar;\nCaso voc\u00ea tenha instalado uma IDE ou editor de texto (ferramenta onde voc\u00ea escreve o c\u00f3digo que ser\u00e1 executado), talvez seja importante entender se h\u00e1 alguma configura\u00e7\u00e3o necess\u00e1ria para ser feita que aponte para o ponto da execu\u00e7\u00e3o correta. Vale uma pesquisa tamb\u00e9m.\n\nBom, essas s\u00e3o algumas das dicas que posso deixar para voc\u00eas, por enquanto. Al\u00e9m \u00e9 claro de te sugerir que voc\u00ea respire fundo e entenda que programar \u00e9 uma aventura. Que voc\u00ea vai errar v\u00e1rias vezes, mas que vai ser incr\u00edvel quando voc\u00ea conseguir executar o que queria. O importante \u00e9 estudar e n\u00e3o deixar de praticar, ok?\nAh, e me ajuda a espalhar essa campanha de compartilhar conhecimento n\u00e3o apenas do sucesso, mas tamb\u00e9m dos erros e como solucion\u00e1-los? Obrigada!\n\nGostou do conte\u00fado? Sinta-se livre para contribuir, complementando-o com seus coment\u00e1rios.\nObrigada por ter lido at\u00e9 aqui e deixo o canal aberto para troca de ideias e feedbacks."
  },
  {
    "id": 9,
    "title": "Stack vs Heap Memory Allocation in Java (Codes explained )",
    "author": "Elliot Brenya sarfo",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--5-4NA2nA--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/696524/fbbfc27a-7b52-462d-832e-af7ed351707b.png",
    "time": "2023-02-16T15:06:32Z",
    "likes": "3",
    "link": "https://dev.to/elliot_brenya/stack-vs-heap-memory-allocation-in-java-laymans-guide-2pj9",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--TGLWfRiv--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2q2o7484digtntdvubxu.jpeg",
    "body": "Originally Published at turing.com.\n*Author Name: Elliot Brenya Sarfo (Me) *\nThe Java stack and heap both are used to store information but each have a different uses. The stack is a specific part of a computer's memory that is used to store information about local variables and function calls. It is quick to access because it is easy to reach, but it has a limited amount of space. In contrast, the heap is a section of memory that can store larger amounts of data, though it may take slightly longer to access than the stack.\nWhen you're coding and trying to figure out where to put all your stuff, you have to consider how fast you need to access it versus how much space you have. If you need to grab the data like, now, but don't have much of it, stick it on the stack. On the other hand, if you have a ton of stuff but it's not super urgent to access it, store it on the heap. Choosing between the stack and heap is all about balancing speed and storage.\n\n\n\n  What is stack memory in Java?\n\nYou can take stack memory as a to-do list for your Java program. The items at the top of the stack are the ones that are currently being worked on, while the items at the bottom are waiting their turn. This helps to keep track of what the program is doing and ensures that tasks are completed in the proper order. In summary, stack memory is a useful tool for organizing and managing the flow of a program.\n\n\n\n  How does stack memory work in Java, including PUSH and POP operations?\n\nIn Java, stack memory refers to the part of a computer's memory that is used to store local variables, method arguments, and intermediate results of calculations while a method is executing.\nWhen a method is called, the values of the arguments are pushed onto the top of the stack. As the method executes, it may push additional values onto the stack, such as intermediate results of calculations. When the method finishes executing, the values on the stack are popped off, and the memory is freed up for other uses.\nHere is an example of how stack memory works in Java:\n\n\npublic class StackExample {\n\n  // this method pushes two values onto the stack and then adds them together\n  public static int add(int x, int y) {\n    int sum = x + y; // sum is a local variable that is stored on the stack\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int a = 1; // a and b are local variables stored on the stack\n    int b = 2;\n    int c = add(a, b); // the values of a and b are pushed onto the stack when add() is called\n                    // the result of the addition is stored in a local variable c on the stack\n    System.out.println(c); // the value of c is popped off the stack and printed\n  }\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn this example, when the add() method is called, the values of x and y (which are equal to a and b, respectively) are pushed onto the stack. The method then adds and stores the result in the local variable sum, which is also stored on the stack. When the method returns, the value of the sum is popped off the stack and returned to the calling method. The value is then stored in the local variable c on the stack, and finally printed. At this point the value of c is popped off the stack and discarded.\n\n\n\n  How is stack memory used in Java?\n\nStack memory is a memory structure used for storing local variables and function calls in a Java program. It works like a stack of plates, where the most recently added item is always on top.\nWhen a function is called in a Java program, a new block of memory is added to the top of the stack to hold the local variables and function parameters for that function. When the function is finished, this block of memory is popped off to the top of the stack, and the program continues execution using the previous block of memory.\nThis process of adding and removing blocks of memory from the stack is called \"pushing\" and \"popping,\" respectively. The stack memory is managed automatically by the Java Virtual Machine (JVM), so you don't have to worry about it as a programmer.\nHere's an example of how stack memory is used in Java:\n\n\npublic void exampleFunction() {\n  // Declare a local variable called \"x\"\n  int x = 10;\n  // Call another function called \"innerFunction\"\n  innerFunction();\n}\n\npublic void innerFunction() {\n  // Declare a local variable called \"y\"\n  int y = 5;\n  // Do some calculations using \"x\" and \"y\"\n  int result = x + y;\n  // Print the result\n  System.out.println(result);\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn this example, when exampleFunction is called, a new block of memory is pushed onto the stack to hold the local variable x. When innerFunction is called, another block of memory is pushed onto the stack to hold the local variable y. When innerFunction is finished, this block of memory is popped off the stack, and the program continues execution in exampleFunction.\nStack memory is an important part of the Java programming language, and it helps to make sure that your program runs smoothly and efficiently. So, it is very important to have a good understanding of how stack memory works in Java.\n\n\n\n  Limitations of stack memory, including fixed size and LIFO nature\n\nStack memory, has a fixed size, meaning it can only store a limited amount of data. If a program tries to push more data onto the stack than it can hold, it will cause a stack overflow error. Additionally, stack memory follows a LIFO (Last-In, First-Out) structure, meaning the last value pushed onto the stack is the first one to be removed.\nWhile this can be useful in some cases, it can also be a limitation if you need to access data in a specific order that differs from the order in which it was pushed onto the stack. In this case, you would need to use a different data structure.\n\n\nStack<String> names = new Stack<>();\nnames.push(\"Alice\");\nnames.push(\"Bob\");\nnames.push(\"Eve\");\n\n// the names are popped off the stack in the opposite order in which they were pushed\nSystem.out.println(names.pop()); // prints \"Eve\"\nSystem.out.println(names.pop()); // prints \"Bob\"\nSystem.out.println(names.pop()); // prints \"Alice\"\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn this example, the names are pushed onto the stack in the order \"Alice\", \"Bob\", \"Eve\". However, when they are popped off the stack, they are printed in the opposite order, \"Eve\", \"Bob\", \"Alice\".\nThis is because the last name to be pushed onto the stack, \"Eve\", is the first one to be popped off. If you needed to access the names in the order in which they were pushed onto the stack, you would need to use a different data structure, such as an array or a linked list.\n\n\n\n  What is heap memory in Java?\n\nHeap memory in Java is a type of memory that is used to store objects that are created during the execution of a Java program.\nIt is called heap memory because it is a large pool of memory that is managed automatically by the Java runtime, and objects are dynamically allocated and deallocated from this pool as needed.\nTo break things down, heap memory in Java is like a big storage room where all the objects in a Java program are stored. Think of it as a giant closet where you keep all your clothes and other stuff. Just like how you might have a limited amount of space in your closet, a Java program also has a limited amount of space in the heap for storing objects.\nNow, you might be wondering what these \"objects\" are. Well, an object in Java is like a little box that contains data and instructions on how to use that data. For example, let's say you have a \"dog\" object that contains information about a particular dog, like its name, breed, and age. When you create this object in your Java program, it gets stored in the heap memory.\nThe heap memory is also used for storing temporary variables that are created during the execution of a Java program. These variables are called \"temporary\" because they only exist while the program is running, and they are automatically deleted once the program is finished.\n\n\n\n  How does heap memory work in Java, including PUSH and POP operations?\n\nIn Java, the heap memory is managed by the JVM (Java Virtual Machine). When you create an object in your Java program, the JVM allocates a certain amount of space in the heap to store that object. This process is known as a \"PUSH\" operation because you are pushing the object into the heap memory.\nHere is an example of a PUSH operation in Java:\n\n\n// Create a new Dog object and store it in the heap memory\nDog myDog = new Dog(\"Fido\", \"Labrador\", 3);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWhen you are finished using an object, you can remove it from the heap memory by setting its reference to null. This process is known as a \"POP\" operation because you are popping the object out of the heap.\nHere is an example of a POP operation in Java:\n\n\n// Remove the Dog object from the heap memory\nmyDog = null;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIt's important to note that the JVM has a garbage collector that automatically removes objects from the heap when they are no longer being used. This helps to free up space in the heap for new objects.\nSo to summarize, heap memory in Java is used to store objects and temporary variables, and the JVM manages the allocation and deallocation of space in the heap through PUSH and POP operations.\n\n\n\n  How is heap memory used in Java?\n\nIn this example, we have a Dog class that has three instance variables (name, breed, and age) and a bark() method. When we create a new Dog object called \"Fido\" using the new keyword, it gets stored in the heap memory. We can then access this object and call its methods, like the bark() method in this case, from the heap memory.\nAdditionally, any temporary variables that are created during the execution of this program will also be stored in the heap memory. For example, if we had a loop that created a new Dog object on each iteration, those objects would also be stored in the heap memory.\n\n\npublic class Dog {\n  private String name;\n  private String breed;\n  private int age;\n\n  public Dog(String name, String breed, int age) {\n    this.name = name;\n    this.breed = breed;\n    this.age = age;\n  }\n\n  public void bark() {\n    System.out.println(\"Woof! My name is \" + name + \" and I am a \" + breed + \" dog.\");\n  }\n\n  public static void main(String[] args) {\n    Dog fido = new Dog(\"Fido\", \"Labrador\", 3); // Fido object is created and stored in heap memory\n    fido.bark(); // Fido object is accessed from heap memory and the bark() method is called\n  }\n}\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Differences Between Stack and Heap Memory in Java\n\nJava programs employ the memory types heap and stack to store data. These two forms of memory differ significantly in terms of size, accessibility, and allocation techniques. We will now discuss Java heap vs stack in details.\nThe stack is generally smaller in size than the heap because it is used for storing small, temporary variables and data, while the heap is used for storing larger objects.\n\nSize: Compared to the heap, the stack is often smaller in size. This is because the stack is used to store temporary data and local variables, both of which are typically small data files. On the other hand, objects that can be substantially greater in size are stored in the heap.\nAccessibility: The stack is more structured and organized compared to the heap. Data in the stack can only be accessed in a specific order, and it is automatically cleaned up when a method or function finishes execution. In contrast, data in the heap is more flexible and can be accessed any time. However, this also means that the heap can become cluttered and fragmented over time, requiring more maintenance.\nAllocation: Data in the stack is automatically allocated and deallocated by the Java Virtual Machine (JVM) as the program runs. On the other hand, data in the heap must be explicitly created and destroyed by the programmer using the new and delete keywords, or by using garbage collection.\n\n\n\n\n  Conclusion\n\nIn conclusion, stack and heap are two different areas of memory used for storing different types of data in Java programming. Stack memory is used for storing local variables and function calls and has a fixed size. It is fast and efficient, but can only be used for storing short-lived data. Heap memory is used for storing objects and class instances and is dynamically allocated at runtime. It is slower and less efficient but can be used for storing long-lived data and is shared among all threads in a program.\nUnderstanding the differences between stack and heap memory and how to effectively use them is essential for writing efficient and stable Java programs. Choosing the appropriate memory structure for your data based on its size, accessibility, and lifetime requirements can help to optimize the performance and reliability of your program."
  },
  {
    "id": 10,
    "title": "How to Build Offline Web Applications",
    "author": "Scofield Idehen",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s---VHQhOQi--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/835502/9e63c9bc-4d9d-4638-b411-d0ec95dbb351.jpeg",
    "time": "2023-02-16T23:34:47Z",
    "likes": "4",
    "link": "https://dev.to/scofieldidehen/how-to-build-offline-web-applications-5a9l",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--nZI14gr9--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/786tq34bio3szgfhbbyp.png",
    "body": "With the increasing prevalence of mobile devices and unreliable network connections, it\u2019s more important than ever to ensure that web applications can function even when a user is offline.\nAdditionally, users expect web applications to be reliable and fast, with minimal downtime and interruptions.\nOne way to achieve this is by building Progressive Web Applications (PWAs), web applications that can be installed on a user\u2019s device and work offline.\nThis article will explore the techniques and technologies used to create offline-capable and reliable web applications.\nI. Introduction\nToday, people rely on web applications for various tasks, from ordering food to managing finances.\nAs such, these applications must be available to users even when they don\u2019t have an internet connection. Additionally, users expect web applications to be fast, responsive, and available at all times.\nPWAs are web applications that can be installed on a user\u2019s device and work offline, providing an experience similar to that of a native mobile app.\nII. Offline Capability\nOne of the key features of PWAs is their ability to work offline. This is accomplished by caching static assets (such as HTML, CSS, and JavaScript files) and data on the user\u2019s device. There are several ways to store this information, including LocalStorage and IndexedDB.\nLocalStorage is a simple key-value store that can store small amounts of data, such as user preferences or authentication tokens. It\u2019s easy to use and well-suited for small amounts of data, but it has a limited capacity and can\u2019t store larger data sets.\nIndexedDB, on the other hand, is a more powerful data store that allows storing large amounts of structured data. It uses an object-oriented data model, making it more complex than LocalStorage, but also more powerful.\nService workers, a scriptable network proxy, allow you to control how the browser handles network requests, including serving assets and data from the cache when the network is unavailable.\nIt runs separately from the web application and can operate on a separate thread, allowing for more efficient management of assets and data.\nIII. Reliability\nPWAs provide a reliable offline experience by using service workers to control how network requests are handled. Service workers can intercept network requests and check for a cached response before requesting data from the network.\nAdditionally, they can queue requests when the network is unavailable and send them when the connection is restored. This allows the web application to continue functioning even when the user\u2019s device is offline.\nPush notifications and background sync are other features that can be used to improve the reliability of a PWA. Push notifications allow the application to notify the user of new content or updates even when the app is not open. In contrast, background sync allows the app to perform tasks like uploading data when the device is connected to the internet.\nIV. PWA implementation\nVarious libraries and frameworks are available to help with the development of PWAs.\nOne popular choice is Workbox, a set of libraries and Node modules created by Google that makes it easier to add service workers and other PWA features to your web application.\nWhen designing and implementing a PWA, it\u2019s essential to keep in mind best practices such as designing for offline functionality, ensuring fast load times, and using appropriate storage options. It\u2019s also essential to test the PWA on different devices and network conditions to ensure it works correctly.\nExamples of successful PWAs:\n\n\nTwitter Lite is a lightweight version of the Twitter app that uses a PWA to provide an offline-capable and fast user experience.\n\nAlibaba is a popular e-commerce platform that uses a PWA to provide shoppers a fast and reliable offline experience.\n\nSpotify is a music streaming app that uses a PWA to provide an offline listening experience for users.\n\nForbes is a business and financial news website that uses a PWA to provide readers a fast and offline-capable experience.\n\nTrivago, a hotel and travel price comparison website, the PWA offers an improved user experience and faster load time.\n\nGoogle Maps Go is a lightweight app that uses a PWA to provide an offline-capable and fast user experience.\n\nThese are only a few examples of the many PWAs available today. Across various industries and use cases, PWAs are becoming more popular and widely adopted by companies to improve user experience and provide the offline capability.\nBest Practices for Designing and Implementing a PWA:\n\nUse a Service Worker to cache static assets and handle network requests\nUse a web manifest file to specify the start URL, display mode, and other PWA features\nUse HTTPS to ensure that the PWA is secure and that service workers can be used\nUse responsive design techniques to ensure that the PWA works well on different devices and screen sizes\nUse push notifications and background sync to provide a reliable experience even when the user is offline\nTest the PWA on different devices and network conditions to ensure that it works correctly\nKeep the PWA\u2019s initial load time as short as possible\nUse appropriate storage options: consider using both LocalStorage and IndexedDB\nOptimize the performance using techniques such as code splitting, preloading and pre-caching\nContinuously monitor and measure the performance\n\nUse case:\nA weather PWA app that allows users to check the current weather in their location or any other location they search for. The app will cache the weather data and allow the user to access the data even when offline.\nTo implement this PWA, we will use the following technologies:\n\nHTML and CSS for the app layout and styling\nJavaScript for the app logic and interacting with the API\nGeolocation API for getting the user\u2019s location\nOpenWeatherMap API for getting weather data\nWorkbox for caching the weather data and assets\n\nHere\u2019s an example of how the app\u2019s code might look like:\n\nHTML:\n\n<!DOCTYPE html>\n<html>\n<head>\n<title>Weather PWA</title>\n<link rel=\"manifest\" href=\"manifest.json\">\n</head>\n<body>\n<header>\n<h1>Weather PWA</h1>\n</header>\n<main>\n<div id=\"location\"></div>\n<div id=\"weather\"></div>\n</main>\n<footer>\n<p>Copyright 2021</p>\n</footer>\n</body>\n</html>\nCSS:\nbody {\nfont-family: sans-serif;\npadding: 0;\nmargin: 0;\n}\nheader {\nbackground-color: #f1f1f1;\npadding: 20px;\ntext-align: center;\n}\nmain {\npadding: 20px;\ntext-align: center;\n}\nfooter {\nbackground-color: #f1f1f1;\npadding: 10px;\ntext-align: center;\n}\nJavaScript:\n// Get the user's location\nnavigator.geolocation.getCurrentPosition(getWeather);\nfunction getWeather(position) {\nconst lat = position.coords.latitude;\nconst lon = position.coords.longitude;\n// Make an API request to OpenWeatherMap\nfetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=<your-api-key>`)\n.then(response => response.json())\n.then(data => {\nconst location = data.name;\nconst temperature = data.main.temp;\n// Display the weather data on the page\nconst locationElem = document.getElementById('location');\nlocationElem.innerHTML = `Location: ${location}`;\nconst weatherElem = document.getElementById('weather');\nweatherElem.innerHTML = `Temperature: ${temperature}`;\n})\n.catch(err => console.log(err));\n// Register the service worker\nif ('serviceWorker' in navigator) {\nnavigator.serviceWorker\n.register('/serviceWorker.js')\n.then(() => console.log('Service worker registered'))\n.catch(err => console.log(err));\n}\nserviceWorker.js\n\n\n```\n\njavascript\n// Import Workbox\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/4.3.1/workbox-sw.js');\n// Use the precaching module to cache the app's static assets\nworkbox.precaching.precacheAndRoute([\n{url: '/index.html', revision: '1'},\n{url: '/styles.css', revision: '1'},\n{url: '/script.js', revision: '1'},\n]);\n// Use the caching module to cache the weather data\nworkbox.routing.registerRoute(\n/^https:\\/\\/api\\.openweathermap\\.org/,\nnew workbox.strategies.StaleWhileRevalidate(),\n);\n}\n\nGeolocation API: This API allows web applications to access the user\u2019s location information. In the example above, we used the navigator.geolocation.getCurrentPosition() method to get the user\u2019s current location and passed that information to the getWeather() function.\nOpenWeatherMap API: This API is used to get weather data for a specific location. In the example above, we requested the API to get the current weather data for the user\u2019s location. We used the returned data to display the location and temperature on the page.\nWorkbox: Workbox is a set of libraries and Node modules created by Google that makes it easy to add service worker features to your web application. In the example above, we used Workbox\u2019s precaching module for caching the app\u2019s static assets and its caching module for caching the weather data. This way, the PWA can access this data even when the user is offline.\n\nUsing these technologies, the example of a PWA capable of obtaining user location, fetching weather data and caching it to provide an offline experience is implemented.\nPlease note that the API key and endpoint URL may differ, and you will have to acquire one from the OpenWeatherMap service and use it in the app.\nConclusion\nIn conclusion, building a Progressive Web Application (PWA) allows web applications to provide an offline-capable and reliable user experience.\nPWAs can continue functioning even when the user is offline by utilising service workers to cache assets and data. Additionally, by utilizing the Geolocation API and OpenWeatherMap API, the PWA can gather information from the users and provide a personalized experience.\nFurthermore, by utilizing Workbox, developers can quickly implement service worker features such as offline caching and background sync.\nResource\n\nGoogle Developers\neducative"
  },
  {
    "id": 11,
    "title": "Easy Integration Tests for Event-Driven AWS Architectures with EventScout \ud83d\udce8\ud83d\udd2d",
    "author": "Fran\u00e7ois Farge",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--39KDK_Ri--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4917/bd5f0dd0-537a-49b6-9728-091af6df0de0.png",
    "time": "2023-02-16T11:26:37Z",
    "likes": "10",
    "link": "https://dev.to/kumo/easy-integration-tests-for-event-driven-aws-architectures-with-eventscout-5d05",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--svlZw0ug--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/fargito/devto-articles/master/blog-posts/2-announcing-event-scout/static/event-scout-cover-large.png",
    "body": "When building event-driven Serverless applications on AWS, EventBridge is a must-have. It's simple to use, scalable and inexpensive.\nHowever, a challenge I often faced on event-driven projects was testing. I could not find an easy way to validate that the events sent by my application were matching my expectations. The critical challenge was to list events sent through an event bus, which is not natively possible with EventBridge.\n\n\n\n  TL;DR\n\nI made a cool EventBridge integration testing library for Typescript, check it out!\n\nWhat could go wrong in my event-driven architecture?\nEvents? What events\nSearching for and EventBridge testing tool\n\nBuilding a scalable EventBridge testing infrastructure\n\nSimple to use\nScalable\nCheap\nSecure\n\n\n\nUse EventScout in your infrastructure\n\nDeploy resources with EventScout\nUse the EventScout client in your tests\n\n\n\n\n\n\n  What could go wrong in my event-driven architecture?\n\nSince its initial release in 2019, EventBridge has been widely used to build event-driven Architecture on AWS, progressively replacing older tools such as SQS and SNS (although these still have valid specific use cases).\nI have always been a fan of EventBridge. It\u2019s simple to use, powerful and inexpensive. However, during my first projects with EventBridge, I found it very difficult to test my asynchronous applications.\nFor example, let\u2019s imagine a very simple application with EventBridge:\n\nIn this architecture, we have two Lambdas. The first one is synchronously triggered by ApiGateway. It then puts an ORDER_CREATED event into EventBridge. That event triggers the execution of a second Lambda. Pretty simple, right?\nHowever, many things could go wrong in our system:\n\nour application code can behave unexpectedly and fail to send the event\n\n\n\nthere can be configuration issues:\n\n\ninvalid IAM permissions\nmissing environment variables\n\nonOrderCreated could listen to the wrong event\n\n\n\n\nTo alleviate these risks, we can test our system at 3 different levels:\n\n\nunit tests: they can address the application failure cause. They validate that the code behaves as expected, and mock its external interactions. Efficient unit testing for Lambda is a complex topic in itself, that I will address in another article about hexagonal architecture for Serverless\n\nintegration tests: they assert that several components in our system behave as expected together. There are multiple types of integration tests, and in particular cloud-native integration tests. Fortunately for us, these tests can prevent our configuration failure cause\n\nend-to-end tests: they consider our whole system as a black box and only interact with its interfaces. They are beyond the scope of this article\n\nDuring the rest of this article, we will focus on integration tests and EventBridge. In our system, two integration tests would seem relevant.\nThe simplest one tests the interactions between EventBridge and onOrderCreated.\n\nIn order to validate that EventBridge and onOrderCreated are correctly configured, we can simply put a valid event in EventBridge at the beginning of our test, then wait and check that our Lambda has been invoked, by checking CloudWatch logs for example.\nThe second integration test is more complex and aims to check the interactions between the resources at the start of our process.\n\nHere, the goal of our test is to call the endpoint provided by API Gateway and assert that the createOrder Lambda has sent an event matching our expectations in EventBridge. And this is where it gets truly complicated.\n\n\n\n  Events? What events?\n\nTesting event-driven architectures is a whole topic in itself, but in particular, EventBridge doesn\u2019t make it easier.\nBut what makes EventBridge-powered applications so difficult to test? EventBridge provides no way of listing events it has received, or check that an event has been put to it. While these features would make little sense in a production environment, they would have been much helpful to check that our code has produced some events.\nIn order to assert that events have transited through a bus, we need to project them somehow in an observable place.\n\n\n\n  Searching for an EventBridge testing tool\n\nIn order to bypass EventBridge's limitations on the testing topic, I searched for an existing tool.\nBut what would I want from this tool?\n\nI\u2019d want it to be simple to set up. Developers need to encounter the least possible friction to write good integration tests\nI\u2019d want it to be scalable: I need my integration tests to be able to run in parallel without interference\nI\u2019d want it to remain cheap: my whole architecture uses the serverless pay-as-you-go pricing model, and my tests must remain inexpensive enough\nObviously, it needs to be secure (do I need to explain why?)\n\nIn found several solutions online:\n\nSetting up a Step Function for each test\nCreating an EventBridge target to dump events to SQS. This approach was proposed in several articles (here and here) and implemented in the sls-test-tools library\nUsing CloudWatch to dump and debug events, introduced by David Boyne. Although it was not directly aimed at testing, maybe this solution could be used for integration tests\n\nI wanted to evaluate the perks and drawbacks of each solution, so I scored them against my constraints and put them in a comparative table:\n\n\n\n\nSimple setup\nScalable\nCheap\nSecure\n\n\n\n\nStep functions\n\u274c Manual setup required\n\u26a0\ufe0f Probably one infrastructure per test\n\u2705 Pay-as-you-go\n\u2705 IAM\n\n\nSQS\n\u2705 NPM package \u2705 Automated resources creation\n\u274c No parallelism: SQS can only have one consumer \u26a0\ufe0f SQS creation limits\n\n\u2705 Pay-as-you-go\u26a0\ufe0f No automatic disabling of resources\n\u2705 IAM\n\n\nCloudWatch\n\u274c Manual setup required\n\u2705 Unlimited parallel reads\n\u274c CloudWatch logs are expensive!\u274c No automatic rule disabling\n\u2705 IAM\u26a0\ufe0f Sensible event data may persist in the logs\n\n\n\nAlthough all of these solutions inspired me and made me realize that testing EventBridge was possible, none of them completely fulfilled my requirements.\n\n\n\n  Building a scalable EventBridge testing infrastructure\n\nI therefore decided to build and open-source an EventBridge integration tests library. This is why I am very proud to introduce EventScout!\nIt is designed following the requirements I had applied to existing online solutions.\n\n\n\n  Simple to use\n\nEventScout is composed of two highly reusable parts:\n\nA CDK construct to deploy the necessary resources\nA lightweight client to use in the tests, for example with Jest of Vitest\n\n\nIf you wish to learn how to use EventScout on you project, head to the documentation.\n\n\n\nScalable\n\nMaking our testing infrastructure scalable requires that our tests can be run in parallel. For this:\n\nWe must not be constrained by AWS quotas (e.g. after an SQS queue is deleted, another with the same name cannot be created for 60 seconds). Therefore EventScout ensures only the minimal resources are created during a test suite, and reuse resources between tests\nWe must be able to receive events independently for each test suite:\n\n\nEach test suite declares a pattern of events to watch (a trail of events)\nEach trail is then completely independent from all other trails to allow parallel query. Each trail can be queried as many times as necessary\n\n\n\nTherefore, a test suite\u2019s sequence diagram looks like the following:\n\nFrom an architectural point of view, let\u2019s dive in this sequence:\n\n\nDuring its setup phase, the test creates an EventBridge rule with the desired pattern, linking to EventScout\u2019s ingestion lambda (storeEvents)\nThe test produces some events that match the pattern\nThe newly created rule is called\nThe rule triggers the ingestion lambda\nUsing metadata information from the rule, storeEvents saves the event in the correct trail.\nThe test can query the trail and perform assertions\nA the end of the test, the only thing left is to delete the EventBridge rule\n\nTwo features are key here to make EventScout scalable:\n\nUsing one EventBridge rule per test suite:\n\n\nit makes each test fully independent from all others\nit reuses infrastructure and only needs to create and delete the rule, which is quite fast\n\n\nUsing the rule metadata to store events in a trail:\n\n\nthere is no need for additional request or computation to know which test suites are interested in the received event\nif an event matching two rules is sent, it will be stored in two trails, which enables parallel tests\n\n\n\n\n\n\n  Cheap\n\nEventScout only uses serverless resources (Lambda, DynamoDB, API Gateway) to take full advantage of the pay-as-you-go model. Moreover, EventScout ensures that no unnecessary resources are used through automatic trail cleanup. Leveraging DynamoDB\u2019s time-to-live capabilities, it automatically:\n\ncleans recorded trail events after 15 minutes\nstops the event rules after 15 minutes to handle the case when they haven\u2019t been manually stopped\n\nThis makes EventScout the safest way to run integration tests without worrying about their cost.\n\n\n\n  Secure\n\n\nAll interactions between the EventScout client and the construct are secured by IAM\nEvents are automatically cleaned after 15 minutes, removing any privacy issue\n\n\n\n\n  Use EventScout on your infrastructure\n\nLeveraging EventScout capabilities on your infrastructure is pretty straightforward.\n\n\n\n  Deploy resources with EventScout construct\n\nStart by installing the EventScout construct:\n\n\nnpm install @event-scout/construct\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen, instantiate the CDK construct in your CDK app:\n\n\nimport { EventScout } from '@event-scout/construct';\nimport { CfnOutput } from 'aws-cdk-lib';\nimport { EventBus } from 'aws-cdk-lib/aws-events';\n\n// create the necessary resources\nconst { restEndpoint } = new EventScout(this, 'EventScout', {\n  eventBus: EventBus.fromEventBusName(this, 'EventBus', eventBusName),\n});\n\n// export the endpoint value for easier use in tests\nnew CfnOutput(this, 'EventScoutEndpoint', {\n  value: restEndpoint,\n  description: 'EventScout endpoint',\n  exportName: '<your export name>',\n});\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe export here is not required, but will be useful to retrieve the EventScout endpoint for your tests.\n\n\n\n  Use the EventScout client in your tests\n\n\nnpm install --save-dev @event-scout/client\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen you can head to the documentation for details on how to instantiate and use the client in your tests.\nCongratulations, you have unlocked the power of EventScout! Use it wisely..."
  },
  {
    "id": 12,
    "title": "useCallback \u2013 Demystifying React Hooks (Pt. 1)",
    "author": "Austin Ryan Taylor",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--RBpzFg1h--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1028297/14561eae-66eb-4b21-a91d-70e14e6e7176.png",
    "time": "2023-02-16T21:31:24Z",
    "likes": "12",
    "link": "https://dev.to/austinrt/demystifying-react-hooks-usecallback-4618",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--t557iD-h--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ueiyv7jee68b52a8oj1d.png",
    "body": "In this article, we will explore when and how to use React\u2019s useCallback hook and a mistake made by most Junior Developers.\nIf you'd like to close this down and run it locally, the repo can be found here\n\n\n\n  Getting Started\n\n\nfork and clone\ncd client\nnpm i\nnpm start\n\n\n\n\n  Referential Equality\n\nReferential Equality is a foundational concept in both JavaScript and Computer Science as a whole. So let's start with a demonstration of it in action.\nYou can simply read along or run referentialEquality.js to observe the output.\n\n\nconsole.log(1 === 1);\n// prints true\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWhen evaluating whether the integer 1 is strictly equal to the integer 1, the console prints true. This is because, well... the integer 1 is strictly equal to the integer 1.\nWe see the same result when evaluating two strings.\n\n\nconsole.log('Referential Equality' === 'Referential Equality');\n// prints true\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nObviously, this will always be the case for two primitive data types of the same value.\nNow, what about data structures? For example, two object literals with the same key/value pairs? What about empty object literals?\n\n\nconsole.log({ a: 1 } === { a: 1 });\n// prints false\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWhy would this print false? When comparing whether these two object literals are strictly equal, JavaScript uses their respective memory addresses.\nIn other words, these two objects may contain the same values, but they're not referencing the same object. They look the same but occupy two different spaces in memory.\nThe same applies whether you're comparing two object literals, two array literals, or two functions!\n\n\nconsole.log({} === {});\n// prints false\n\nconsole.log([1, 2, 3] === [1, 2, 3]);\n// prints false\n\nconsole.log([] === []);\n// prints false\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nTo demonstrate this further, we will define a function func, which returns an anonymous function that, in turn, returns something else (like a JSX element).\n\n\nconst func = () => {\n  return () => 'This is a pretend component.';\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe will then assign two different functions, firstRender and secondRender, equal to the value returned by func.\n\n\nconst firstRender = func();\n\nconst secondRender = func();\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThink of func as your React functional component, while firstRender is a function _inside_ of it on the first render, and secondRender is a function _inside_ of it on the second render.\nEven though firstRender and secondRender look the same, return the same value, and are even assigned their value from the same definition, they do not have referrential equality. As a result, every time the parent component renders, it redefines this function.\n\n\nconsole.log(firstRender === secondRender);\n// false\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nUnfortunately, in JavaScript, it isn\u2019t easy to print these memory addresses like in Python, but for a slightly more in-depth explanation of reference vs. value, take a look atthis article.\nThis topic can get dense, and you don't need to teach a class on it tonight. So for now, just remember:\n\nprimitive data type === primitive data type\ndata structure !== data structure.\n\nWith referential equality out of the way, let's dive into our React code and see why this is relevant.\n\n\n\n  Starter Code\n\nStart by looking through the provided code, then open your dev tools. We're going to be using the browser's console in a bit.\nAfter we spin up our app, open the BookDetails.jsx component and re-save. The first thing we may notice in our React dev server is a common WARNING that young developers tend to ignore. As you hit the workforce and start writing code for production, your linters will be even more strict than what\u2019s built into create-react-app. WARNINGS will turn to ERRORS, and some linter rules won't even allow you to push without addressing these ERRORS.\nAnd brace yourself; most linters won't allow console.logs in your code. So the earlier you learn the proper way, the better. So rather than ignore it, let\u2019s figure out how to treat it.\n\n\nWARNING in [eslint]\nsrc/components/BookDetails.jsx\n  Line 18:6:  React Hook useEffect has a missing dependency: 'getBookDetails'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\n\nwebpack compiled with 1 warning\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNOTE: you may first need to re-save BookDetails.jsx to create this WARNING\nIf we dig into the React Docs, we can decode the semi-confusing proposed solutions to this WARNING as follows:\n\nTake a moment to think through the consequences of each option.\n\nInclude the function definition inside of theuseEffect\n\n\n\nWe cannot call this function elsewhere unless we redefine it.\n\n\nRemove the dependency array.\n\n\nThis will trigger the useEffect every time the state or props change, typically causing an infinite re-render, and in our case, it could overload our API with infinite requests.\n\n\nRemove the function call from the useEffect.\n\n\nThe function won't get called.\n\n\nInclude the function in the dependency array.\n\n\nThe first time the component renders, it will define our function, which will trigger the useEffect, which will cause the component to re-render, which will redefine the function, which will trigger the useEffect, which will cause the component to re-render, which will redefine the function...\n\nSo ...what's a developer to do?\n\nThe simplest and preferred solution would be to 'include it,' that is, move the getBookDetails function definition inside the useEffect. This adheres to an Object-Oriented Programming principal known as Encapsulation.\nBut let\u2019s say we know we need to call the function elsewhere. Should we redefine it later? That\u2019s not very DRY of us.\nLet\u2019s change our dependency array to include our function reference. Your useEffect should now look like this.\n\n\nuseEffect(() => {\n  getBookDetails();\n}, [getBookDetails]);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAnd getBookDetails remains defined above the useEffect.\n\n\nconst getBookDetails = async () => {\n  const res = await axios.get(`${BASE_URL}/${id}`);\n  setBook(res.data);\n  console.log(res.data);\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow we have a new WARNING:\n\n\nWARNING in [eslint]\nsrc/components/BookDetails.jsx\n  Line 10:9:  The 'getBookDetails' function makes the dependencies of useEffect Hook (at line 18) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'getBookDetails' in its own useCallback() Hook  react-hooks/exhaustive-deps\n\nwebpack compiled with 1 warning\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Enter the useCallback Hook\n\nIn short, the useCallback hook allows you to cache, or \u2018memoize,\u2019 a function between re-renders of your component. It performs a similar task to useMemo, the nuances of which we will get into in a different article.\nIf the nitty-gritty of this interests you, you can read more about it in the React docs.\nPlease notice their warning:\n\nYou should only rely on useCallback as a performance optimization. If your code doesn\u2019t work without it, find the underlying problem and fix it first. Then you may add useCallback to improve performance.\n\n\n\n\n\n\nuseCallback Syntax\n\nuseCallback syntax is very similar to the useEffect syntax, which we already know. Look at the skeletons of each.\n\n\nuseEffect(() => {}, []);\n\nuseCallback(() => {}, []);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe slight difference is with useEffect, we tell the anonymous function to execute our function while with useCallback, we assign the return value to a reference to be called elsewhere.\nFirst, we will import useCallback from 'react'. Rather than adding a new line, it\u2019s best to destructure it along with our other imports.\n\n\nimport { useState, useEffect, useCallback } from 'react';\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow we can assign getBookDetails to the value returned from a useCallback function call.\n\n\nconst getBookDetails = useCallback();\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen we add all the syntax for useCallback. Remember your dependency array!\n\n\nconst getBookDetails = useCallback(() => {}, []);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn our example, we need async before our parameters.\n\n\nconst getBookDetails = useCallback(async () => {}, []);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAnd finally, we add the logic of our function into the code block.\n\n\nconst getBookDetails = useCallback(async () => {\n  const res = await axios.get(`${BASE_URL}/${id}`);\n  setBook(res.data);\n  console.log(res.data);\n}, []);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nOnce we save, we get\u2026 another WARNING.\n\n\nWARNING in [eslint]\nsrc/components/BookDetails.jsx\n  Line 14:6:  React Hook useCallback has a missing dependency: 'id'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\n\nwebpack compiled with 1 warning\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nLet's think through this for a moment.\nWhy should our dependency array track the id variable?\n\nIf the value of id changes, `getBookDetails` needs to hit a different endpoint, so React should redefine it. \n\nAfter we add id to our dependency array, our finished getBookDetails and useEffect functions should look like this. Look closely at the differences between the way we implement the two hooks.\n\n\nconst getBookDetails = useCallback(async () => {\n  const res = await axios.get(`${BASE_URL}/${id}`);\n  setBook(res.data);\n  console.log(res.data);\n}, [id]);\n\nuseEffect(() => {\n  getBookDetails();\n}, [getBookDetails]);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAnd finally, that\u2019s it! We see green in our React dev server. A happy linter is a happy Senior Developer. And a happy Senior Developer is a happy you!\n\nI\u2019m always looking for new friends and colleagues. If you found this article helpful and would like to connect, you can find me at any of my homes on the web.\nGitHub | Twitter | LinkedIn | Website\n\n\n\n\n  Resources\n\n\nuseCallback\nJavaScript Primitive Data Types vs. Data Structures\nReferential Equality\nReact Docs\nEncapsulation"
  },
  {
    "id": 13,
    "title": "Can Value Stream Management Solve DevOps\u2018 Struggles?",
    "author": "Conor Bronsdon",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--RSL_rpS5--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4364/2c7eb340-27af-4302-a261-60dfbfdd60cc.jpg",
    "time": "2023-02-16T23:41:58Z",
    "likes": "3",
    "link": "https://dev.to/linearb/can-value-stream-management-solve-devops-struggles-icj",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--sm__NU_8--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0svoq1cjm71rja2yu9p0.png",
    "body": "A decades-old physical goods manufacturing concept is being applied to modern dev teams with great results. What can software development learn from the past?\nValue Stream Management (VSM) has been a focus of business and manufacturing for years but big tech has only recently taken notice.\nSteve Pereira, a.k.a. \"The VSM Guy\", joins us to talk about what engineering leaders can learn from VSM, its impact on individual and team workflow, how it differs from Agile and DevOps, and why its emphasis on the creation and delivery of value represents an opportunity for dev teams everywhere.\n\n\n\n\n\n\n  Episode Highlights:\n\n\n(2:28) What is Value Stream Management?\n(9:03) How can engineering managers apply VSM to their org?\n(17:26) Applying VSM to individual contributors\n(23:36) DevOps vs VSM\n(30:49) Mapping\n(36:23) Intentionally engineering flow\n\nWhile you\u2019re here, check out this video from our YouTube channel, and be sure to like and subscribe when you do! \n\n\n\n\n\n\n  Want to cut code-review time by up to 40%? Add estimated review time to pull requests automatically!\n\ngitStream is the free dev tool from LinearB that eliminates the No. 1 bottleneck in your team\u2019s workflow: pull requests and code reviews. After reviewing the work of 2,000 dev teams, LinearB\u2019s engineers and data scientists found that pickup times and code review were lasting 4 to 5 days longer than they should be. \nThe good news is that they found these delays could be eliminated largely by adding estimated review time to pull requests!\n\n\n\n  Learn more about how gitStream is making coding better HERE."
  },
  {
    "id": 14,
    "title": "How to Make Star Rating in React",
    "author": "Anna Q. Harder",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--AsVWSKj_--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/970989/93282f96-d1a0-45de-8b2b-38351f17436a.jpeg",
    "time": "2023-02-16T22:59:54Z",
    "likes": "1",
    "link": "https://dev.to/annaqharder/how-to-make-star-rating-in-react-2e6f",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--JGBNlJ51--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k513wszn51wbpzmohxe2.jpg",
    "body": "For my capstone project at Flatiron School, I created an application in which users can track and manage the eateries (ex: restaurants, cafes/bakeries/coffee shops, & bars/breweries) they have visited and the food and drink they ordered so visits can be referenced at a later time. \nOne of the features I wanted to include was a rating functionality. Instead of displaying just numerical ratings, I wanted to display those ratings via star icons. In addition to displaying those numerical ratings into stars, I wanted users to be able to click on the stars to create or edit their rating for an eatery.\nI used a React frontend to accomplish this task. I will first describe how to display ratings via stars, and then describe how to dynamically change the star ratings when creating or editing a rating. \n\n\n\n  How to Convert Numerical Rating into Star Rating\n\nInside the component that holds and displays the eatery rating, I first declared a constant that holds the colors of the stars when they are empty and filled (this can alternatively be done via inline styling).\n\n\nconst colors = {\n        orange: \"#F2C265\",\n        grey: \"a9a9a9\"\n    }\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nOne of my attributes of an Eatery is the \"rating\" declared as an integer on the backend. This numerical, integer rating was then translated into stars in React. To create the stars, I first installed the React Icons Kit library and selected the FaStar icon, and imported it into my component. I then created an array of 5 stars, called \"stars\", where the .fill was 0.\n\n\nconst stars = Array(5).fill(0)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow, in my return, this is where the star rating is displayed on the page. I mapped over the star array and returned the star icon where the color of the star is filled based on the rating of the specific eatery. For example, if a user gave the eatery 4 stars, 4/5 stars would be filled in with the color = orange, and 1/5 stars would remain the color = grey. (I also chose to display the numerical star rating next to the star icons.)\n\n\nreturn (\n  <div>\n     {stars.map((_, index) => {\n        return (\n             <FaStar\n                 key={index}\n                 size={24}\n                 color={(rating) > index ? colors.orange : colors.grey}\n              />\n      <p>({rating} Stars)</p>\n         )\n      })}\n   </div>\n);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n\n  How to Dynamically Create and Edit Star Icon Rating\n\nDisplay a static rating via star icons is more simplistic than creating dynamically changing star icons. Dynamically creating or editing star icon ratings requires useState and event listeners. The same React icon was imported and the same color constant and star array described above were also created. \nFirst, inside the component where I want to create (or edit) a star icon rating, I created two states. One for the rating attribute, with the initial state set as the current rating (if the user was editing the rating). The other state was created for selecting the stars when rating called \"hoverValue\". Initial state for the rating attribute was set as the current rating (if the user was editing the rating). Initial state was declared as undefined because we don't want to give the hoverValue a pre-determined state - we want it to be 0 before we start rating.\n\n\nconst [rating, setRating] = useState(eatery.rating)\nconst [hoverValue, setHoverValue] = useState(undefined)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWhen rating, I wanted to hover over the stars and have them be filled with the orange color before settling on the final rating. To do this, I added a some event listeners to handle this functionality:\n\n\nconst handleMouseOverStar = value => {\n    setHoverValue(value)\n};\n\nconst handleMouseLeaveStar = () => {\n    setHoverValue(undefined)\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe handleMouseOver takes in a value when the user hovers over the star icons and sets that value in the setHoverValue setter function. The handleMouseLeaveStar removes the stars when an user moves away from the stars (i.e. wants to reduce the amount of stars they have chosen).\n\n\nconst handleClickStar = value => {\n    setRating(value)\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe handleClickStar takes the value of the rating a user choses via a mouse click and sets that value to the setRating setter function. This means, the number of stars a user selects will be the rating of the eatery. \nNow, we need to actually display this functionality on the page. In the return, we are going to map over the stars array (like before) and now include the event listeners.\n\n\nreturn (\n  <div>\n     {stars.map((_, index) => {\n          return (\n               <FaStar\n                   key={index}\n                   size={24}\n                   value={rating}\n                   onChange={(e) => setRating(e.target.value)}\n                   color={(hoverValue || rating) > index ? colors.orange : colors.grey}\n                   onClick={() => handleClickStar(index + 1)}\n                   onMouseOver={() => handleMouseOverStar(index + 1)}\n                   onMouseLeave={() => handleMouseLeaveStar}\n                />\n           )\n       })}\n  </div>\n);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe onChange event listener manages the setting of the rating, the onClick event listener manages the incrementation of the star icon rating, and the onMouseOver and onMouseLeave manage the hover effects of the star rating.   \nIt is difficult to show the functionality of this hover star rating via images, but if you are curious how this works, you can play around with it on my website: \n\n\n      leftovers-2mnc.onrender.com\n    \n\nI think this functionality is a fun feature to add to any website that includes rating, and I hope this tutorial was helpful!"
  },
  {
    "id": 15,
    "title": "Hide/Show Password in React",
    "author": "Anna Q. Harder",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--AsVWSKj_--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/970989/93282f96-d1a0-45de-8b2b-38351f17436a.jpeg",
    "time": "2023-02-16T23:02:23Z",
    "likes": "1",
    "link": "https://dev.to/annaqharder/hideshow-password-in-react-513a",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--MKm0J4Mk--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moq5p3gk1s1qidczdq9c.jpg",
    "body": "When logging in or creating an account for a website or application, it is useful for a user to be able to see their password, especially when passwords are long and include different symbols. I implemented this show/hide password functionality in my React frontend capstone project at Flatiron School. There are many variations of this functionality such as a toggle button or icon change. I chose to use an eye and strikethrough eye icon for my website. \nFirst, I installed the React Icons Kit library and imported the library and the two icons into my React component:\n\n\nimport {Icon} from 'react-icons-kit';\nimport {eyeOff} from 'react-icons-kit/feather/eyeOff';\nimport {eye} from 'react-icons-kit/feather/eye'\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNext, I created three states. The first state was to manage and eventually set the password of a user, with an initial state of an empty string. The second state was for the type, which had an initial state of 'password'. This will be used in the controlled form to render the password on the page. The last state was for the icon, which had an initial state set as \"eyeOff\" icon because we want a user's password to be initially hidden:\n\n\nconst [password, setPassword] = useState(\"\");\nconst [type, setType] = useState('password');\nconst [icon, setIcon] = useState(eyeOff);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nI then created a function that would handle the toggle between the hide password (eyeOff icon) and the show password (eye icon):\n\n\nconst handleToggle = () => {\n   if (type==='password'){\n      setIcon(eye);\n      setType('text')\n   } else {\n      setIcon(eyeOff)\n      setType('password')\n   }\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThis handleToggle function is saying: when the type is equal to 'password', have the icon set as eye open icon and show the password in text form, and when the type is anything else, have the icon set as the eyeOff icon and hid the password. \nNow that the logic is made, we want to render the password and the toggle hid/show functionality on the page. Inside the return:\n\n\nreturn (\n     <div>\n        <div>\n           <div class=\"mb-4 flex\">\n              <input\n                  type={type}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  autoComplete=\"current-password\"\n             />\n             <span class=\"flex justify-around items-center\" onClick={handleToggle}>\n                  <Icon class=\"absolute mr-10\" icon={icon} size={25}/>\n              </span>\n            </div>\n         </div>\n      </div>\n); \n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nI used Tailwind CSS framework to style the position of the icon so that the icon is within the password input. \nThis is how the form looks with the eyeOff icon with password hidden: \n\nAnd this is how the form looks with the eye icon with the password shown: \n\nAnd that's it! I originally though this functionality would be very difficult but I was pleasantly surprised how easy this feature was to implement. I hope this was a helpful tutorial!"
  },
  {
    "id": 17,
    "title": "Discovery Days at Medusa: How I created Cross Post tool from Notion",
    "author": "Shahed Nasser",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--XiLBTmTn--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4507/b9b6d7ee-e81a-423a-a4ac-285bea78c18f.png",
    "time": "2023-02-16T13:44:01Z",
    "likes": "7",
    "link": "https://dev.to/medusajs/discovery-days-at-medusa-how-i-created-cross-post-tool-from-notion-491j",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--38hdgctr--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqdrqzmd8cmdafs74lkb.jpg",
    "body": "I\u2019m a technical writer at Medusa. Part of my work includes managing the content on our blog and across platforms. Typically, we publish an article on our blog (which is built with Stackbit), then cross-post that article across platforms such as Dev.to, Hashnode, and Medium.\nThis process has become tedious and time-consuming. We publish at least 2 articles per week, and each article can take more than 30 minutes to be published across our blog and the 3 mentioned platforms. This includes adding the content in the format that each platform supports, uploading images if there are any, setting meta attributes such as description and meta tags, and more.\nSo, I decided to build a cross posting tool that would automate this task. cross-post-notion now allows us to publish an article from Notion to a GitHub repository (which holds the content of our main blog), Dev.to, Hashnode, and Medium in less than a minute. I decided to build this tool as part of our Discovery Days at Medusa.\n\n\n\n  What are Discovery Days?\n\nEvery Friday, the Medusa team members can dedicate half or their full day towards doing something different from their typical daily work. You can use this day to learn something new, read a book specific to your field, try out an interesting tool, or build a new tool.\nAs I realized this tool would heavily reduce the time I spend on publishing content to our blog, I dedicated the past 4 Discovery Days (Fridays) to building this tool.\n\n\n\n  How it Works\n\nYou can use cross-post-notion either as an NPX command, as a global CLI tool, or just by cloning the GitHub repository.\nThen, after adding the configurations necessary (more on this later), you can publish to all the different platforms using one command. You can also choose specific platforms to publish to.\n\n\n\n  Publishing to GitHub\n\nPublishing to GitHub can be useful for any blogging platform that uses Markdown files hosted in a GitHub repository. This includes Stackbit, GitHub Pages, 11ty, Hugo, Docusaurus, etc\u2026\nArticles are pushed to GitHub as Markdown files with front matter metadata. The front matter includes by default the title and date of the article. The values of these fields are extracted from your Notion document, and you can specify the properties to extract these fields from.\nIn addition, you can specify custom front matter fields to add and from which properties to extract them from Notion. You can also specify front matter fields with fixed values. This is helpful if you have front matter fields that you need to always add to your articles.\nIf an article has images, the images are pushed to the GitHub repository as well. You can specify the path to upload the images to and the prefix to use within the article.\n\n\n\n  Publishing to Dev.to\n\nYou can publish articles to dev.to with this tool, either on your personal account, or in an organization. Similar to posting to GitHub, the values of dev.to fields such as the title, tags, or series can all be extracted from Notion properties.\nOne limitation to publishing to dev.to is that you can\u2019t upload the images in the article using their APIs. So, you\u2019ll still have to manually go in and upload any images in your article.\n\n\n\n  Publishing to Hashnode\n\nYou can publish articles to Hashnode with this tool, either on your personal blog or in a specific publication. Similar to the other platforms, the values of Hashnode fields are extracted from Notion properties.\nOne limitation to publishing to Hashnode is that it\u2019s not possible to publish an article as a draft with their APIs. It\u2019s only possible to choose to hide it from Hashnode\u2019s feed. So, the article will automatically be available to your followers.\n\n\n\n  Publishing to Medium\n\nYou can publish articles to Medium with this tool, either on your personal account or in a specific publication. Similar to the other platforms, the values of Medium fields are extracted from Notion properties.\n\n\n\n  Using this Tool\n\n\n\n\n  Requirements\n\nThis tool requires an Internal Notion Integration created and installed in your Notion workspace. The integration must have access to the pages you want to publish as well. You can learn more about this in Notion\u2019s documentation.\n\n\n\n  Install the Tool\n\nThere are three ways you can use this tool:\n1. With NPX, which does not directly install the tool on your machine:\n\n\nnpx cross-post-notion\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n2. Install as a global CLI tool with NPM or Yarn:\n\n\n# using NPM\nnpm install -g cross-post-notion\n\n# using Yarn\nyarn add cross-post-notion global\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n3. Clone the GitHub repository:\n\n\ngit clone https://github.com/shahednasser/cross-post-notion.git\ncd cross-post-notion\nnpm install\nnpm start\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Set Environment Variables\n\nYou need to set the following environment variables before you can use the tool. The requirements of the environment variables depends on which platforms you want to publish to:\n\nNotion:\n\n\n\nNOTION_TOKEN: (required for all platforms) Token on a Notion internal integration\n\n\nGitHub:\n\n\n\nGH_TOKEN: (required) GitHub personal token\n\nGH_OWNER: (required) GitHub username\n\nGH_REPO: (required) GitHub Repository name\n\nGH_BRANCH: Branch name. Default is\u00a0master.\n\n\nDev.to:\n\n\n\nDEVTO_API_KEY: (required) Your personal dev.to API key. Learn how to retrieve it\u00a0here.\n\nDEVTO_ORG_ID: The ID of the organization to publish the article under. You can retrieve it either from the organization dashboard page, where the ID is the last part of the URL (https://dev.to/dashboard/organization/ORG_ID). Alternatively, you can use Dev.to's\u00a0List Organizations\u00a0endpoint to find the ID.\n\n\nHashnode:\n\n\n\nHASHNODE_TOKEN: (required) Hashnode personal token\n\nHASHNODE_PUB_ID: The ID of the publication to publish the article under. You can retrieve it either from the publication's dashboard page, where the ID is the second part of the URL (https://hashnode.com/PUB_ID/dashboard).\n\n\nMedium:\n\n\n\nMEDIUM_TOKEN: (required) Medium Integration Token. Can be retrieved from\u00a0here.\n\nMEDIUM_PUB_NAME: The name of the Medium publication. Must be the exact name as it is on Medium.\n\n\n\n\n\n\n  Add Configurations\n\nConfigurations are used to customize how the article is published on the different platforms. They can be used to define what properties to extract data from in Notion, whether the article should be published or added as a draft, and more. You only need to set these configurations the first time you use the tool.\nBy default, configurations are loaded from the file config/default.json relative to the current directory you\u2019re running the command from. Alternatively, you can pass the path to the config file as an option.\nThe file can have the following configurations:\n\n\n{\n  \"config\": {\n    \"notion\": {\n      \"options\": {\n        \"skip_block_types\": [\n            \"toggle\"\n        ]\n      }\n    },\n    \"github\": {\n      \"options\": {\n        \"image_path\": \"public\",\n        \"image_prefix\": \"/\",\n        \"article_path\": \"content\",\n        \"properties\": {\n          \"title\": \"Title for Blog\",\n          \"date\": \"Publishing Date\",\n          \"slug\": \"Slug\"\n        },\n        \"add_default_frontmatter\": true,\n        \"frontmatter_labels\": {\n          \"title\": \"title\",\n          \"date\": \"date\"\n        },\n        \"extra_frontmatter\": {\n          \"excerpt\": \"this is description\"\n        },\n        \"extra_frontmatter_mapper\": {\n          \"excerpt\": \"Description\"\n        }\n      }\n    },\n    \"devto\": {\n      \"options\": {\n        \"should_publish\": false,\n        \"properties\": {\n          \"title\": \"Title for Dev.to\"\n        }\n      }\n    },\n    \"hashnode\": {\n      \"options\": {\n        \"should_publish\": true,\n        \"should_notify_followers\": false,\n        \"properties\": {\n          \"title\": \"Title for Hashnode\"\n        }\n      }\n    },\n    \"medium\": {\n      \"options\": {\n        \"should_publish\": false,\n        \"should_notify_followers\": false,\n        \"properties\": {\n          \"title\": \"Title for Medium\"\n        }\n      }\n    }\n  }\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nYou can learn what each of these fields are and what more fields can be accepted in the GitHub repository.\n\n\n\n  Run Post Command\n\nGrab the URL of a Notion document that includes an article you want to publish. It should be an internal URL which you can obtain from the Notion document by:\n\nClick on Share at the top right.\nClick on \u201cCopy link\u201d at the bottom of the pop-up.\n\nThen, run the following command:\n\n\n# using NPX\nnpx cross-post-notion post <url>\n\n# using CLI tool\ncross-post-notion post <url>\n\n# using cloned repository\nnpm start post <url>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWhere <url> is the URL to the Notion document.\nIf all environment variables are set correctly, you should see logged in your terminal that the article was published on each of the platforms.\nYou can also specify which platforms you want to publish the article on using the -p option:\n\n\nnpx cross-post-notion post <url> -p devto hashnode\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThis would publish the article only on Dev.to and Hashnode.\n\n\n\n  Learn More about this Tool\n\nYou can learn more about this tool and its limitations by checking out the GitHub repository. If you use it, let me know if it helps out! Although I\u2019m mainly focused on using it for publishing articles at Medusa, feel free to open issues and contribute to further improve the tool.\n\nBe sure to check out Medusa, a composable ecommerce platform, on GitHub."
  },
  {
    "id": 18,
    "title": "How to integrate your blog with dev.to API Next.js 13",
    "author": "Nicholas",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--szOMLX3b--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/807133/a2a5fdd3-1130-43c2-82d9-6c38280bf93a.jpeg",
    "time": "2023-02-16T22:12:47Z",
    "likes": "1",
    "link": "https://dev.to/nicholascostadev/how-to-integrate-your-blog-with-devto-api-nextjs-13-48j6",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--1ldnebIv--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pekxhpujwzelda1srs7.jpg",
    "body": "If you're reading this at dev.to, you can also take a look at my own website at nicholascosta.dev/blog\n\n\n\n  Little recap of the situation I was on\n\nI've been refactoring my portfolio website from the start these days and took a chance to make my blog better(both in styling and how it worked). If you want to take a look, it's public at github, but keep in mind it's still in progress.\nI used to save my blog posts in a folder containing the markdown files(that may be what you're used to), but I wanted to post both on dev.to and my blog, then, a friend of mine gave me an idea\n\n\"Why don't you use dev.to's API to get all the posts?\"\n\nAt this point I didn't even know dev.to had an open API, so after that, I couldn't agree more, then I started the journey.\n\n\n\n  Technologies I chose to build my blog\n\nI'm using Next.js(version 13 with the experimental app dir), and for rendering markdown on React I'm going to use react-markdown.\n\n\n\n  Integrating an existing Markdown-rendered app\n\nIf you already have built your blog and it's already capable of rendering markdown as HTML, 90% of your work is done, all that's left is integrating with the API.\nThe dev.to API is hosted at https://dev.to/api/ and you can get your posts by reaching out to https://dev.to/api/articles/latest?username={your_username}. This request will return at max 30 posts and will be ordered by descending published dates, you can take a look at their own documentation\n\n\n\n  Rendering your Posts\n\nWith the data you get from the API, you can render your posts the way you want, using cards, lists, literally anything, that's up to you.\nBut let's go to the interesting part, rendering the actual single post.\n\n\n\n  Post\n\nYou can search for the specific post by its slug using your username at this endpoint: https://dev.to/api/articles/${your_username}/{article_slug}.\nFor rendering the actual post, we first need to make the request, to keep it simple, I'll be using the native fetch API from the browser.\n\n\n// utils.ts\n\ntype Post = {\n  title: string\n  description: string\n  published_at: string\n  slug: string\n  id: number\n  user: {\n    name: string\n    profile_image: string\n  }\n}\n\ninterface SinglePostResponse extends Post {\n  body_markdown: string\n  status?: number\n}\n\n// Get post by slug\nexport const fetchPost = async (postSlug: string) => {\n  const response = await fetch(\n    `${process.env.DEVTO_URL}/nicholascostadev/${postSlug}`,\n  )\n  const post = await response.json()\n  return post as SinglePostResponse\n}\n\n// Get all posts\nexport const fetchPosts = async () => {\n  const response = await fetch(\n    `${process.env.DEVTO_URL}/latest?username=nicholascostadev`,\n  )\n  const posts = await response.json()\n  return posts as Post[]\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow an actual example with Next.js 13. I'm using the async component feature(a feature that's still under development at the React Team), if you're not familiar with it, it's basically used as replacement for getStaticProps and getServerSideProps and you can take a look at Next.js docs for it.\n\n\n\n  Now let's get into coding\n\nOBS 1:The process.env.DEVTO_URL maps to \"https://dev.to/api/articles\".\nOn this function, we Have the page component, which I named BlogPost, in Next.js 13 we can access the page params via props, but unfortunately it can't infer it yet, so we have to type it manually.\n\n\ntype BlogPostProps = {\n  params: {\n    id: string\n  }\n}\n\nexport default async function BlogPost({ params }: BlogPostProps) {\n ...\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow we need to make the request, on this example I'm searching for both the single post and for all other posts available, so I can show some recommendations at the end of the post page.\n\n\nconst [post, allPosts] = await Promise.all([\n  fetchPost(params.id),\n  fetchPosts(),\n])\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nI'm using Promise.all for making both requests at the same time.\nAlso, if you send a non-existing ID to the API, it will return something like this:\n\n\n{\n  \"error\": \"not found\",\n  \"status\": 404\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nBecause of that, before rendering the post, I'm also checking if there is a status on the post response and if it's 404(not found), I throw an error and redirect user to page not-found.tsx.\n\n\nif (post.status && post.status === 404) {\n  throw new Error('post not found')\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nBecause I'm using Next.js 13 with the new app directory, I can create a not-found.tsx file and render the page when calling the function notFound() imported from next/navigation.\n\n\ntry {\n  ...\n  if (post.status && post.status === 404) {\n    throw new Error('post not found')\n  }\n} catch (err) {\n  notFound()\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow for the final part, the actual post.\nAll you have to do is use the react-markdown I specified earlier, with that, you can use its component simply as so\n\n\n<ReactMarkdown>\n {post.body_markdown}\n</ReactMarkdown>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThat's all to render the post as HTML, there are lots of things you can do to customize the results, you can check the remark plugins and rehype plugins to pass as props to <ReactMarkdown /> and you can also take a look at some other bloggers if you're looking for different styles for example Lee Robinson's or if you liked mine.\n\n\n\n  Full Code\n\n\nimport { notFound } from 'next/navigation'\n\ntype BlogPostProps = {\n  params: {\n    id: string\n  }\n}\n\nexport default async function BlogPost({ params }: BlogPostProps) {\n  try {\n    const [post, allPosts] = await Promise.all([\n      fetchPost(params.id),\n      fetchPosts(),\n    ])\n\n    if (post.status && post.status === 404) {\n      throw new Error('post not found')\n    }\n\n    return (\n      <ReactMarkdown>\n        {post.body_markdown}\n      </ReactMarkdown>\n    )\n  } catch (err) {\n    notFound()\n  }\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nHope you liked the post, it's been a while since I last been here and I don't think I'll be that active, who knows?\nThanks for reading, I hope it helped you in some way \u2764\ufe0f"
  },
  {
    "id": 19,
    "title": "Manipulando Set no Redis",
    "author": "Paulo Walraven",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--GahGRY_B--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/662484/c75e5f89-637f-4b42-8789-58fb01a4f101.png",
    "time": "2023-02-16T15:48:40Z",
    "likes": "1",
    "link": "https://dev.to/paulowalravendev/manipulando-set-no-redis-57fp",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--5B01w0-4--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ov3kb4adtwtd8qhcb54j.jpg",
    "body": "Introdu\u00e7\u00e3o\n\nNo Redis a estrutura de dados Set \u00e9 uma cole\u00e7\u00e3o n\u00e3o ordenada de strings \u00fanicas. Ela pode ser utilizada para, por exemplo:\n\nRastreie itens exclusivos (por exemplo, rastreie todos os endere\u00e7os IP exclusivos que acessam uma determinada postagem de blog).\nRepresentar rela\u00e7\u00f5es (por exemplo, o conjunto de todos os usu\u00e1rios com um determinado papel).\nRealize opera\u00e7\u00f5es de conjuntos comuns, como interse\u00e7\u00e3o, uni\u00f5es e diferen\u00e7as.\n\n\n\n\n  Comandos b\u00e1sicos:\n\n\n\nSADD: adiciona um novo membro a um conjunto.\n\nSREM: remove o membro especificado do conjunto.\n\nSISMEMBER : testa uma cadeia de membros do conjunto.\n\nSINTER : retorna o conjunto de barras que dois ou mais conjuntos t\u00eam em comum (ou seja, a interse\u00e7\u00e3o).\n\nSCARD : retorna o tamanho (tamb\u00e9m conhecido como cardinalidade) de um conjunto.\n\nSMEMBERS: retorna todos os membros do valor definido armazenado na chave.\n\nSSCAN: retorno \u00e9 um array de dois valores: o primeiro valor \u00e9 o novo cursor a ser usado na pr\u00f3xima chamada, o segundo valor \u00e9 um array de elementos.\n\n\n\n\n  Desempenho\n\nA maioria das opera\u00e7\u00f5es de conjunto, incluindo adicionar(SADD), remover(SREM) e verificar se um item \u00e9 um membro do conjunto(SISMEMBER), s\u00e3o O(1). Isso significa que eles s\u00e3o altamente eficientes. \nNo entanto, para grandes conjuntos com centenas de milhares de membros ou mais, voc\u00ea deve ter cuidado ao executar o comando SMEMBERS. Este comando \u00e9 O(n) e retorna o conjunto inteiro em uma \u00fanica resposta. Como alternativa, considere o SSCAN, que permite recuperar todos os membros de um conjunto iterativamente."
  },
  {
    "id": 24,
    "title": "8 AI Tools Like Chat GPT",
    "author": "Arafat",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--r9_xn5ov--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/994177/0875a917-2e25-42ea-8d33-5855555fefb9.png",
    "time": "2023-02-16T20:47:43Z",
    "likes": "3",
    "link": "https://dev.to/arafat4693/8-ai-tools-like-chat-gpt-5e5k",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--dhvlwQtW--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f9mwfl1394yb4mppilo.png",
    "body": "As we already know, chat GPT's server crashes often. It can be frustrating when you are trying to cheat on the exam, deliver an essay on time, or find the solution in your tech interview. Therefore, I've picked 8 AI platforms you can use instead of chat GPT which might help you in your emergency time\ud83e\udd23.\n\n\n\n\n  1. Cedille.ai\n\n\nCedille.ai helps you in generating, summarizing, and rewriting your texts.\n\n\n\n  2. Write Sonic\n\n\nWrite Sonic assists you in generating text and images about trending topics in no time. It creates SEO-optimized and plagiarism-free content for blogs, ads, emails, and websites 10X faster. So students who get caught plagiarizing in school can have an easy life now.\n\n\n\n  3. Jasper\n\n\nLet Jasper write your copy for your blog, social media, website, and more for free. It can create plagiarism-free content that ranks for SEO, boost ad conversation with better copy, finish your first draft for your blog 10x faster, and scale up your content marketing quickly.\n\n\n\n  4. Headlime\n\n\nHeadlime's artificial intelligence can convert your thoughts into words. As a result, it can generate compelling marketing copy faster, saving you tons of time so you can focus on what matters: your business!\n\n\n\n  5. Deepl\n\n\nTech giants Google, Microsoft, and Facebook are all applying machine learning to translations, but a small company called DeepL has surpassed them all and raised the bar in the field.\nIts translation tool is as fast as the more prominent competitors' tools but more accurate and nuanced than any other tool we've tested.\n\n\n\n  6. Text Generator\n\n\nText Generator Generates high-quality text, lines of code, text to speech, with state-of-the-art AI, accurate, fast, and flexible.\n\n\n\n  7. Perplexity\n\n\nPerplexity AI is an answer engine that delivers accurate answers to complex questions using large language models like chat GPT.\n\n\n\n  8. YouChat\n\n\nYouChat is an AI search engine that can answer general questions, suggest Ideas, translate, summarize text, compose emails, etc...\n\n\n\n\n  Conclusion\n\nI hope that you guys liked these eight super helpful AI platforms. Of course, there are many AIs that I should have mentioned here. If you think I forgot any important AI here, please let me know in the comment section.\nThanks for reading the article. See you all in my next article\ud83d\ude0a."
  },
  {
    "id": 31,
    "title": "Migrating to Eleventy 2.0",
    "author": "Silvestar Bistrovi\u0107",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--Dl-k31rl--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/30254/ebd4adb3-eaeb-48a5-963b-ac1e528af02c.jpg",
    "time": "2023-02-16T15:16:00Z",
    "likes": "2",
    "link": "https://dev.to/starbist/migrating-to-eleventy-20-4jgn",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--3H7xW_2n--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14o7xdk40bg83k1jmkuq.jpg",
    "body": "Last week I finally upgraded my Eleventy instance after using version 0.12.1 for over a year. I tried to do this earlier but always gave up because I stumbled upon this or that issue. This time was no different, but I was determined to resolve all problems.\n\n\n\n  Issues\n\nThe primary issue when updating to the new Eleventy was my templating language - Liquid. I chose Liquid because I am familiar with it since I work with Jekyll and Shopify every now and then.\nThe first issue that occurred was:\n\n\nillegal filename \"undefined\" (via AssertionError)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAfter a quick investigation, I decided to switch to my own instance of Liquid library, as documented on the Eleventy site.\nI added the following code:\n\n\nconst { Liquid } = require(\"liquidjs\");\n\nmodule.exports = (eleventyConfig) => {\n  let options = {\n    extname: \".liquid\",\n    dynamicPartials: false,\n    strictFilters: false,\n    jsTruthy: true,\n    root: [\"site/_layouts\"]\n  };\n\n  eleventyConfig.setLibrary(\"liquid\", new Liquid(options));\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe most important part here is the dynamicPartials: false setting which resolves common pitfalls if you include partials without quotation marks.\nNext issue was:\n\n\nunexpected token at \"{{ read.date ...\" (via AssertionError)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nI was using a variable inside the assign statement in Liquid, like so:\n\n\n{% assign readHref = {{ read.date }} | prepend: '#' %}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAll I had to do is to remove the curly brackets around the variable:\n\n\n{% assign readHref = read.date | prepend: '#' %}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe final issue I had was:\n\n\nFailed to lookup \"../../assets/dist/css/devcards.min.css\" in \"site/_layouts\" (via Error)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nApparently, Liquid can only look up files within the root folder defined in the configuration. The workaround was to define a new custom Liquid filter that returns the content of the file like so:\n\n\neleventyConfig.addLiquidFilter('getCritical', (critical) => {\n  return fs.readFileSync(`./assets/dist/css/${critical}.critical.min.css`)\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAnd that's it. After resolving these issues, I could finally use the new version of the Eleventy static site generator.\nFor anyone interested, here's the full commit: https://github.com/maliMirkec/personal-website/commit/f18c059ead7abf166f99715261638ccf9944cf5f."
  },
  {
    "id": 32,
    "title": "How to Add Speech AI Into Your Next.js App",
    "author": "BekahHW",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--PScdE06w--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4019/b921b72d-3c60-425e-a223-189a5fce8839.jpg",
    "time": "2023-02-16T18:15:00Z",
    "likes": "2",
    "link": "https://dev.to/deepgram/how-to-add-speech-ai-into-your-nextjs-app-491b",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--mE8gohpa--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://a-us.storyblok.com/f/1001320/2400x1260/04d88dd39d/2302-deepgram-nextjs-app-blog-2x.png/m/800x0",
    "body": "I am a podcast addict. I admit it. From the moment I wake up, I have my headphones in my ears. But there are some times when it would be frowned upon to be listening to a podcast while in a room full of others. In some of those cases, it would not be frowned upon to look at my phone. So as a compromise, I could grab the transcript of my favorite podcast and read it while in those situations. I know I\u2019m not the only one who\u2019s done that. From the desire to get away with podcast listening, I put together a basic Next.js and Deepgram web app that allows the user to submit a link to audio, which is then transcribed using Deepgram, and output in the browser. If you too want to get away with reading your podcast, check out the tutorial below. \n\n\n\n  Getting Started with Repl.it, Next, and Deepgram\n\nPrerequisites\n\nUnderstanding of JavaScript and React\nFamiliarity of hooks\n\nUnderstanding of HTML and CSS\nFor this project, I worked with Repl.it, an instant IDE that runs in the browser. You can find the final project on my Next + DG Repl and this tutorial will explain how to utilize Repl to create your project.\n\nTo complete this project, you\u2019ll need:\n\nA Repl.it account\n\nA Deepgram API Key - get it here\n\n\n\n\n\n  Getting Started with Next.js\n\nCreate a new Repl using the Next.js template.  This will give you the basic Next file structure and provide access to the Next.js built-in features. If you\u2019d like to learn more about Next.js, check out the Foundations section of their site. \nFor this project, we\u2019ll be working in the pages folder in the index.tsx file and within the api folder. \nWe\u2019re going to keep it simple and add our new code to the existing template. You\u2019ll notice that I\u2019ve made some updates in my Repl to link to Deepgram\u2019s documentation, blog, and community, but our code to transcribe the audio will go above that. \nLet\u2019s get started. In the index.tsx file, we\u2019ll need to create an input for the audio file link, add some useState hooks to handle the submission, transcription, and formatting, and we\u2019ll need a transcribe function. In the api folder, we\u2019ll need to add the server side code to handle the request to Deepgram. Lastly, we need to utalize Repl\u2019s Secrets feature to handle our Deepgram API key.\nThe code you posted is a React.js application that uses the Deepgram API to transcribe audio files. The user inputs a link to the audio file in a form, and then the app sends a request to the API to transcribe the file. The transcript is then displayed on the page with a useEffect hook that splits the transcript into individual lines and maps over them, rendering them in separate paragraphs.\nLet\u2019s get started with the front-end code in the index.tsx file. At the top of the file, import the required dependencies that aren\u2019t included: React's useState and useEffect  hooks.\nBefore the resources, add a form input for the audio file.\n\n\n<form >\n          <label htmlFor=\"audio-file\">Link to Audio </label>\n          <input onChange={e => setFile(e.target.value)} type=\"text\" id=\"audio-file\" name=\"audio-file\" required />\n          <button type='button' onClick={transcribe} className={styles.button}>Transcribe</button>\n        </form>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nTo get this to work, we need to add a hook for setFile. On line 8, add const [file, setFile] = useState(' ');\nThis will allow our application to keep track of the url to the audio file. Now we need to use that audio file and transcribe it. Grab your API key, and add that into your Repl Secrets. \nWe\u2019re going to do some going back and forth between files here. Let\u2019s start by creating a new file in our api folder called transcribe.tsx. This will be the path to deal with our server side logic and to utilize our API key. According to the Next.js documentation on API routes, \u201cAny file inside the folder pages/api is mapped to /api/* and will be treated as an API endpoint instead of a page. They are server-side only bundles and won't increase your client-side bundle size.\u201d\nWe\u2019re going to create an async function to handle the incoming request and the response sent back to the client.\nWe\u2019ll start by adding the DeepGram API key from the environment variables.\nNext, we\u2019ll use destructuring to extract the url from the parsed body of the incoming request--which we find in req.body. Now we\u2019ll make a fetch request to make a POST request to the Deepgram API endpoint. We await the response from the API, convert to JSON format, and send it back to the client as the response.\n\n\nexport default async function handler(req, res) {\n  // Get data submitted in request's body.\nconst mySecret = process.env['DG_API_KEY']\nconst {url} = JSON.parse(req.body)\n\n const response = await fetch('https://api.deepgram.com/v1/listen?tier=enhanced&punctuate=true&paragraphs=true&diarize=true&keywords=Bekah:2&keywords=Hacktoberfest:2', {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Token ' + mySecret,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\nurl        })\n      });\nconst json = await response.json() \n  res.status(200).json(JSON.stringify(json))\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNotice in the API call, we include &punctuate=true&paragraphs=true&diarize=true. Because we want to use an example where there is more than one person on the podcast, and we want to make it readable, we add these properties. Diarization allows the transcript to be broken down into different speakers. Now that the server-side code is set up, let\u2019s connect it to our index.tsx file.\nBelow the setFile hook, let\u2019s create a transcribe function. We need to connect to our api route, which is api/transcribe, send the file , get the response back with our transcription, and store that transcript in a new hook that we\u2019ll call setTranscription, so we can render it on the page. Here\u2019s what the will look like:\n\n\n const transcribe = async () => {\n    try {\n      const response = await fetch('/api/transcribe', {\n        method: 'POST',\n        body: JSON.stringify({\n          \"url\": file,\n        })\n      });\n      const received = await response.json();\n            const data= JSON.parse(received)\n      const transcription = data.results.channels[0].alternatives[0].paragraphs.transcript;\n      setTranscription(transcription)\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow we need to handle how the text is displayed on the page. To decrease confusion, we should display a new line everytime the speaker changes. To do that, we\u2019re going to create a new useState hook called lines and implement some logic to break the speakers into different lines. We\u2019ll conditionally render a div if there\u2019s a transcript. Here\u2019s the code to handle this:\n\n\n  const [lines, setLines] = useState([]);\n\n useEffect(() => {\n    setLines(transcription.split(\".\"));\n  }, [transcription]);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nHere\u2019s the html:\n\n\n{transcription &&  <div className={styles.transcript} id=\"new-transcription\">\n      {lines.map((line, index) => {\n        if (line.startsWith(\"Speaker 0:\")) {\n          return <p key={index}>{line}</p>\n        } else {\n          return <p key={index}>{line}</p>\n        }\n      })}\n    </div>}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIf you want to try it out, you can use this sample audio. At this point, our Next.js + Deepgram project should allow you to turn audio files into transcripts. Happy listening!"
  },
  {
    "id": 33,
    "title": "Default Mouse cursor styles",
    "author": "Amiru Weerathunga",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--9JTszojX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/931752/dc7f72ef-9adc-45ff-9f47-2d43c0d0b95c.jpeg",
    "time": "2023-02-16T18:12:53Z",
    "likes": "2",
    "link": "https://dev.to/amiru_weerathunga/default-mouse-cursor-styles-5eh7",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--cZACV8gx--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmldscodlbw8is4hptsf.png",
    "body": "Cursor styles\nMost modern browsers support the following cursor styles (hover your mouse over the divs to see the cursor change to that style).The actual appearance of the mouse cursor depends on the browser and OS configuration.\nFor example, Microsoft, Internet Explorer 8.0 under Windows XP, with Windows Classic theme set in Display Properties, mouse cursors look like below\n\n\n\nTo set or change the mouse cursor style for an element of your page from script, you can set the element's property element.style.cursor to one of the above values. (Alternatively, without JavaScript, you can use the attribute style=\"cursor: value;\" in that element's HTML tag.)"
  },
  {
    "id": 34,
    "title": "Create a CLI tool to help bootstraping Flutter project using Node.JS - Part 2",
    "author": "AILI Fida Aliotti Christino",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--FFnFJ8eC--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/176132/72992302-4708-466d-b702-6c17f3d272b1.jpeg",
    "time": "2023-02-16T12:12:36Z",
    "likes": "3",
    "link": "https://dev.to/lynxgsm/create-a-cli-tool-to-help-bootstraping-flutter-project-using-nodejs-part-2-19dk",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--32NK9WQY--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98w4ujxeum4hc5hiqd6j.png",
    "body": "What we've done so far\n\nIn the first part of the article, we've:\n\ncreated a cli node project\ninteract with user about the application informations\ncreate a project using these informations\ncreate folder structure along with it\n\nNow that we've got our folder structure, in this article, we will add the files according what we want to add by default and implement the module creation part.\nHere are the utility files that we want to add:\n\n\napp.dart: entry point of our app \n\ntransitions.dart: helps us to add a custom animation for page transitions\n\nnavigation.dart: contains a function to change page using our custom animation\n\nspacing.dart: contains some functions to help us deal with spacing\n\nWe will also change the main.dart to match the adding of the app.dart \n\n\n\n  Template contents\n\nLet's create a folder where we will hold our template files. Of course, i named mine templates (how original! \ud83d\ude31) and create our files.\nLet's start by creating the spacing.dart and paste this:\n\n\nimport 'package:flutter/material.dart';\n\nSizedBox space({double? width, double? height}) {\n  return SizedBox(\n    width: width ?? 0,\n    height: height ?? 0,\n  );\n}\n\ndouble width(BuildContext context) {\n  return MediaQuery.of(context).size.width;\n}\n\ndouble height(BuildContext context) {\n  return MediaQuery.of(context).size.height;\n}\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAs you can see, it's just a bunch of functions like for example space which will help me set a space where i want.\nNow, let's add the transitions.dart which will use the animations module:\n\n\nimport 'package:animations/animations.dart';\nimport 'package:flutter/material.dart';\n\nclass Transitions {\n  static Route sharedAxisPageTransition(Widget screen,\n      {bool isHorizontal = true}) {\n    final SharedAxisTransitionType _transitionType = isHorizontal\n        ? SharedAxisTransitionType.horizontal\n        : SharedAxisTransitionType.vertical;\n\n    return PageRouteBuilder<SharedAxisTransition>(\n        pageBuilder: (context, animation, secondaryAnimation) => screen,\n        transitionsBuilder: (context, animation, secondaryAnimation, child) {\n          return SharedAxisTransition(\n            animation: animation,\n            secondaryAnimation: secondaryAnimation,\n            transitionType: _transitionType,\n            child: child,\n          );\n        });\n  }\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nLike i said up there, it's a class that will implement a custom animation on page transitions.\nNow let's write the navigation.dart:\n\n\nimport 'package:flutter/material.dart';\nimport 'transitions.dart';\n\nvoid goto(BuildContext context, Widget screen, {bool isReplaced = false}) {\n  isReplaced\n      ? Navigator.of(context)\n          .pushReplacement(Transitions.sharedAxisPageTransition(screen))\n      : Navigator.of(context)\n          .push(Transitions.sharedAxisPageTransition(screen));\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAs you can see, this will just use our class declared in our previous transitions.dart.\nWe've got our utilities now, let's now see what is inside our app.dart file:\n\n\nimport 'package:flutter/material.dart';\n\nclass App extends StatelessWidget {\n  const App({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: '#title',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: null,\n    );\n  }\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNotice that we've set the title value to: #title. We will talk about it later.\nAnd finally, our main.dart file:\n\n\nimport 'package:flutter/material.dart';\nimport './src/app.dart';\n\nvoid main() {\n  runApp(const App());\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nOk, we got all of our file for now. What we need to do is to copy the utilities inside the src/helpers folder, the app.dart inside the src folder and change the main.dart file.\nFor simplicity, let's create a helpers folder inside our templates and move these files inside it: spacing.dart, transitions.dart, navigation.dart.\nLet's get back to the utils and these lines:\n\n\n// utils.js\n\nimport { resolve, join, dirname } from \"path\";\nimport { error, success } from \"./log\";\nimport { existsSync, mkdirSync, readdirSync, statSync, copyFileSync } from \"fs\";\n\nconst createFolders ...\n...\n\nconst copyDirectoryContent = (source, destination) => {\n  mkdirSync(destination, { recursive: true }); // Create the destination directory if it doesn't exist\n\n// Read our directory\n  readdirSync(source).forEach((file) => {\n    const srcPath = join(source, file);\n    const destPath = join(destination, file);\n    if (statSync(srcPath).isDirectory()) {\n      copyDirectoryContent(srcPath, destPath); // Recursively copy subdirectories\n    } else {\n      copyFileSync(srcPath, destPath); // Copy files\n    }\n  });\n};\n\nconst copyFiles = (project) => {\n  const templateDir = resolve(dirname(\"\"), \"templates\");\n  // Copy all our files from inside our templates/helpers dir to the project\n  copyDirectoryContent(\n    resolve(templateDir, \"helpers\"),\n    resolve(project, \"lib/src/helpers\")\n  );\n};\n\nexport { createFolders, copyFiles };\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow, let's update our actions.js file to use it:\n\n\n// actions.js\n...\n\ndependencies.on(\"close\", () => {\n      success(`Dependencies are correctly added...`);\n      log(`Creating folders...`);\n      createFolders(project);\n      log(`Copying utility files...`);\n      copyFiles(project);\n      success(\"Project created correctly\");\n    });\n\n...\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nDon't forget to import the copyFiles from the utils.js file.\nNow, let's test our code and... Yes! It will first create the project, add dependencies and add our helper files. \nOk, so far so good \ud83d\udc4d \ud83d\ude0a \nLet's not forget our main.dart and app.dart files.\n\n\n// utils.js\n...\n\nconst copyFiles = (project) => {\n  const templateDir = resolve(dirname(\"\"), \"templates\");\n  const appFile = resolve(project, \"lib/src/app.dart\");\n  copyDirectoryContent(\n    resolve(templateDir, \"helpers\"),\n    resolve(project, \"lib/src/helpers\")\n  );\n\n  copyFileSync(\n    resolve(templateDir, \"main.dart\"),\n    resolve(project, \"lib/main.dart\")\n  );\n\n  copyFileSync(resolve(templateDir, \"app.dart\"), appFile);\n};\n...\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nOK. I've add the main.dart file to the list of the file to copy. Now, time to add app.dart. Let's talk about it:\nIf you remember, our app.dart file has a weird line inside it:\n\n\n    return MaterialApp(\n      title: '#title',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: null,\n    );\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nYou called it, it's the title: '#title'. That because we will replace it by the name of our project. But we need to copy it first then replace its content.\n\n\n// utils.js\n\n...\n\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst copyFiles = (project) => {\n  const templateDir = resolve(dirname(\"\"), \"templates\");\n  const appFile = resolve(project, \"lib/src/app.dart\");\n  copyDirectoryContent(\n    resolve(templateDir, \"helpers\"),\n    resolve(project, \"lib/src/helpers\")\n  );\n\n  copyFileSync(\n    resolve(templateDir, \"main.dart\"),\n    resolve(project, \"lib/main.dart\")\n  );\n\n  copyFileSync(resolve(templateDir, \"app.dart\"), appFile);\n\n  const data = readFileSync(appFile, \"utf8\").replace(\n    \"#title\",\n    capitalize(project)\n  );\n\n  writeFileSync(appFile, data);\n};\n\n...\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThat's it! We copy the app.dart first, then we will read it and replace the string #title by the name of the project capitalized.\nTime to test! \ud83d\ude01\n\n\n> fluttertool\n\n? What do you want to do? 1 - Create a new project\n\n========================================\nOK! Let's create your wonderful project!\n========================================\n\n? What is the name of your project? myproject\n? What is the name of your organization? test\nCreating project skeleton...\nAdding dependencies...\n\u2714 Dependencies are correctly added...\nCreating folders...\n\u2714 Folders and files are correctly created\nCopying utility files...\n\u2714 Project created correctly\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nYes! We made it! Time for the next step: creating module.\n\n\n\n  Stacked Module\n\nI will not discuss about the stacked module as it will require an entire about it (let me know if you want one). \nA module consists of two files: the view and the viewmodel that we will copy inside lib/src/views/screens folder.\nLet's create our module template inside our templates directory.\n\nDon't worry about the files being red.\nLet's see what inside them:\n\n\n// module_viewmodel.dart\n\nimport 'package:stacked/stacked.dart';\nclass ModuleViewModel extends BaseViewModel {}\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n// module_view.dart\n\nimport 'package:flutter/material.dart';\nimport 'package:stacked/stacked.dart';\nimport './module_viewmodel.dart';\n\nclass ModuleView extends StatelessWidget {\n  const ModuleView({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return ViewModelBuilder<ModuleViewModel>.reactive(\n      viewModelBuilder: () => ModuleViewModel(),\n      builder: (\n        BuildContext context,\n        ModuleViewModel model,\n        Widget? child,\n      ) {\n        return Scaffold(\n          body: Center(\n            child: Text(\n              'ModuleView',\n            ),\n          ),\n        );\n      },\n    );\n  }\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe will apply the same process as we did with the app.dart.\nBut we will add some extra lines inside utils.js:\n\n\n// utils.js\n\nimport { resolve, join, dirname } from \"path\";\nimport { error, success } from \"./log\";\nimport {\n  existsSync,\n  mkdirSync,\n  readdirSync,\n  statSync,\n  copyFileSync,\n  readFileSync,\n  writeFileSync,\n} from \"fs\";\n\nlet SCREENPATH = \"lib/src/views/screens\";\n\n...\n\nconst renameModuleFiles = (path, module, filename) => {\n  const changes = readFileSync(path, \"utf8\")\n    .replaceAll(\"Module\", capitalize(module))\n    .replace(\"module\", module);\n\n  writeFileSync(\n    `${SCREENPATH}/${module}/${filename.replace(\n      \"module\",\n      module.toLowerCase()\n    )}`,\n    changes\n  );\n};\n\nconst createStackedModuleBoilerplate = (module) => {\n  const templateDir = resolve(dirname(\"\"), \"../templates/modules\");\n  const files = [\"module_view.dart\", \"module_viewmodel.dart\"];\n\n  try {\n    const _path = resolve(SCREENPATH, module);\n    if (!existsSync(_path)) {\n      mkdirSync(_path);\n    }\n\n    files.forEach((file) => {\n      const _path = resolve(SCREENPATH, module, file);\n\n      if (!existsSync(_path)) {\n        renameModuleFiles(resolve(templateDir, file), module, file);\n      }\n    });\n\n    success(`${capitalize(module)} module is correctly created`);\n  } catch (err) {\n    error(err);\n  }\n};\n\n...\n\nexport { createFolders, copyFiles, createStackedModuleBoilerplate };\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nOk, what's going on here: \n\nWe create a folder according to the name the user gave\nWe copy the files from templates/modules inside that folder\nRename those file copied and replace all placeholder string inside it by the name of the module\n\nAll we have to do is to call this function inside our actions.js\n\n\n// actions.js\n...\nconst createModule = async () => {\n  const {module} = await inquirer.prompt([\n    {\n      type: \"input\",\n      name: \"project\",\n      message: \"What is the name of your module?\",\n    },\n  ]);\n\n  if (module) {\n    createStackedModuleBoilerplate(module);\n    return;\n  }\n\n  error(\"You need to specify a module name!\");\n};\n\n...\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\u274c Careful!, as we will create the module inside the lib/src/views/screens we need to be in the root of the project to have it working.\nTest time \u203c\ufe0f\n\n\n> fluttertool\n\n? What do you want to do? 2 - Add a new stacked module\n? What is the name of your module? signin\n\u2714 Signin module is correctly created\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nYay! \ud83e\udd73\ud83e\udd73\nLet's do a full example by creating a project and adding a home module to it:\n\n\n> fluttertool\n\n? What do you want to do? 1 - Create a new project\n\n========================================\nOK! Let's create your wonderful project!\n========================================\n\n? What is the name of your project? myproject\n? What is the name of your organization? test\nCreating project skeleton...\nAdding dependencies...\n\u2714 Dependencies are correctly added...\nCreating folders...\n\u2714 Folders and files are correctly created\nCopying utility files...\n\u2714 Project created correctly\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n> cd myproject && fluttertool\n? What do you want to do? 2 - Add a new stacked module\n? What is the name of your module? home\n\u2714 Home module is correctly created\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWhat we've got now:\n\nLet's see what we have inside our home_view.dart and home_viewmodel.dart\n\n\nWhat we've done so far:\n\nadding our template files and arrange them correctly\nchange our main.dart file when we add app.dart\n\nimplement our module creator\n\nWhat we will see next in the last step is how we can add shortcuts to our cli tool like:\n\n\n> fluttertool -m <modulename>\n> flutter -h\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nStay tune! See you next time! \ud83d\udc4b"
  },
  {
    "id": 35,
    "title": "Building an audio player in React to play sound or music",
    "author": "Matt Angelosanto",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--tQEgvw8k--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1506/e0a84c58-6a79-4f06-9149-87a38b84afa8.png",
    "time": "2023-02-16T18:43:54Z",
    "likes": "1",
    "link": "https://dev.to/logrocket/building-an-audio-player-in-react-to-play-sound-or-music-4084",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--h9Jqba4o--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6m17ttm8dxvk249nxm1.png",
    "body": "Written by Ibadehin Mojeed\u270f\ufe0f\nIf you run a podcast or any other sound- or music-related web application, you may want to add an audio player to your project. This guide will teach you how to build an audio player from scratch with React. \nThe audio player will offer control features like playing or pausing a track, adjusting volume, moving to the next or previous track, moving a progress slider, and so on. We will also customize it to look consistent across browsers. \nJump ahead:\n\n Setting up the development environment\n\n Creating the React audio player project structure\n\n Rendering the AudioPlayerchild components\n\n Embedding sound content to play in our React project\n\n Adding custom controls for the React music player\n\n The play() and pause() HTML audio methods\n\n Displaying the current track data\n\n Configuring the progress bar and volume slider\n\n Displaying time progress and duration\n\n TherequestAnimationFrame API\n\n Navigating tracks in the React audio player\n\n Adding the volume slider\n\n Triggering theonEnded event\n\n\nBefore beginning the tutorial, ensure you have a basic understanding of React. \nBelow is a preview of the end product we will build together:  \nYou can interact with the project, and after that, get started!\n\n\n\n  Setting up the development environment \n\n\nLet\u2019s run the following command to set up a development environment with create-react-app:\n\n\nnpx create-react-app react-audio-player\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen do the following to start the project:\n\n\ncd react-audio-player\nnpm start\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Creating the React audio player project structure \n\n\nAs you can see in the image above, we can break down the user interface into four components. The number labels on the image correspond to the following component names:\n\n AudioPlayer \u2014 the parent/root component\n DisplayTrack \u2014 renders the audio content\n Controls \u2014 renders the audio controls and volume slider\n ProgressBar \u2014 renders the audio progress bar and time\n\nWith this in mind, we will create the component files in the src/components folder. Let\u2019s ensure our project directory follows the following structure:\n\n\nreact-audio-player\n   ...\n    \u251c\u2500\u2500 src\n    \u2502    \u251c\u2500\u2500 components\n    \u2502    \u2502      \u251c\u2500\u2500 AudioPlayer.js\n    \u2502    \u2502      \u251c\u2500\u2500 Controls.js\n    \u2502    \u2502      \u251c\u2500\u2500 DisplayTrack.js\n    \u2502    \u2502      \u2514\u2500\u2500 ProgressBar.js     \n    \u2502    \u251c\u2500\u2500 data\n    \u2502    \u251c\u2500\u2500 styles\n    \u2502    \u2502      \u2514\u2500\u2500 index.css\n    \u2502    \u251c\u2500\u2500 index.js\n    \u2502   ...\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNotice we also added a data folder and styles/index.css file in the src to hold the audio files and CSS, respectively. Copy the react-audio-player project styles and paste them into the styles/index.css file. \nNext, in the components/AudioPlayer.js file, let\u2019s render some simple text:\n\n\nconst AudioPlayer = () => {\n  return (\n    <div className=\"audio-player\">\n      <div className=\"inner\">Audio player content</div>\n    </div>\n  );\n};\nexport default AudioPlayer;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAfter that, replace the content of the src/index.js file with the following:\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport AudioPlayer from './components/AudioPlayer';\n\nimport './styles/index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <AudioPlayer />\n  </React.StrictMode>\n);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSave the files and see the content of the AudioPlayer component rendered in the browser.\n\n\n\n  Rendering the AudioPlayer child components \n\n\nStarting with the DisplayTrack component. In the components/DisplayTrack.js file, let\u2019s render some simple text:\n\n\nconst DisplayTrack = () => {\n  return <div>DisplayTrack content here</div>;\n};\nexport default DisplayTrack;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen, import the component in the components/AudioPlayer.js file:\n\n\nimport DisplayTrack from './DisplayTrack';\n\nconst AudioPlayer = () => {\n  return (\n    <div className=\"audio-player\">\n      <div className=\"inner\">\n        <DisplayTrack />\n      </div>\n    </div>\n  );\n};\nexport default AudioPlayer;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSave the files to see the component text rendered in the frontend. \nAgain, let\u2019s render some text for the other child components \u2014 Controls and ProgressBar. After that, we will import and render them in the components/AudioPlayer.js file like so:\n\n\nimport DisplayTrack from './DisplayTrack';\nimport Controls from './Controls';\nimport ProgressBar from './ProgressBar';\n\nconst AudioPlayer = () => {\n  return (\n    <div className=\"audio-player\">\n      <div className=\"inner\">\n        <DisplayTrack />\n        <Controls />\n        <ProgressBar />\n      </div>\n    </div>\n  );\n};\nexport default AudioPlayer;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSave all files and ensure the component's contents are rendered in the front end.\n\n\n\n  Embedding sound content to play in our React project \n\n\nWe will use the HTML <audio> element to embed audio in our project. This element has a src attribute to specify the audio URL and a controls attribute to display the browser\u2019s specific controls for the audio, such as play, pause, and others:\n\n\n<audio src=\" \" controls />\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Fetching the audio files\n\nWe need audio files to work with to use the <audio> element. So, let\u2019s create a tracks.js file in the src/data folder and add audio tracks as an array of objects like so:\n\n\n// audio files\nimport beautiful from './a_beautiful_day.mp3';\n\n// audio thumbnails\nimport trinix from './trinix.jpeg';\n\nexport const tracks = [\n  {\n    title: 'Trinix ft Rushawn \u2013 Its a beautiful day',\n    src: beautiful,\n    author: 'Trinix ft Rushawn',\n    thumbnail: trinix,\n  },\n  // ...\n];\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nYou can copy the sample audio files from the project repo and use them in the src/data folder.\n\n\n\n  Rendering the audio player\n\nBecause we will need the audio data in multiple children components, we will import the playlist file in the AudioPlayer parent component. Then, we will create a state to handle the current audio track. For now, we will assign the first track from the playlist. \nThe components/AudioPlayer.js file now looks like so:\n\n\nimport { useState } from 'react';\nimport { tracks } from '../data/tracks';\n\n// import components\nimport DisplayTrack from './DisplayTrack';\nimport Controls from './Controls';\nimport ProgressBar from './ProgressBar';\n\nconst AudioPlayer = () => {\n  const [currentTrack, setCurrentTrack] = useState(tracks[0]);\n  return (\n    <div className=\"audio-player\">\n      <div className=\"inner\">\n        <DisplayTrack currentTrack={currentTrack} />\n        <Controls />\n        <ProgressBar />\n      </div>\n    </div>\n  );\n};\nexport default AudioPlayer;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn the code, we assigned the first track in the array to a state using the zero [0] index. Notice how we also passed the state to the DisplayTrack component. \nLet\u2019s access the state from the components/DisplayTrack.js file and update the src attribute of the <audio> tag:\n\n\nconst DisplayTrack = ({ currentTrack }) => {\n  return (\n    <div>\n      <audio src={currentTrack.src} controls />\n    </div>\n  );\n};\nexport default DisplayTrack;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIf we save all files, the audio should render like so:  \nThe appearance of the audio control will vary between browsers. Therefore, we will create a custom control to get a consistent look and feel across browsers and add additional features. \nLet\u2019s start by removing the controls attribute from the <audio> tag to dismiss the browser\u2019s default control. We should have the following:\n\n\n<audio src={currentTrack.src} />\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNext, we\u2019ll add some custom controls.\n\n\n\n  Adding custom controls for the React sound player \n\n\nFirst, we need control icons. Let\u2019s get icons from the React Icons library by running the following command in our project:\n\n\nnpm install react-icons\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAfter that, open the components/Controls.js file and render the control icons. We should then have the following:\n\n\nimport { useState } from 'react';\n\n// icons\nimport {\n  IoPlayBackSharp,\n  IoPlayForwardSharp,\n  IoPlaySkipBackSharp,\n  IoPlaySkipForwardSharp,\n  IoPlaySharp,\n  IoPauseSharp,\n} from 'react-icons/io5';\n\nconst Controls = () => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  return (\n    <div className=\"controls-wrapper\">\n      <div className=\"controls\">\n        <button>\n          <IoPlaySkipBackSharp />\n        </button>\n        <button>\n          <IoPlayBackSharp />\n        </button>\n\n        <button>\n          {isPlaying ? <IoPauseSharp /> : <IoPlaySharp />}\n        </button>\n        <button>\n          <IoPlayForwardSharp />\n        </button>\n        <button>\n          <IoPlaySkipForwardSharp />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Controls;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn the code, be aware that we used theuseState() Hook to render the play and pause icons dynamically. Let\u2019s add the functionality to switch the icons when we click the button. \nUpdate the play/pause button to include the onClick event handler like so:\n\n\n<button onClick={togglePlayPause}>\n  {isPlaying ? <IoPauseSharp /> : <IoPlaySharp />}\n</button>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen, add the following handler above the return statement to toggle the Boolean state value when the togglePlayPause button is clicked:\n\n\nconst togglePlayPause = () => {\n  setIsPlaying((prev) => !prev);\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSave your files and ensure the play and pause icons toggle when you click their button.\n\n\n\n  The play() and pause() HTML audio methods \n\n\nTo play and pause an audio track, the <audio> element exposes the play() and pause() methods. To invoke these methods, we must have access to the <audio> element. In React, we use the useRefHook for that. \nBecause we will need this <audio> reference in multiple children components, we will create it inside their parent component. Open the components/AudioPlayer.js file and import the useRef Hook:\n\n\nimport { useRef, useState } from 'react';\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen, initialize useRef above the return statement and pass it to the DisplayTrack and Controls components:\n\n\nconst AudioPlayer = () => {\n  const [currentTrack, setCurrentTrack] = useState(tracks[0]);\n\n  // reference\n  const audioRef = useRef();\n\n  return (\n    <div className=\"audio-player\">\n      <div className=\"inner\">\n        <DisplayTrack\n          currentTrack={currentTrack}\n          audioRef={audioRef}\n        />\n        <Controls audioRef={audioRef} />\n        <ProgressBar />\n      </div>\n    </div>\n  );\n};\nexport default AudioPlayer;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn the DisplayTrack component, let\u2019s access the reference and assign it to a ref attribute on the <audio> element:\n\n\nconst DisplayTrack = ({ currentTrack, audioRef }) => {\n  return (\n    <div>\n      <audio src={currentTrack.src} ref={audioRef} />\n    </div>\n  );\n};\nexport default DisplayTrack;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIf we save our files, we should now have access to the <audio> element\u2019s methods and properties via the returned object for the ref. You can log the audioRef in the AudioPlayer component and see what it returns in the browser console:\n\n\nconst audioRef = useRef();\nconsole.log(audioRef);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNext, let\u2019s open the components/Controls.js file and access the reference variable. Then, on its current object, we can invoke the play() and pause() methods:\n\n\nimport { useState, useEffect } from 'react';\n\n// icons here\n\nconst Controls = ({ audioRef }) => {\n  // ...\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying, audioRef]);\n\n  return (\n    // ...\n  );\n};\n\nexport default Controls;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe focus in the code above is theuseEffect Hook. In the Hook, we checked if the isPlaying state value is true or not to either play or pause the audio track. \nIf we save the files and visit the front end, we should be able to play and pause the current audio track.\n\n\n\n  Displaying the current track data \n\n\nTo render the current track title, author, and thumbnail, let\u2019s open the components/DisplayTrack.js file and update the JSX to include the data:\n\n\nimport { BsMusicNoteBeamed } from 'react-icons/bs';\n\nconst DisplayTrack = ({ currentTrack, audioRef }) => {\n  return (\n    <div>\n      <audio src={currentTrack.src} ref={audioRef} />\n      <div className=\"audio-info\">\n        <div className=\"audio-image\">\n          {currentTrack.thumbnail ? (\n            <img src={currentTrack.thumbnail} alt=\"audio avatar\" />\n          ) : (\n            <div className=\"icon-wrapper\">\n              <span className=\"audio-icon\">\n                <BsMusicNoteBeamed />\n              </span>\n            </div>\n          )}\n        </div>\n        <div className=\"text\">\n          <p className=\"title\">{currentTrack.title}</p>\n          <p>{currentTrack.author}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default DisplayTrack;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn the code above, the focus is the div wrapper element below the <audio> tag. In this div, we started by checking whether a thumbnail image exists or not to display it or render a custom style. \nNotice we imported an icon from the react-icons library to style a default thumbnail. Afterward, we rendered the track title and the author's name right after the thumbnail. \nIf we save the file, the result should look like so: \n\n\n\n  Configuring the progress bar and volume slider \n\n\nTo add these functionalities, we will use the HTML input range element. Starting with the progress bar, let\u2019s open the components/ProgressBar.js file and update the JSX, so we have the following:\n\n\nconst ProgressBar = () => {\n  return (\n    <div className=\"progress\">\n      <span className=\"time current\">00:00</span>\n      <input type=\"range\" />\n      <span className=\"time\">03:34</span>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIf we save the file and view the project, we will see the browser\u2019s default input range. Creating a range element that is consistent across browsers requires a bit more work using CSS rules. \nFor this, let\u2019s create a styles/customize-progress-bar.css file, copy the react-audio-playerproject's CSS rules, and paste them into the newly created CSS file. \nNext, import the CSS file inside the src/index.js:\n\n\nimport './styles/index.css';\nimport './styles/customize-progress-bar.css';\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nEnsure you save all files. \nIt is important to note that we have used a CSS variable in the CSS file to assign the progress width dynamically:\n\n\ninput[type=\"range\"] {\n  --range-progress: 0;\n  /* ... */\n}\n\ninput[type=\"range\"]::before {\n  /* ... */\n  background: #f50;\n  width: var(--range-progress);\n  /* ... */\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe started with a value of zero. We will dynamically update this value based on the audio progress. For now, let\u2019s temporarily modify the CSS variable value to be 50 percent like so:\n\n\ninput[type=\"range\"] {\n  --range-progress: 50%;\n  /* ... */\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe will then have a progress bar that is styled up to 50 percent of the total length:  Let\u2019s return the value assigned to the CSS variable to 0:\n\n\ninput[type=\"range\"] {\n  --range-progress: 0;\n  /* ... */\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Implementing controlled and uncontrolled inputs\n\nIn React, form inputs like the range can either be controlled or uncontrolled. With controlled inputs, the component manages the state, and we write a handler for every state update. With uncontrolled inputs, the DOM manages the state, and we use a ref to get input values from the DOM. \nWe will learn to implement both controlled and uncontrolled inputs. We will implement the uncontrolled logic on the progress bar and a controlled logic on the volume slider. \nBack to the progress bar, we will get the reference to the input range. Because we will need this ref in multiple child components, we will initialize it in their parent component. \nOpen the components/AudioPlayer.js file and initialize a ref above the return statement and pass it to the <ProgressBar />:\n\n\nconst AudioPlayer = () => {\n  // ...\n  const progressBarRef = useRef();\n\nreturn (\n  <div className=\"audio-player\">\n    <div className=\"inner\">\n      <DisplayTrack\n        currentTrack={currentTrack}\n        audioRef={audioRef}\n      />\n      <Controls audioRef={audioRef} />\n      <ProgressBar progressBarRef={progressBarRef} />\n    </div>\n  </div>\n);\n};\nexport default AudioPlayer;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nTo make our code short, we can rewrite the returned JSX so we have the following:\n\n\nreturn (\n  <div className=\"audio-player\">\n    <div className=\"inner\">\n      <DisplayTrack {...{ currentTrack, audioRef }} />\n      <Controls {...{ audioRef }} />\n      <ProgressBar {...{ progressBarRef }} />\n    </div>\n  </div>\n);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nLet\u2019s save our file, open the components/ProgressBar.js file, access the reference, and assign it to a ref attribute on the <input /> element:\n\n\nconst ProgressBar = ({ progressBarRef }) => {\n  return (\n    <div className=\"progress\">\n      <span className=\"time current\">00:00</span>\n      <input type=\"range\" ref={progressBarRef} />\n      <span className=\"time\">03:34</span>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow that we have a reference to the <input />, we will add an onChange event to get the input values at every point. We will also set the default value to 0 so the range thumb starts at the beginning. The component now looks like so:\n\n\nconst ProgressBar = ({ progressBarRef }) => {\n  const handleProgressChange = () => {\n    console.log(progressBarRef.current.value);\n  };\n\n  return (\n    <div className=\"progress\">\n      <span className=\"time current\">00:00</span>\n      <input\n        type=\"range\"\n        ref={progressBarRef}\n        defaultValue=\"0\"\n        onChange={handleProgressChange}\n      />\n      <span className=\"time\">03:34</span>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWhen changing the progress bar, we will see the corresponding values in the browser console. \nWe will now take this value and assign it to the currentTime property of the audio playback. This property returns the audio playback's current position using seconds as the unit of measurement. \nTo get the currentTime property, we need the audio reference. Fortunately, we created it earlier in the components/AudioPlayer.js file. So, let\u2019s pass it down to the <ProgressBar /> component, so we have the following:\n\n\n<ProgressBar {...{ progressBarRef, audioRef }} />\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAfter that, open the components/ProgressBar.js file and access the audio ref. We will then assign the progress bar value to the currentTime property:\n\n\nconst ProgressBar = ({ progressBarRef, audioRef }) => {\n  const handleProgressChange = () => {\n    audioRef.current.currentTime = progressBarRef.current.value;\n  };\n  return (\n    // ...\n  );\n};\n\nexport default ProgressBar;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nLet\u2019s save all files. When we change the progress bar, the audio playback jumps to the specified position. Be aware that the time is static for now and the range progress color is not progressing. We will get there!\n\n\n\n  Displaying time progress and duration \n\n\nWe will start by creating states to hold the audio time. In the components/AudioPlayer.js file, add the states and pass the state variables to the <ProgressBar />:\n\n\nconst AudioPlayer = () => {\n  // ...\n  const [timeProgress, setTimeProgress] = useState(0);\n  const [duration, setDuration] = useState(0);\n\n  // reference\n\n  return (\n    <div className=\"audio-player\">\n      <div className=\"inner\">\n        {/* ... */}\n        <ProgressBar\n          {...{ progressBarRef, audioRef, timeProgress, duration }}\n        />\n      </div>\n    </div>\n  );\n};\nexport default AudioPlayer;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSave the file, grab the states from the ProgressBar component, and render them in the JSX:\n\n\nconst ProgressBar = ({\n  // ...\n  timeProgress,\n  duration,\n}) => {\n  // ...\n  return (\n    <div className=\"progress\">\n      <span className=\"time current\">{timeProgress}</span>\n      {/* ... */}\n      <span className=\"time\">{duration}</span>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Updating audio time\n\nLike the current time, as we saw earlier, we also have access to the track duration via the duration audio property. \nStarting with the duration, we want to get and display the track duration as soon as the audio metadata loads. We will use the onloadedmetadata event on the <audio />. \nOpen the components/DisplayTrack.js file and include this event:\n\n\nconst DisplayTrack = ({ currentTrack, audioRef }) => {\n\n  const onLoadedMetadata = () => {\n    console.log(audioRef.current.duration);\n  };\n\n  return (\n    <div>\n      <audio\n        src={currentTrack.src}\n        ref={audioRef}\n        onLoadedMetadata={onLoadedMetadata}\n      />\n      {/* ... */}\n    </div>\n  );\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIf we save and open the console, we will see the duration time in seconds. \nNext, we will update the duration state variable with the audio duration and ensure the <input> progress bar\u2018s max attribute matches the duration. \nIn the AudioPlayer component, let\u2019s pass the setDuration and progressBarRef to the <DisplayTrack />:\n\n\nconst AudioPlayer = () => {\n  // ...\n\n  return (\n    <div className=\"audio-player\">\n      <div className=\"inner\">\n        <DisplayTrack\n          {...{ currentTrack, audioRef, setDuration, progressBarRef }}\n        />\n        {/* ... */}\n      </div>\n    </div>\n  );\n};\nexport default AudioPlayer;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen, in the DisplayTrack component, grab these props and update the onloadedmetadata handler:\n\n\nconst DisplayTrack = ({\n  // ...\n  setDuration,\n  progressBarRef,\n}) => {\n  const onLoadedMetadata = () => {\n    const seconds = audioRef.current.duration;\n    setDuration(seconds);\n    progressBarRef.current.max = seconds;\n  };\n\n  return (\n    // ...\n  );\n};\nexport default DisplayTrack;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow, we should see the track duration displayed:  The track duration is currently displayed using only seconds as the unit, but it would be easier to read if it displayed both minutes and seconds. Let\u2019s create a function that formats the time to the desired display.\n\n\n\n  Formatting the audio time\n\nIn the ProgressBar component, add the following code above the return statement:\n\n\nconst formatTime = (time) => {\n  if (time && !isNaN(time)) {\n    const minutes = Math.floor(time / 60);\n    const formatMinutes =\n      minutes < 10 ? `0${minutes}` : `${minutes}`;\n    const seconds = Math.floor(time % 60);\n    const formatSeconds =\n      seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${formatMinutes}:${formatSeconds}`;\n  }\n  return '00:00';\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe formatTime function takes a time argument in seconds and reformats it to minutes:seconds. We will then use the function in the JSX like so:\n\n\nreturn (\n  <div className=\"progress\">\n    <span className=\"time current\">{formatTime(timeProgress)}</span>\n    {/* ... */}\n    <span className=\"time\">{formatTime(duration)}</span>\n  </div>\n);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSave the file and see the audio time that is formatted the way we want.\n\n\n\n  The requestAnimationFrame API \n\n\nWe need a mechanism that tells the browser to redraw every update to display the current time and the range progress. While we may think of using setInterval(), requestAnimationFrame is much more efficient and smoother when we want to handle repeated animation. \nThis API takes a callback that it calls whenever it kicks off. To trigger the API and tell the browser to update the screen, we may call it once the audio starts playing and the current time increases. \nLet\u2019s open the components/Controls.js file and trigger this API once the playback is ongoing in the useEffect Hook:\n\n\nconst playAnimationRef = useRef();\n\nconst repeat = () => {\n  console.log('run');\n\n  playAnimationRef.current = requestAnimationFrame(repeat);\n};\n\nuseEffect(() => {\n  if (isPlaying) {\n    audioRef.current.play();\n    playAnimationRef.current = requestAnimationFrame(repeat);\n  } else {\n    audioRef.current.pause();\n    cancelAnimationFrame(playAnimationRef.current);\n  }\n}, [isPlaying, audioRef, repeat]);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe requestAnimationFrame returns the request-id that we have assigned to playAnimationRef.current. The ref will preserve the returned id over time. This id lets us cancel the request once we pause the playback. \nNotice how the callback recursively calls itself to repeat the animation. If we save the file and click the audio play button, we will see the repeat function repeatedly run in the browser console. \nWe will also see a terminal warning that says the repeat function changes the useEffect dependencies on every render. Let\u2019s memorize the definition of the callback by wrapping it in a useCallback Hook. Let\u2019s import the useCallback from React:\n\n\nimport {\n  //...\n  useCallback,\n} from 'react';\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen, update the repeat callback to the following:\n\n\nconst repeat = useCallback(() => {\n  console.log('run');\n\n  playAnimationRef.current = requestAnimationFrame(repeat);\n}, []);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNext, we will define the following functionality in that callback:\n\n  Update the timeProgress state variable with the current audio time\n  Ensure the progress bar progresses with the current audio time\n  Dynamically update the audio progress \u2014 i.e., styling the length of the played section\n\nLet\u2019s pass the progressBarRef, duration state variable, and setTimeProgress from the AudioPlayer component into the Controls component:\n\n\nconst AudioPlayer = () => {\n  // ...\n  return (\n    <div className=\"audio-player\">\n      <div className=\"inner\">\n        {/* ... */}\n        <Controls\n          {...{ audioRef, progressBarRef, duration, setTimeProgress }}\n        />\n        {/* ... */}\n      </div>\n    </div>\n  );\n};\nexport default AudioPlayer;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNext, let\u2019s access the props inside the Controls component and update the repeat callback, so we have the following:\n\n\nconst Controls = ({\n  audioRef,\n  progressBarRef,\n  duration,\n  setTimeProgress,\n}) => {\n  // ...\n\n  const repeat = useCallback(() => {\n    const currentTime = audioRef.current.currentTime;\n    setTimeProgress(currentTime);\n    progressBarRef.current.value = currentTime;\n    progressBarRef.current.style.setProperty(\n      '--range-progress',\n      `${(progressBarRef.current.value / duration) * 100}%`\n    );\n\n    playAnimationRef.current = requestAnimationFrame(repeat);\n  }, [audioRef, duration, progressBarRef, setTimeProgress]);\n\n  // ...\n  return (\n    // ...\n  );\n};\n\nexport default Controls;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe focus is on the repeat callback. With the setTimeProgress updater function, we update the audio elapse time. We also assigned the current time to the range value so it progresses. \nRegarding the length of the played section, we grabbed the CSS variable we declared in the CSS file and dynamically update it. \nIf we save the file and play the audio track, we should see the following behavior:  \nBe aware that if we pause the audio, changing the progress bar will not reflect the animation till we press play again. This is because we called the cancelAnimationFrame in the pause condition to cancel it. We can remove the cancelAnimationFrame and move the requestAnimationFrame out of condition, so we have the following:\n\n\nuseEffect(() => {\n  if (isPlaying) {\n    audioRef.current.play();\n  } else {\n    audioRef.current.pause();\n  }\n  playAnimationRef.current = requestAnimationFrame(repeat);\n}, [isPlaying, audioRef, repeat]);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe project should now work as expected.\n\n\n\n  Navigating tracks in the React music player \n\n\nLet\u2019s work on the next, previous, skip forward, and skip backward buttons. We\u2018ll start by attaching onClick events to them. In the components/Controls.js file, update the buttons in the JSX to include onClick events:\n\n\nreturn (\n  <div className=\"controls-wrapper\">\n    <div className=\"controls\">\n      <button onClick={handlePrevious}>\n        <IoPlaySkipBackSharp />\n      </button>\n      <button onClick={skipBackward}>\n        <IoPlayBackSharp />\n      </button>\n\n      <button onClick={togglePlayPause}>\n        {isPlaying ? <IoPauseSharp /> : <IoPlaySharp />}\n      </button>\n      <button onClick={skipForward}>\n        <IoPlayForwardSharp />\n      </button>\n      <button onClick={handleNext}>\n        <IoPlaySkipForwardSharp />\n      </button>\n    </div>\n  </div>\n);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen, above the return statement, add their respective handler functions:\n\n\nconst skipForward = () => {};\n\nconst skipBackward = () => {};\n\nconst handlePrevious = () => {};\n\nconst handleNext = () => {};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Handling the next track\n\nTo handle the next and previous track, we need to know the index of the current playing track and have access to the playlist. In the components/AudioPlayer.js file, let\u2019s initialize a state for the track index:\n\n\nconst [trackIndex, setTrackIndex] = useState(0);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe currentTrack state should currently look like this:\n\n\nconst [currentTrack, setCurrentTrack] = useState(tracks[0]);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nLet\u2019s update it to this instead:\n\n\nconst [currentTrack, setCurrentTrack] = useState(tracks[trackIndex]);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNext, let\u2019s pass the tracks, trackIndex, setTrackIndex, and setCurrentTrack, to <Controls /> component:\n\n\n<Controls\n  {...{\n    // ...\n    tracks,\n    trackIndex,\n    setTrackIndex,\n    setCurrentTrack,\n  }}\n/>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe will access them from the Controls component as props and then update the handleNext handler, so we have the following:\n\n\nconst handleNext = () => {\n  if (trackIndex >= tracks.length - 1) {\n    setTrackIndex(0);\n    setCurrentTrack(tracks[0]);\n  } else {\n    setTrackIndex((prev) => prev + 1);\n    setCurrentTrack(tracks[trackIndex + 1]);\n  }\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWith the code above, whenever we click the \u201cnext\u201d button, we check if we are in the last index \u2014 i.e., the last track. Then, we set the index to 0 \u2014 i.e., the first track \u2014 and reset the track to the first item in the playlist. Otherwise, we set the index and the track to the next one in the playlist. \nSave the file and ensure the \u201cnext\u201d button works as expected.\n\n\n\n  Handling previous track\n\nSimilar to the \u201cnext track\u201d handler, let\u2019s update the handlePrevious handler so we have the following:\n\n\nconst handlePrevious = () => {\n  if (trackIndex === 0) {\n    let lastTrackIndex = tracks.length - 1;\n    setTrackIndex(lastTrackIndex);\n    setCurrentTrack(tracks[lastTrackIndex]);\n  } else {\n    setTrackIndex((prev) => prev - 1);\n    setCurrentTrack(tracks[trackIndex - 1]);\n  }\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIf the current track index is 0, we reset the index and the track to the last item in the playlist. Otherwise, we set the index and the track to the previous one in the playlist.\n\n\n\n  Skipping forward and backward\n\nIn the respective handlers for skipping forward and backward, we will access the current time from the audio ref and assign a numeric value in seconds:\n\n\nconst skipForward = () => {\n  audioRef.current.currentTime += 15;\n};\n\nconst skipBackward = () => {\n  audioRef.current.currentTime -= 15;\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe have assigned 15 seconds of skipping time, as seen above. Save and ensure the control buttons work as expected.\n\n\n\n  Adding the volume slider \n\n\nAs we mentioned earlier, we will use the HTML input range element to let us control the volume via a slider. In the Controls component, let\u2019s add the volume container element after the control container:\n\n\nreturn (\n  <div className=\"controls-wrapper\">\n    <div className=\"controls\">{/* ... */}</div>\n    <div className=\"volume\">\n      <button>icons</button>\n      <input type=\"range\" min={0} max={100} />\n    </div>\n  </div>\n);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe also mentioned that we would make this input slider a controlled input. \nLet\u2019s start by initializing a state in the Controls component:\n\n\nconst [volume, setVolume] = useState(60);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen, update the input element to include a value and onChange props:\n\n\n<input\n  type=\"range\"\n  min={0}\n  max={100}\n  value={volume}\n  onChange={(e) => setVolume(e.target.value)}\n/>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNext, we will attach the returned value of the volume state variable to the volume property of the audio. Let\u2019s do that by adding the following code above the return statement inside the Controls component:\n\n\nuseEffect(() => {\n  if (audioRef) {\n    audioRef.current.volume = volume / 100;\n  }\n}, [volume, audioRef]);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn this component, we have access to the audio reference. Because the max value of the audio\u2019s volume property is 1, we divided ours volume state \u2014 whose max value is 100 \u2014 by 100 so they can be in sync. \nSave the file and ensure you can increase and reduce the audio volume.\n\n\n\n  Styling the volume progress\n\nLet\u2019s capitalize on the volume state variable to style the volume progress dynamically. On the volume input element, let's add a style attribute to style the progress:\n\n\n<input\n  // ...\n  style={{\n    background: `linear-gradient(to right, #f50 ${volume}%, #ccc ${volume}%)`,\n  }}\n/>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe code above styles the volume progress bar using the CSS linear gradient. As the volume state increases, the progress bar's orange background color will also match until it takes up the rest of the progress bar\u2019s length. Remember to save the file and ensure it works!\n\n\n\n  Setting the volume icons\n\nIn the Controls component, let\u2019s start by initializing a state to handle when the volume is muted:\n\n\nconst [muteVolume, setMuteVolume] = useState(false);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nBy default, we gave it a Boolean value of false. Next, let\u2019s locate the following button within the volume container element:\n\n\n<button>icons</button>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nReplace this with the following code:\n\n\n<button onClick={() => setMuteVolume((prev) => !prev)}>\n  {muteVolume || volume < 5 ? (\n    <IoMdVolumeOff />\n  ) : volume < 40 ? (\n    <IoMdVolumeLow />\n  ) : (\n    <IoMdVolumeHigh />\n  )}\n</button>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn the code above, we have attached an onClick event that toggles the muteVolume state. We also used conditions to render icons dynamically based on the value of the volume state variable. \nBefore saving the file, let\u2019s import the following react-icons components at the top of the file:\n\n\nimport {\n  IoMdVolumeHigh,\n  IoMdVolumeOff,\n  IoMdVolumeLow,\n} from 'react-icons/io';\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nFinally, in the useEffect Hook, let's assign the Boolean muteVolume state to the muted property of the audio:\n\n\nuseEffect(() => {\n  if (audioRef) {\n    audioRef.current.volume = volume / 100;\n    audioRef.current.muted = muteVolume;\n  }\n}, [volume, audioRef, muteVolume]);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSave and test the volume functionality. It should work as expected!\n\n\n\n  Triggering the onEnded event \n\n\nWhen the current track reaches the end, we can trigger the onended event on the <audio> element and act. For this project, we will tell the audio player to start the next track on the playlist. \nSince we already have the functionality in the handleNext handler, let\u2019s move the handler from the components/Controls.js file into the AudioPlayer parent component so that we can also have access to it in the DisplayTrack component. \nThen pass it down to the <DisplayTrack /> and <Controls /> components:\n\n\nreturn (\n  <div className=\"audio-player\">\n    <div className=\"inner\">\n      <DisplayTrack\n        {...{\n          // ...\n          handleNext,\n        }}\n      />\n      <Controls\n        {...{\n          // ...\n          handleNext,\n        }}\n      />\n      {/* ... */}\n    </div>\n  </div>\n);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn the DisplayTrack component, access the handleNext handler as a prop and assign it to the onEnded event on the <audio /> element:\n\n\n<audio\n  // ...\n  onEnded={handleNext}\n/>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSave the file and go into the Controls component to access the handleNext handler as a prop. Remember, we\u2019ve attached it to the next button icon in the file. \nSave all files and test your project. It should work as intended!\n\n\n\n  Conclusion\n\nI\u2019m glad you are here! Creating audio players can be a tedious task, especially if we aim to include major features. \nIn this guide, we learned how to create a React audio player that offers necessary features, including the play, pause, volume, next, previous, and progress controls. We also ensured the audio player looks consistent across browsers. \nI hope you enjoyed reading this guide. Let me know your thoughts in the comment section, and remember to share the guide around the web if you found it useful. \nSee the final source code and the live project for reference.\n\n\n\n\n  Cut through the noise of traditional React error reporting with LogRocket\n\nLogRocket is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.\n\nLogRocket automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.\nFocus on the React bugs that matter \u2014 try LogRocket today."
  },
  {
    "id": 36,
    "title": "Dependabot and GitHub Actions",
    "author": "Dave Cross",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--HKqCVB8W--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/114555/e3f66192-bca0-4941-8d9c-fe40fc9a3787.jpeg",
    "time": "2023-02-16T16:10:44Z",
    "likes": "2",
    "link": "https://dev.to/davorg/dependabot-and-github-actions-3lai",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7iRDHTqu--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlnxm9h268zml0cc7cey.png",
    "body": "If you're using GitHub Workflows to automate bits of your development process (test runs, deployment, stuff like that) then you're almost certainly using GitHub Actions as well. Actions are pre-build chunks of functionality that you can use in your workflows and which save you having to write a load of code yourself. I've never, for example, written a workflow definition that doesn't use actions/checkout to checkout the current repo on the container that is running that workflow. Part of my workflow definition will always look like this:\n\nsteps:\n  - name: Check out code\n    uses: actions/checkout@v3\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nOr, at least, it will look a lot like that. The bit that might change is that v3 on the end there. That is, of course, the version of the action that I'm using. And that will change when the author of the action releases a new version. Well, strictly speaking, it will change when I notice that there's a new version and bother to update the workflow definition.\nRecently, I noticed that two of the actions I use frequently (including the checkout action which I use everywhere) had updated their version numbers and I hadn't known about the change. It took a few hours of work to update the version numbers in all of my workflow definitions.\nAnd life isn't supposed to be that much work.\nBut there's a solution. And I discovered it thanks to a discussion on Reddit.\nIf you're doing much work on GitHub (particularly in the Javascript/Node) area, then you'll have met Dependabot. It's a bot that scans GitHub repos for dependencies that are out of date and then (and here's the really clever bit!) it generates pull requests that update the repo to use the updated versions.\nTo be honest, I don't have many projects on GitHub that use the technologies that Dependabot targets by default. The few I have are web sites that use frameworks I've cloned from elsewhere - so I get the occasional PR that updates packages.json and I just apply them and forget about it.\nBut it seems that Dependabot can do far more than that. You just need to configure it properly in your repo. And one of the things it can do is to scan for out of date actions being used in your workflow definitions. You just need a file called dependabot.yml in your .github directory and the contents should look like this:\n\n# Set update schedule for GitHub Actions\n\nversion: 2\nupdates:\n\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n    schedule:\n      # Check for updates to GitHub Actions every week\n      interval: \"weekly\"\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nDependabot will then check your actions versions once a week and create PRs for any that are out of date. I know it works, because I added this to all of my repos this morning and it promptly created half a dozen PRs for repos where I had updated the versions but hadn't pushed the changes to GitHub. When I pushed the existing changes, Dependabot checked its PR against the new code, realised the PR was no longer needed and closed the PR. Which was nice :-)\nIt you're using GitHub Workflows (and I can't really think of any reason why you wouldn't be) then I recommend adding this file to your repos. Of course, GitHub has documentation about this feature.\nDependabot clearly has more uses than I thought it did. I'm going to have to investigate it further. I wonder if it can check CPAN dependencies.\nDo you have any Dependabot tricks that I would find useful?"
  },
  {
    "id": 37,
    "title": "What are Attribute Selectors? - [attribute]",
    "author": "StakeDesigner",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--tMaErcnR--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1022848/2f515bf0-a74b-4d13-983d-f3d80d207c36.jpg",
    "time": "2023-02-16T12:01:57Z",
    "likes": "3",
    "link": "https://dev.to/stakedesigner/what-are-attribute-selectors-attribute-2j3f",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--Hhdttozj--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k49fr491drn4rz91r4kp.jpg",
    "body": "CSS attribute selectors are a powerful tool in web development. They allow developers to select HTML elements based on the values of their attributes and apply styles accordingly. In this article, we will discuss what CSS attribute selectors are, how they work, and some common examples.\n\n\n\n  What are Attribute Selectors?\n\nAttribute selectors in CSS are used to select HTML elements based on their attribute values. They allow developers to apply CSS styles to elements that meet certain criteria. An attribute selector consists of the attribute name enclosed in square brackets, optionally followed by a comparison operator and a value. For example, the following code selects all anchor tags with a href attribute that starts with \"http\":\na[href^=\"http\"] {\n  color: blue;\n}\n\nIn this example, the attribute selector is href^=\"http\", which selects all anchor tags with an href attribute that starts with \"http\".\n\n\n\n  The Seven Different Types\n\nThere are seven different types of matches you can find with an attribute selector, and the syntax is different for each. Each of the more complex attribute selectors build on the syntax of the exact match selector \u2014 they all start with the attribute name and end with an equals sign followed by the attribute value(s), usually in quotes. What goes between the attribute name and equals sign is what makes the difference among the selectors.\n\n\n[data-value] {\n  /* Attribute exists */\n}\n\n[data-value=\"foo\"] {\n  /* Attribute has this exact value */\n}\n\n[data-value*=\"foo\"] {\n  /* Attribute value contains this value somewhere in it */\n}\n\n[data-value~=\"foo\"] {\n  /* Attribute has this value in a space-separated list somewhere */\n}\n\n[data-value^=\"foo\"] {\n  /* Attribute value starts with this */\n}\n\n[data-value|=\"foo\"] {\n  /* Attribute value starts with this in a dash-separated list */\n}\n\n[data-value$=\"foo\"] {\n  /* Attribute value ends with this */\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Example\n\n\n\n\n\n\n\n  Case-insensitive matching\n\nCase-insensitive attribute selectors are part of the CSS Working Group\u2019s Selectors Level 4 specification. As mentioned above, attribute value strings are by default case-sensitive, but can be changed to case-insensitive by adding i just before the closing bracket:\n\n\n[attribute=\"value\" i] {\n  /* Styles here will apply to elements with:\n    attribute=\"value\"\n    attribute=\"VaLuE\"\n    attribute=\"VALUE\"\n    ...etc\n  */\n}\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n\n\n\n  Conclusion\n\nCSS attribute selectors are a powerful tool for web development. They allow developers to select HTML elements based on their attribute values and apply styles accordingly. Understanding how attribute selectors work and how to use them effectively is essential for creating visually appealing and engaging web pages. With these selectors, developers can create dynamic and interactive user interfaces, making the web a more engaging and enjoyable experience for users.\n\n\n\n  Support \ud83e\udd17\n\nYouTube\nWebsite\n\n\n\n  Thanks for reading!\n\nIf you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!\n\ud83d\ude0a\ud83d\ude0a See you later! \ud83d\ude0a\ud83d\ude0a"
  },
  {
    "id": 39,
    "title": "\ud83e\udd16 Can AI Make You a Smarter Programmer?",
    "author": "Cherlock Code \ud83d\udd0e",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--p1bhZ4cs--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1027000/3d79f207-f265-41e7-a460-5db1a113ce57.png",
    "time": "2023-02-16T18:02:51Z",
    "likes": "1",
    "link": "https://dev.to/evergrowingdev/can-ai-make-you-a-smarter-programmer-1lbk",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--h9RJZ_wl--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/huhk2z3mvbkcf5ezcile.png",
    "body": "Exploring the potential of AI tools like ChatGPT in improving programming skills.\n\n\n\n\n\n\n  Breaking news:\n\nChatGPT has taken the world by storm!\n\nOkay so not so much \u2018breaking news\u2019 anymore since everybody is talking about it.\nAnd not just talking - they\u2019re building like crazy! Since it was made public towards the end of 2022, almost overnight we\u2019ve seen an influx of AI-driven apps designed to make our lives easier.\nMost interestingly, are the people who have been using ChatGPT themselves to be more productive. From essay writing, to marketing, making social media posts and creating SEO content - ChatGPT can do it all.\nAll of this makes ChatGPT the best thing to hit the internet since, well the internet!\nOne of the most impressive uses of ChatGPT is its ability to churn out and explain code. It\u2019s become a useful tool in every developer's pocket. A lot of devs are now wondering how they ever lived without it. They say their productivity has gone through the roof and they can build things in hours that once took days or even weeks.\nBut ChatGPT wasn\u2019t the first AI revolution to hit the world of programming. Back in 2021, GitHub released beta access to their coding AI-assistant application called Copilot. They then released full access a year later in the summer of 2022.\nCopilot can be used as a plugin for your IDE that will write code suggestions for you whilst you\u2019re coding.\nGitHub describes it as:\n\nYour AI pair programmer\n\nWhat\u2019s important to note is that Copilot\u2019s AI technology is driven by the OpenAI Codex. OpenAI is the mastermind company behind ChatGPT, so one can say that GitHub was on to something way before we knew anything about ChatGPT.\nCopilot started the hype in the developer world of using AI for programming, and developers everywhere were raving about it. I was lucky enough to have beta access to try it out for myself (whilst it was free).\nAnd just like everyone else, I was very impressed. However, when the trial was over, I decided not to upgrade and take on a subscription, and it had nothing to do with the price.\n\n\n\n  Why I stopped using AI for programming \ud83d\udcf5\n\nAlthough I was very impressed with copilot and found it very useful in many ways. I made the decision to let it go\u2026for the time being.\nMy decision had nothing to do with the fact that I would have to start paying for it. In fact, I thought the subscription price of roughly \u00a310 a month to be quite reasonable for what it offered.\nMy issue was that as an ever-growing dev, I was afraid that if I began to rely too heavily on using Copilot to write code for me, then this would hold me back from learning more important things myself.\nI wanted to feel the struggle as I always had, learning through trial and error, and becoming a Google-Guru. I felt that the best way to learn was through failure and I didn\u2019t want any shortcuts.\nThen in came ChatGPT.\n\n\n\n  How I discovered the real benefits of using AI for programming \u2705\n\nSo I stopped using Copilot. I uninstalled the plugin and carried on my way as I always had.\nAnd a few months later ChatGPT was \u2018born\u2019. At first, I didn\u2019t really pay much attention to it. Then suddenly I couldn\u2019t avoid it.\nEveryone was talking about it. My Twitter feed and YouTube algorithm were full of ChatGPT content, and I became massively intrigued, as I\u2019m sure you were too.\nMy first thought and experiments with ChatGPT were mostly for writing. I wanted to see how I could use it to help me write content, both for this blog and on Twitter.\nI then got massively into AI Art apps such as DALL-E and Midjourney. I even created my Twitter profile avatar and banner using DALL-E, but that\u2019s another story.\nI plan on writing a separate article about the awesomeness of AI Art apps in the future.\nAnyways back to ChatGPT.\nOne day I had to complete a task of writing some documentation for a new application. Now I had never seen or used this application before. In fact, it was new, which was why they needed the documentation to guide others on how to use it.\nI took a look at the code, and whilst some of it I understood, a lot of it I didn\u2019t. This was because it was backend JavaScript and I\u2019m mostly a frontend dev so I\u2019m not always familiar with backend stuff.\nMy first thought, as it had always been, was to use Google. But after spending some time I knew it would take a long time to gather what I needed. Plus, I still needed to be able to explain properly what each function was doing.\nIt was then that I had the bright idea!\n\nWhat if I asked ChatGPT?\n\nSo I fired it up, dropped in a block of code and asked ChatGPT to explain it to me.\nTo my surprise and delight, it explained it perfectly. I was able to understand what the code was doing. I mean, I had a rough idea, but ChatGPT confirmed this with clear and concise explanations that I don\u2019t think I could have come up with on my own.\nI was hooked.\nFrom then on I used ChatGPT to explain everything I needed and even asked it add in the comments and JSdocs to the code itself and it did!\nA simple example of this can be seen below:\n\nNow I know this is a very simple example, but one thing to point out here was my use of the words \u201csend back as code\u201d. By writing that, ChatGPT will know to send back the response in a code block that I could then easily copy and edit if needs be.\nChatGPT had officially saved me hours' worth of time.\nIt was then that I decided to embrace AI for programming and I reinstalled Copilot and signed up for a subscription.\nOnce I did that, I used Copilot to help with writing better suggestions for some of the stuff that I didn\u2019t like or agree with what ChatGPT had given me.\nBetween the two apps, I had increased my productivity tenfold, plus I was learning so much along the way. ChatGPT\u2019s explanations were teaching me about the code in the application I was working on in ways that would not have been as verbose with a Google search.\nWhereas Copilot was coming up with the things I knew I had to write but would have taken a lot longer to figure out.\nAI had indeed made me smarter: it made me work smarter.\n\n\n\n  How AI can make you a smarter programmer \ud83e\udd13\n\nIf you\u2019ve ever heard of the phrase \u201cwork smarter, not harder\u201d, then this is exactly what I\u2019m referring to here.\nThe best developers will often say that to be a good programmer you just need to be good at finding solutions, and this often involves using Google to the fullest to solve your problems.\nFor me, AI is a game-changer in this respect. Apps like ChatGPT and Copilot make it easier and faster to get to the solutions to your coding problems.\n\n\n\n  Some ways in which AI can make you a work-smart programmer:\n\n\n\nCode completion - ChatGPT can assist with code completion by suggesting lines of code based on your inputs and context. This can save time and improve the accuracy of your code.\n\nDebugging - ChatGPT can help with debugging by suggesting potential solutions to errors and bugs in your code.\n\nAutomating repetitive tasks - AI can help with automating repetitive tasks such as code refactoring, which can save time and improve the overall quality of your code.\n\nAdvanced programming - AI can also assist with more advanced programming concepts such as natural language processing and machine learning.\n\nResearch Assistance - AI can also help with the research process by suggesting relevant papers, libraries, and other resources to help you further explore the topic you are working on.\n\nSo if you\u2019re a new developer, don\u2019t be like me and be afraid of using the technology to your advantage. Don\u2019t think that if you use it then you could be stopping yourself from learning how to code.\nInstead, use it as a tool to aid your learning. Get ChatGPT to explain the code and concepts you don\u2019t understand. Use Copilot to fill in the gaps, but be careful and make sure you fully understand what it\u2019s spitting back. Heck get ChatGPT to explain Copilot\u2019s stuff if you\u2019re not sure!\nWork smarter, not harder.\nBut most importantly don\u2019t stop learning.\n\nFrom your fellow ever-growing dev,\nCherlock Code\n\n\ud83d\udc99 If you liked this article...\nI publish a weekly newsletter to a community of ever-growing developers, seeking to improve programming skills, increase productivity and share knowledge within the exciting sectors of Tech, AI and Web3.\nGet more articles like this straight to your inbox.\nLet\u2019s grow together \ud83c\udf31\nAnd stay in touch on \ud83d\udc26 @evergrowingdev"
  },
  {
    "id": 40,
    "title": "First Steps With TinyBase",
    "author": "Toby Parent",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--4L0WqIgh--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/377205/806f062d-68ec-490b-93c5-86f03629866e.jpg",
    "time": "2023-02-16T15:28:12Z",
    "likes": "2",
    "link": "https://dev.to/parenttobias/first-steps-with-tinybase-1ola",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--05EikKPH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q60xea9ydxvj570p9q0.png",
    "body": "So TinyBase was one of those thing that came across my feed, and I wondered what the point was. It's a reactive client-side data store, which takes a little parsing to understand.\nWhat exactly is a data store? Simply, it is a structure we use to store data. An array, an object, a Map, a Set... these are data stores.\nWhat exactly do we mean by a \"client-side data store\"? It's a library that lets us build objects or arrays in the browser. Which, on the face of it, seems silly. We can always just create an array or object, right?\nThe key lies in the \"reactive\" bit. Not only does this allow us to construct a data store, but it allows us to respond to changes in that data store. We can observe those changes, and respond appropriately.\n\n\n\n  Reactive Data Store\n\nWhat do we mean by respond appropriately? Any sort of action we might like. Think of the event listeners in the DOM, only with data. \n\nWe might want to update the DOM, say a grid of employee <card> elements, when one is added or removed. Or we might need to update the contents of a card if one is edited.\nWe might want to store data locally when a change happens (localStorage, sessionStorage or IndexedDb). Tinybase provides for that.\nWe might want to handle some remote call, say passing a message to a Socket.\nWe might not want to store data locally - when something changes, we might want to handle that change via a debouncer, so when the user stops editing for a given period, we handle a remote save request. While Tinybase provides for the remote storage, we would write our own debouncer.\n\nNote that last, it is one of the strengths of this library. It doesn't dictate how we might use it or encapsulate it or consume it, it simply does this one thing, and does it quite well.\nNote that TinyBase actually provides two storage mechanisms: we can store values by key, or we can store tabular data. That is, we can do either or both of these things:\n\n\n// we can set key/value pairs, just as in localStorage:\nconst store = createStore()\n  .setValue('currentProject', projectId)\n  .setValue('colorMode', 'dark');\n\nconsole.log(store.getValues()); \n// {\n//   currentProject: '36b8f84dd-df4e-4d49-b662-bcde71a8764f',\n//   colorMode: 'dark'\n// }\n\n// or we can store tabular data:\nstore.setTable('todos', {\n  crypto.randomUUID(), {\n    title: 'Look into TinyBase',\n    description: 'A pretty darn okay reactive local data store.',\n    priority: 'normal',\n    done: false\n  }\n});\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSo with the first part of that, we defined two keys: currentProject and colorMode. We defined values for them, and we're able to use either store.getValue(key) or store.getValues() to view those things.\nIn the second, we are defining a row of data in the todos table in our store. Note that we didn't specify any particular ordering or columns to that table, we simply went ahead and created the object. We could (and in future parts we will) define schemas or relations between tables - this project will let us do this, and more.\nIt's a data store powerhouse, but it is intentionally limited to that domain. It does one thing well, without needing to do all things.\n\n\n\n  A Quick Idea...\n\nTo begin, let's consider how we might create a Todos data model, first with plain javascript and then by leveraging TinyBase.\n\n\n// Todos-service.js\nlet todos = [];\n\nconst isAMatch = (id) => (obj) => Object.keys(obj)[0] === id;\n\nexport const add = (todoObject) => {\n  const id = crypto?.randomUUID();\n  todos = [...todos, {[id]: todoObject}];\n  return {[id]: todoObject};\n}\n\nexport const update = (todoId, todoObject) => {\n  todos = todos.map( todo =>\n    isAMatch( todoId)(todo) ?\n      {[todoId]: {...Object.values(todo)[0], ...todoObject} :\n      todo\n    )\n}\nexport const remove = (todoId) => {\n  todos = todos.filter( todo => !isAMatch(todoId)(todo));\n}\nexport const findById = (todoId) => todos.find( isAMatch(todoId) )\nexport const findAll = () => [...todos];\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAll our basic functionality for Todo things to be collected, in a nice tidy package. Later, when we want to consume it, we simply\n\n\nimport * as Todos from './services/Todos-service';\n\nTodos.add({\n  title: 'Learn about TinyBase', \n  descripton: 'Client-side reactive data stores!',\n  due: '2023-02-17',\n  priority: 'normal',\n  done: false\n});\nconsole.log(Todos.findAll() );\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAnd that's great. Let's see the same basic functionality with TinyBase:\n\n\nimport { createStore } from 'tinybase';\nconst store = createStore();\n\nexport const add = (todoObject) => {\n  const id = crypto?.randomUUID();\n  store.setRow('todos', id, todoObject);\n\n  return {[id]: store.getRow('todos', id) };\n}\n\nexport const update = (todoId, todoObject)=>\n  store\n    .setPartialRow('todos', todoId, todoObject)\n    .getRow('todos', todoId);\n\nexport const remove = (todoId) =>\n  store.delRow('todos', todoId);\n\nexport const findById = (todoId) =>\n  store.getRow('todos', todoId);\n\nexport const findAll = () => \n  store.getTable('todos');\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThis is giving us all the same functionality as an array, but it is abstracting that internal array into an external data store. And if this was all we were doing with it, we really haven't gained anything.\nBut as a first step, we can see that, basically, the use is very similar - only rather than using array methods, we're using TinyBase store methods.\n\n\n\n  Getting Started\n\n\n\n\n  1. Setting up shop\n\nTo build this one, we'll use a bundler and a few packages. Of late, my preferred bundler is Vite - it is quick, clean, and minimal. So we'll open the console and:\n\n\nyarn create vite vanilla-todo-app --template vanilla\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThat will create a directory, vanilla-todo-app, and set up the package.json and dependencies for us. Then we will cd vanilla-todo-app to get in there, and\n\n\nyarn add tinybase\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAnd that will both install the package.json, as well as adding the TinyBase package for us. If we have other dependencies we might like, we can add them - but for what we're about to do, that's everything we'll need.\nAt this point, we can open this in our editor. I'll be using VS Code, simply because it's fairly universal:\n\n\ncode .\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThis opens the editor with the current directory as the workspace. We will be able to clean up the template quite a bit, we don't need any of the content in the main.js, or the files to which it refers - so we can delete javascript.svg and counter.js, and remove everything but the import './style.css' from the main.js. At that point, we're ready to start!\n\n\n\n  2. Creating a Store\n\nNow we need to create a data store. And we'll want to place it into its own file, importable by others - we might want to allow for multiple data sets (for example, we might want a \"todos\" and a \"projects\"). Let's start there.\n\nCreate a src directory to keep the root tidy, we'll work in there for the most part. Within there, we'll create a services directory.\nInside that services directory, we'll create a store.js file.\n\n\n\n// /src/services/store.js\nimport { createStore } from 'tinybase';\n\nconst store = createStore();\n\nexport store;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAnd there we go. We have our datastore defined! At this point, that's all we'll need in the store.js, though later we'll add a few other useful things to this file.\nWhile we could interact directly with the store wherever we might need, a better approach might be to define an interface that can consume a particular service. With that, if we choose to swap out our data provider later, it would only require editing one place rather than scattered throughout our code.\n\n\n\n  3. Defining an Abstract Model\n\nThe interface methods for each are fairly standard: add, update, remove, byId, and all will do. We'll start by defining a generic Model.js:\n\n\n// src/models/Model.js\nimport { store } from '../services/store';\n\n\nconst Model = (table) => {\n  const add = (object) => {\n    const id = crypto.randomUUID();\n    store.setRow(table, id, object);\n    return {[id]: object };\n  }\n  const update = (id, object) =>\n    store\n      .setPartialRow(table, id, object)\n      .getRow(table, id);  \n  const remove = (id) => store.delRow(table, id);\n  const byId = (id) => store.getRow(table, id);\n  const all = () => store.getTable(table);\n\n  return {\n    add,\n    update,\n    remove,\n    byId,\n    all\n  }\n}\n\nexport default Model;\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe've defined this as a factory function. To consume it, we could simply call const Todos = Model('todo'), providing it with the name of the data table we wish to use.\nNow, when we are adding an object, we are getting a uuid for the project, and we are using the TinyBase setRow method to create a row in the given table.\n\nSide note, when I refer to the projects table, it may be easier to think of the store as an object, and the projects as a key on that object that contains an array of {[id]: object} things.\n\nWhen we update a project, TinyBase provides the setPartialRow method. With that, we provide a table id, a row id, and an updater object. That updater object doesn't need to redefine all the properties in our original object, only the ones we might want to update. And the setPartialRow method returns the TinyBase store instance, so we can chain that and call getRow() to get and return the updated value of our object. \nTo delete a row, we simply call delRow with the table and row ids.\nNow, if we look at that code, there is nothing there that is unique to the Project model. In fact, it's fairly abstract - the only thing identifying it is the const table = 'projects' line. And that is deliberate.\nTo create the Todos.model.js, we can use the same code. Simply by changing that one line to const table = 'todos', we will be performing those same CRUD operations elsewhere in our store.\nAnd this is a pretty good abstraction, to my mind. We can reuse this as a template for each of our data models. \n\n\n\n  4. Creating Instance Models\n\n\n// src/models/Todos.model.js\nimport Model from './Model'; \n\nconst Todos = Model('todos');\n\nexport default Todos;\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAnd that's all we need at this point. We can do the same for projects:\n\n\n// src/models/Projects.model.js\nimport Model from './Model';\n\nconst Projects= Model('projects');\n\nexport default Projects;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAt that point, we have two functional tables of data we can stuff into our store service.\n\n\n\n  Let's Consider Structure\n\nUp to this point, we haven't really considered how we should structure things. We set up a data store, we defined an interface to consume that data store, and we created a couple of basic data models.  But we would do well to step back and think about how our data should be structured.\nLet's examine the Todos model first, in isolation.\n\n\n// Todo:\n{\n  [id]: {\n    title: 'Default Todo Title',\n    description: 'Default description',\n    priority: 'normal', // ['low','normal','high','critical']\n    created: '2023-02-02',\n    due: '2023-02-09',\n    done: false\n  }\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSo note that we have that priority key, which can be one of four values. Now, if we wanted to get all the high priority todos, we could simply get them all and use .filter, but TinyBase gives us an option. This would be a good candidate for an index.\nWith an index, we can select all rows from a table that match a given index value. When we query the index, we get back an array of keys, all of which meet that index condition. And that array we get back is reactive - so as we add/edit/remove rows, the indexes are dynamically updating.\nSo we have a basic structure - the priority key will be indexed, and we want to be able to get two key pieces of information back from our Todos: all currently-used indexes, and sets of ids that meet a given index. So we'll be adding two methods to the Todos object: priorities and byPriority. The first will get an array of priority keys, while the second will get a complete list of the Todos with a given priority value.\nBut we're using the Model to generate the Todo.model - can we somehow add to or compose that?\n\n\n\n  We Have the Power!\n\nWe can, actually. We want to first add an export to the store service, allowing for indexing:\n\n\n// src/services/store.js\nimport { createStore, createIndexes } from \"tinybase/store\";\n\nexport const store = createStore();\nexport const indexes = createIndexes(store);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThat will let us set up an index in the Todos.model.js:\n\n\n// src/models/Todos.model.js\nimport Model from './Model';\nimport { store, indexes } from '../services/store';\n\nindexes.setIndexDefinition(\n  'byPriority',\n  'todos',\n  'priority'\n);\n\nconst Todos = Model('todos');\n\nexport default Todos;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAt that point, we have defined our index column. setIndexDefinition is a method on the indexes instance, and we tell it to create an index with the id of byPriority (so we can retrieve it later), that is working on the todos table, and in particular is indexing the priority field in that table.\n\n\n\n  Extending the Data Models\n\nIn the above Todo.model.js, we now have a good index, but we aren't actually using it yet. And what we'd like to do, if possible. But what that means is, we want to take in the basic Model functionality, and add to that.\n\n\n// src/models/Todos.model.js\nimport Model from './Model';\nimport { store, indexes } from '../services/store';\n\nindexes.setIndexDefinition(\n  'byPriority',\n  'todos',\n  'priority'\n);\n\nconst Todos =(()=>{\n  // our base functionality...\n  const baseTodos = Model('todos');\n\n  return {\n    ...baseTodos\n  }\n})();\n\nexport default Todos;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSo we have changed Todos from simply being an instance of our Model factory to being an IIFE that is returning all the methods of that baseTodos, which is still the instance. We're composing the functionailty from Model with some custom methods.\nWithin that Todos IIFE, let's add this:\n\n\n  const baseTodos = Model('todos');\n\n  // get all the todo ids associated with this project\n  const priorities = () =>\n    indexes.getSliceIds('byPriority');\n  const idsByPriority = (priority) =>\n    indexes.getSliceRowIds('byPriority', priority);\n  const byPriority = (priority) =>\n    idsByPriority(priority).map( baseTodos.byId )\n\n  return {\n    ...baseTodos,\n    priorities,\n    byPriority\n  }\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSo we've added two methods to the Todos model: priorities and byPriority. The first gets all the currently-used priority values, while the second gets the todos themselves with a given  priority. \nTo get the array of priority values, we use the Index module's getSliceIds method. That gets us all possible key values for the indexed cell (all the possible values for priority currently used in our data store).\nThe Indexes module also gives us the getSliceRowIds method, which simply gets the id for each row that meets its condition. In our case, the condition is a matching priority.\nAnd we can leverage that in the byPriority function - we get the ids for each row, and then use those to get each individual row for the project.\nFinally, we spread the ...baseTodo object, exposing its methods on the Todos returned object as references to this inner baseTodos thing. And we compose that interface, by adding two more methods to the Todos returned object.\n\n\n\n  Indexes vs Relationships\n\nThe next bit of structuring to consider is the relationship between the Project and the Todo. Each thing has a unique id assigned to it, and that is used as the key of its row in the data table.\nAnd a project can contain any number of todo elements, but each todo can only belong to one project. This is, in relational database terms, a one-to-many relationship.\nTypically, in a relational database, we might give the Todos.model a field for the projectId, some way of identifying with which project it is associated. So, for example, to find all the Personal project's todos, we could select all the todo elements with that projectId.\nSo note how, in the model of the Todo, we show a projectId:\n\n\n// Project:\n{\n  [id]: {\n    title: 'Default Project Title',\n    description: 'Default Description',\n    created: '2023-02-02',\n  }\n}\n\n// Todo:\n{\n  [id]: {\n    projectId: [projectId], // <-- the key from `projects`\n    title: 'Default Todo Title',\n    description: 'Default description',\n    priority: 'normal', // ['low','normal','high','critical']\n    created: '2023-02-02',\n    due: '2023-02-09',\n    done: false\n  }\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\nIndexes vs. Relationships: \nWe discussed indexes above, and now we're discussing relationships. They are similar, and if you've worked with relational data, you may likely already know the difference, but here it is in a nutshell:\n\nindexes are used within the context of a table, to facilitate searching for a particular property value within that table (for example, priority==='high').\nrelationships are used within the dynamic of multiple tables, indicating a connection between one (a local table) and the other (the remote). In this case, the relationship would be todo.projectId === project.id.\nWe're still comparing to something - but with indexes, we're typically getting information about a table while a relationship is giving us information about multiple tables through a common point.\n\n\nIn order to support relationships between data tables, we will need to provide the Relationships module:\n\n\nimport { \n  createStore,\n  createIndexes,\n  createRelationships  \n} from 'tinybase';\n\nexport const store = createStore();\nexport const indexes = createIndexes(store);\nexport const relations = createRelationships(store);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSo we now have a relations module in which we can define our many-to-one relationship. As this is primarily the domain of the Project, we'll put it in the Project.model.js for now.\n\n\n// src/models/Projects.model.js\nimport { relations } from '../services/store';\n\nimport Model from './Model';\nimport Todos from './Todos.model';\n\nrelations.setRelationshipDefinition(\n  'projectTodos',  // the id of the relationship\n  'todos',         //  the 'many', or local side of the relation\n  'projects',      //  the 'one', or remote side of the relation\n  'projectId'      //  the local key containing the remote id\n);\n\nconst Projects = (()=>{\n  const baseProjects = Model('projects');\n\n  return {\n    ..baseProjects,\n  }\n})();\n\nexport default Projects;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNote that we import just the relations export, as we don't need an instance of the store itself. All we need to define the relationship is the relationship module itself. Also, we import the Todos module, as we want to add an array of todos to the project.\nrelations.setRelationshipDefinition defines the relationship between projects and todos, and gives that relationship the id projectTodos. The parameters for that function are:\n\n\nrelationshipId: a unique string to identify this relationship.\n\nlocalTableId: the id of the local table for the relationship. Note that the local table is the 'many' side of the many-to-one relationship.\n\nremoteTableId: the id of the remote table for the relationship. This is the 'one' side of that many-to-one, representing the unique project that can relate to zero or more todo rows.\n\ngetRemoteRowId: the name on this threw me for a bit, but it is the cell in the local row that contain the unique id of the remote row. So, in our case, this would be projectId, as that is the todos row reference to projects.id\n\n\nFinally, we can consume that relationship within the definition of the Projects model itself:\n\n\n// src/models/Projects.model.js\nconst Projects = (()=>{\n  const baseProjects = Model('projects');\n\n  const byId = (projectId) => {\n    const project = baseProjects.byId(projectId);\n    project.todos = relations.getLocalRowIds('projectTodos', projectId)\n      .map(Todos.byId);\n\n    return project;\n  };\n\n  return {\n    ...baseProjects,\n    byId\n  }\n})();\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAgain, we expose the interface of the baseProject, and replace the stock byId method with a custom one.\n\n\n\n  That's Nice and All, But... Why?\n\nThis post is about how to interface with and consume TinyBase's store, using plain vanilla javascript. And to this point, it's pretty darn okay. But if that was all there was, it wouldn't have much going for it.\nIn the next post, we will explore the reactive aspect of that store. We can set listeners on tables, rows, cells or data values, and we can respond when those points change. \nWe will also look at data storage and persistence. TinyBase, in itself, includes some great mechanisms for both local and remote storing, and also describes how to write your own storage \"hooks.\"\nThis is something I'm still playing with, something I'm still learning as I go - if y'all find something neat (or something I missed), lemme know!"
  },
  {
    "id": 42,
    "title": "Using React with Popper and styled-components",
    "author": "Matt Angelosanto",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--tQEgvw8k--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1506/e0a84c58-6a79-4f06-9149-87a38b84afa8.png",
    "time": "2023-02-16T15:17:14Z",
    "likes": "1",
    "link": "https://dev.to/logrocket/using-react-with-popper-and-styled-components-181p",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--A6TGsIzP--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w4eqh6759g0kcxx0hul.png",
    "body": "Written by Elijah Agbonze\u270f\ufe0f\nTooltips and other popovers have continually proven essential in improving the UX of any application. They make it easy to further explain an item that a user is viewing \u2014 like by hovering over tooltips \u2014 or to navigate into subsections, like in dropdowns. \nCreating a tooltip or dropdown with CSS is easy. However, positioning them to flow with your UI at all times can be a hassle. Typically, you\u2019d have to introduce JavaScript to do so, which can be tedious. \nThis is where libraries like Popper.js come in handy. Popper is a JavaScript library that helps you manage your popovers easily. In this article, we will look at how Popper can be used in a React application. We will cover:\n\n What is styled-components?\n\n What is Popper?\n\n Getting started with react-popper\n\n Setting up a new project\n\n Styling the tooltip\n\n The usePopper hook\n\n Adding functionalities\n\n\n\n Extending react-popper with modifiers\n\n Creating custom modifiers\n\n Using default modifiers\n\n\n\n Using React Portals with react-popper\n\n Comparing Floating UI with Popper\n\n\nNote that the version of Popper used throughout this article is v2, which features many improvements from v1.\n\n\n\n  What is styled-components? \n\n\nBefore we really dive into Popper, let\u2019s take a look at the library we would be using to style our popovers in this article. \nPopper doesn\u2019t come pre-styled. This is because it doesn\u2019t create your tooltips or popovers; it only helps make them better positioned and perform better with less code. \nYou will have to style your tooltips yourself. This is where the styled-components library can come in. \nThe styled-components React library is a great way to style React components easily. It uses the basic CSS-in-JS styling syntax. \nThis library allows you to create a component and attach styles to it using ES6 tagged template literals. The code below shows a styled Button component:\n\n\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  padding: 10px;\n  border: 2px solid blue;\n  border-radius: 4px;\n\n  &:hover {\n    border-color: red;\n  }\n`;\n\nconst Example1 = () => {\n  return (\n    <main>\n      <Button>Click me</Button>\n    </main>\n  );\n};\n\nexport default Example1;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe result should look like so:  \nThe & operator is how styled-components references the component being styled. Think of it as JavaScript\u2019s this in classes. \nAlso, in the example above, we find CSS being used in ES6 template literals to style a button. The Button component \u2014 which is an actual React component \u2014 is a button and all the properties/attributes of a button element can be passed into the Button component:\n\n\nconst Example1 = () => {\n  return (\n    <main>\n      <Button type=\"submit\">Click me</Button>\n    </main>\n  );\n};\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe will not be able to go over every detail of using styled-components here, but what I have explained about styled-components so far is sufficient for this tutorial.\n\n\n\n  What is Popper? \n\n\nPopper is not a tooltip or dropdown library. Rather, it\u2019s a library that makes building a tooltip or dropdown easier. In other words, Popper doesn\u2019t create your tooltip for you, but it helps position your tooltip so that it fits into your UI at all times. \nPositioning popovers with Popper is fully customizable. You can turn features on and off, customize existing features to meet your needs, and create some custom features. \nPopper v2 saw a decrease in size from over 7kb minzipped to what now is 3kb minzipped. It is also possible to eliminate unused code from your bundles through tree shaking. \nPopper can be used for any popovers, but it is mostly used for tooltips. While I will refer to tooltips in this article, you can use this knowledge to put in any popovers you want to create. \nPopper is for vanilla JS by default, but also has support for React. The creators created another library called react-popper to extend the core Popper library for use in React applications. \nBelow is a basic interactive example of positioning a tooltip with react-popper:  \nYou can interact with the example in your browser to see how it works for yourself. \nIn this example, we provided four means of positioning the tooltip item around the button:\n\n top\n\n right\n\n bottom\n\n left\n\n\nPopper also provides other positions like top-start and top-end, which we will talk about later in more detail.\n\n\n\n  Getting started with react-popper \n\n\nThis is a code-along section, so try and follow along. In this section, we will talk about everything you need to get started with using Popper in React.\n\n\n\n  Setting up a new project \n\n\nTo begin, let\u2019s create a new React project with Vite using the command below:\n\n\nnpm create vite@latest popper-js -- --template react\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nOur project will be called popper-js. You can choose to give yours any suitable name. \nNext up, we will install the dependencies:\n\n\nnpm install styled-components @popperjs/core react-popper\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow that we have the project set up, you can run npm run dev to get the project started on a localhost. \nNext, let\u2019s create a simple tooltip to display some information on the website. Clear out the code in the App.js file and paste the following into it instead:\n\n\nimport {\n StyledAppContainer,\n LongEl,\n Tooltip,\n Button\n} from \"./App.styled\"; \nimport { useState } from \"react\"; \n\nexport default function App() {\n const [referenceEl, setReferenceEl] = useState(null);\n const [popperEl, setPopperEl] = useState(null);\n\n return (\n   <StyledAppContainer>\n     <div>\n       <LongEl />\n       <Button ref={setReferenceEl}>I'm a mystery</Button>\n       <Tooltip\n         ref={setPopperEl}\n       >\n         <p>A tooltip</p>\n       </Tooltip>\n       <LongEl />\n     </div>\n   </StyledAppContainer>\n );\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAll we\u2019re doing in the code above is creating the components we will need for our tooltip. \nThe Button component is the reference element. Popper uses the reference element as the element around which to position the tooltip. The tooltip component is the popover container or element, which represents what will be popped over. \nWe also have a couple of LongEl components, the sole purpose of which is to make it possible to scroll the viewport up and down. This will help us see Popper at work. \nBoth the reference element and popper or popover element have been assigned callback refs, which we will use to give Popper access to these elements.\n\n\n\n  Styling the tooltip \n\n\nIf you save the file you created earlier, you\u2019re going to have a couple of errors because we haven\u2019t created the styled components we used. To fix this, go ahead and create a new file called App.styled.jsx and paste the following code into it:\n\n\nimport styled from \"styled-components\";\n\nexport const LongEl = styled.div`\n min-height: 100vh;\n width: 100%;\n`;\n\nexport const StyledAppContainer = styled.div`\n min-height: 100vh;\n margin: 0;\n font-family: sans-serif;\n text-align: center;\n background: #242424;\n display: flex;\n justify-content: center;\n align-items: center;\n`;\n\nexport const Button = styled.button`\n background: #000;\n padding: 15px;\n border: 1px solid lightblue;\n border-radius: 8px;\n color: #fff;\n font-family: sans-serif;\n font-size: 0.8rem;\n font-weight: 500;\n`;\n\nexport const Tooltip = styled.div`\n background: #fff;\n border-radius: 5px;\n padding: 10px;\n text-align: left;\n position: relative;\n font-size: 0.8rem;\n max-width: 140px;\n`;\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThis will ensure all the components we need are styled and ready to use.\n\n\n\n  The usePopper hook \n\n\nNow we have the tooltip ready to be made functional with Popper. In the App.js file, we will import the usePopper hook from react-popper and make use of it in the App component:\n\n\nimport { usePopper } from \"react-popper\"; \n\nexport default function App() {\n const [referenceEl, setReferenceEl] = useState(null);\n const [popperEl, setPopperEl] = useState(null);\n  const { styles, attributes } = usePopper(referenceEl, popperEl, {\n    placement: \"bottom\"\n  });\n\n return (\n   <StyledAppContainer>\n     <div>\n       <LongEl />\n       <Button ref={setReferenceEl}>I'm a mystery</Button>\n       <Tooltip\n         ref={setPopperEl}\n         style={styles.popper}\n         {...attributes.popper}\n       >\n         <p>A tooltip</p>\n       </Tooltip>\n       <LongEl />\n     </div>\n   </StyledAppContainer>\n );\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe usePopper hook takes three arguments:\n\n referenceEl \u2014 the reference element along which popperEl will be placed\n popperEl \u2014 the popover element; in this case, the tooltip\n options \u2014 an object to help customize the tooltip to fit your needs.\n\nThe options object includes properties like the following:\n\n modifiers \u2014 an array of middlewares\n\n\n  Used to change default functions of Popper and create new ones\n\n\n placement \u2014 the initial placement of the tooltip\n strategy \u2014 describes the positioning strategy to use\n\n\n absolute is used by default\n\n\n onFirstUpdate \u2014 a function called when the first update is made\n\nThe modifiers property will be discussed in detail later. For the strategy property, in cases where the reference element is in a fixed container, you can easily change it from absolute to fixed to help properly position the tooltip. \nThe placement property takes in a string of initial positions for the tooltip including top, bottom, left, right, and others. The default value is auto, which tells Popper to place the tooltip where there is the most space. The other possible values are:\n\n top-start\n\n top-end\n\n right-start\n\n right-end\n\n bottom-start\n\n bottom-end\n\n left-start\n\n left-end\n\n\nSetting an initial placement will not stop Popper from flipping the tooltip when the need arises. We will also look more at flipping when we discuss modifiers. \nThe usePopper hook returns an object of styles and attributes. Both are objects that are used to assign styles and attributes to the tooltip element. Both also have a popper property that specifies that popperEl should use a set of styles as well as have a set of attributes. \nIf you log styles.popper to the console, you\u2019d literally have an object of styles that Popper knows your tooltip would need to help it work. These styles are completely different from the ones we used with styled-components. \nThe attributes are also needed when we want to have more functions in the tooltip. An example of this could be making the tooltip only appear when triggered. Another example is having an arrow on the tooltip that goes everywhere the tooltip goes while maintaining its position on the tooltip. \nGo ahead and save your file and run the project. If you haven\u2019t been following, you can open this example in CodeSandbox.\n\n\n\n  Adding functionalities \n\n\nSo far we\u2019ve only created an always-seen tooltip, which isn\u2019t what tooltips really are, right? The tooltip should be able to disappear and appear whenever we want. Doing this with Popper is very easy. \nLet\u2019s improve our example above and make the tooltip hidden by default. Then, when the reference element is hovered on, it can be displayed. This implies we would add an onMouseEnter and an onMouseLeave event to the reference element, like so:\n\n\nexport default function App() {\n const [referenceEl, setReferenceEl] = useState(null);\n const [popperEl, setPopperEl] = useState(null);\n const { styles, attributes } = usePopper(referenceEl, popperEl, {\n   placement: \"bottom\"\n });\n\n const showTooltip = () => {\n   popperEl.setAttribute('data-show', true);\n }\n\n const hideTooltip = () => {\n   popperEl.removeAttribute('data-show')\n }\n\n return (\n   <StyledExampleContainer>\n     <div>\n       <LongEl />\n       <Button \n         onMouseEnter={showTooltip}\n         onMouseLeave={hideTooltip}\n         ref={setReferenceEl}\n       >\n         I'm a mystery\n       </Button>\n       <Tooltip \n         ref={setPopperEl}\n         style={styles.popper}\n         {...attributes.popper}>\n         <p>A tooltip</p>\n       </Tooltip>\n       <LongEl />\n     </div>\n   </StyledExampleContainer>\n );\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe next step is to change the style of the tooltip to only display whenever the data-show attribute is set. Head over to the App.styled.jsx file and update the Tooltip component like so:\n\n\nexport const Tooltip = styled.div`\n background: #fff;\n border-radius: 5px;\n padding: 10px;\n text-align: left;\n position: relative;\n font-size: 0.8rem;\n max-width: 140px;\n visibility: hidden;\n\n &[data-show=\"true\"] {\n   visibility: visible;\n }\n`\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNow save and run the project to see the tooltip at work, or you can view the updated example in CodeSandbox. \nFor accessibility, you may want to add more than just the onMouseEnter and onMouseLeave events. You can also add the onFocus and onBlur events so folks navigating with a keyboard will also be able to view the tooltip.\n\n\n\n  Extending react-popper with modifiers \n\n\nSo far, we\u2019ve seen a basic example of using react-popper, which could be all your app requires. But if your app requires more functionalities than what we\u2019ve covered so far, you can also get much more out of this library. So let\u2019s take a look! \nWhen it comes to adding or changing functionalities in Popper, all we need is the modifiers property of the usePopper hook. There are default modifiers that come with Popper by default, some of which are:\n\n popperOffset \u2014 Used to position the popper element around the reference element\n offset \u2014 Used to move the popper element along its reference element\n\n\n  Also used to move it to and from its reference element\n\n\n popperOverflow \u2014 Helps keep the popper visible within its boundary area by preventing it from being cut off\n arrow \u2014 Used to specify an arrow for the tooltip as well as position it along the tooltip\n flip \u2014 Used to flip the tooltip when needed\n\n\n  Also used to specify how the flip function should work\n\n\n hide \u2014 Used to hide the popper element when it\u2019s detached from its reference element\n\nAll these default modifiers \u2014 as well as any others not mentioned here \u2014 are all used by Popper to make your tooltip do what it does. We can either create more modifiers or update the current ones to fit our needs. \nFirst, let\u2019s take a look at creating a modifier.\n\n\n\n  Creating a custom modifier \n\n\nA modifier requires four properties for it to function:\n\n name\n\n phase\n\n enabled\n\n fn\n\n\nThe name property represents the name of the modifier. Just like each default modifier has a name, so should yours. The name makes it possible to refer to the modifier from other parts of the library. \nEach modifier should have a unique name so you don\u2019t end up overriding a default or custom modifier. Since the relevance of a modifier increases in descending order, modifiers at the bottom of the array will always override those before it when necessary. \nA simple example would be to change the distance between the popper element and the reference element:\n\n\nconst { styles, attributes } = usePopper(referenceEl, popperEl, {\n   modifiers: [\n     {\n       name: \"offset\",\n       options: {\n         offset: [0, 10] // [skidding, distance]\n       }\n     }\n   ]\n });\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe phase property relates to the three different core phases of Popper modifiers lifecycle:\n\n main \u2014 for modifiers that only want to perform logic\n read \u2014 for modifiers that only want to read from the DOM\n write - for modifiers that only need to write to the DOM\n\nThis helps group Popper\u2019s access to the DOM. Popper also provides two subphases for each main phase \u2014 beforeMain and afterMain. \nThe enabled property is a boolean that specifies if the modifier is enabled or not. The default modifiers listed above are enabled by default, but you can easily disable any of them with the enabled property, like so:\n\n\nconst { styles, attributes } = usePopper(referenceEl, popperEl, {\n  modifiers: [\n    {\n      name: 'flip',\n      enabled: false\n    }\n  ]\n});\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe example above will stop the tooltip from flipping. Just a side note, turning off the flip mode will also turn off the function of setting placement as auto. In other words, the flip modifier has to be enabled for autoplacement to work. \nThe fn property is a function that returns a state object, which is literally the state of the popper created. The function is also used to provide logic to the modifier. \nTraditionally, functions on modifiers create an infinite loop because react-popper does shallow comparisons on the configuration provided. With inline functions, the shallow comparison fails and makes the code think the configuration changed. \nThe solution to this would be to either use React\u2019s useMemo hook or declare the function outside the component. \nThere are other properties used for creating modifiers with Popper. For example, there is a requires property that you use to specify the modifiers the modifier you\u2019re creating depends on. \nAdditionally, there is an options property that is used to specify all the properties used to configure the modifier. You should head up to the Popper docs to check these out if you want more than the required props. \nNow, let\u2019s create our first custom modifier. This modifier will simply change the background color of the tooltip when it\u2019s at the top of the reference element:\n\n\n const changeTooltipBg = useMemo(\n   () => ({\n     name: \"tooltipBgChanger\",\n     enabled: true,\n     phase: \"write\",\n     fn: ({ state }) => {\n       if (state.placement === \"top\") {\n         popperEl.setAttribute('to-red', true);\n       } else {\n         popperEl.removeAttribute('to-red');\n       }\n     }\n   }),\n   [popperEl]\n );\n  const { styles, attributes } = usePopper(referenceEl, popperEl, {\n   placement: \"bottom\",\n   modifiers: [\n     changeTooltipBg\n   ]\n });\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThis means you\u2019d also have to adjust your styles. See the example in CodeSandbox. \nNotice I used the write phase because we are writing to the DOM here.\n\n\n\n  Using default modifiers \n\n\nBefore we round off this article, I\u2019d like us to look at a couple of modifiers. We will take a look at some of the useful things about some default modifiers that will be very useful to your project.\n\n\n\n  Skidding and distance\n\nThe offset modifier is for specifying the distance between the popper and the reference element as well as the displacement \u2014 or skidding \u2014 of the popper element along the reference element. \nThe values for skidding and distance are both passed as an array with skidding as the first value. They are passed into an offset property of the options object of the modifier:\n\n\nconst { styles, attributes } = usePopper(referenceEl, popperEl, {\n   modifiers: [\n     {\n       name: \"offset\",\n       options: {\n         offset: [0, 0] // [skidding, distance]\n       }\n     }\n   ]\n });\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nBoth skidding and distance accept positive and negative values. For skidding, a positive value displaces or slides the tooltip to the right if it is currently at the top or bottom. Likewise, it moves the tooltip to the top if it is currently at the left or right. Meanwhile, a negative value does the opposite. \nFor distance, a positive value pushes the tooltip away from the reference element. Meanwhile, a negative value pushes the tooltip towards the reference element, so that it can overlay on the reference element. \nRather than specifying an array of values directly, you could also do it with a function, this way you can specify a value dynamically. This is because the function returns an object of popper, reference, and placement properties:\n\n\nconst changeDistance = useMemo(\n   () => ({\n     name: \"offset\",\n     options: {\n       offset: ({ popper, reference, placement }) => {\n         if (placement === \"top\" || placement === 'bottom') {\n           return [0, popper.height / 2];\n         }\n\n         return [0, 0];\n       }\n     }\n   }),\n   []\n );\n\n const { styles, attributes } = usePopper(referenceEl, popperEl, {\n   placement: \"bottom\",\n   modifiers: [changeDistance]\n });\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe popper and reference properties return the height and width of both the popper element and the reference element respectively.\n\n\n\n  Adding arrows\n\nArrows are quite useful for indicating the reference element the popover points to. Just like using popper elements, Popper also provides styles and attributes for arrow elements. \nThe steps we will take to add an arrow to the tooltip project we\u2019ve been building earlier are:\n\n  Create an arrow element\n  Reference the arrow element in the arrow modifier\n  Style the tooltip\n\nLet\u2019s implement these steps now. \nFor step one, let\u2019s head over to the App.jsx file to add an element for the arrow:\n\n\n return (\n   <StyledAppContainer>\n     <div>\n       <LongEl />\n       <Button ref={setReferenceEl}>I'm a mystery</Button>\n       <Tooltip\n         style={styles.popper}\n         data-show=\"true\"\n         {...attributes.popper}\n         ref={setPopperEl}\n       >\n         <p>A tooltip with</p>\n         <span\n           ref={setArrowEl} // doesn't exist yet\n           style={styles.arrow}\n           {...attributes.arrow}\n           className=\"arrow\"\n         />\n       </Tooltip>\n       <LongEl />\n     </div>\n   </StyledAppContainer>\n );\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNotice the attributes and styles of the arrow attached to the element that will represent our arrow. This won\u2019t have any effect because we haven\u2019t referenced the arrow element in the arrow modifier. \nFor step two, we are still working in the App.js file. Create a new state for referencing the arrow element like so:\n\n\nconst [arrowEl, setArrowEl] = useState(null);\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nNext, we reference the arrow element in the arrow modifier like so:\n\n\nconst { styles, attributes } = usePopper(referenceEl, popperEl, {\n  placement: \"left\",\n  modifiers: [\n    { name: \"arrow\", options: { element: arrowEl } }\n  ]\n});\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nFinally, for step three, adding the styles from Popper to the arrow doesn\u2019t create the arrow. Rather, it helps displace the arrow along the tooltip at all times:  \nWe are the ones to create the tooltip and position it based on the placement of the arrow. Find the Tooltip styled component in the App.styled.jsx file and add these styles:\n\n\n`\n .arrow,\n .arrow::before {\n   position: absolute;\n   width: 8px;\n   height: 8px;\n   background: inherit;\n   transition: top 0.3s ease-in, bottom 0.3s ease-in, left 0.3s ease-in,\n     right 0.3s ease-in;\n }\n\n .arrow {\n   visibility: hidden;\n }\n\n .arrow::before {\n   visibility: hidden;\n   content: \"\";\n   transform: rotate(45deg);\n }\n\n &[data-popper-placement^=\"top\"] > .arrow {\n   bottom: -4px;\n }\n\n &[data-popper-placement^=\"bottom\"] > .arrow {\n   top: -4px;\n }\n\n &[data-popper-placement^=\"left\"] > .arrow {\n   right: -4px;\n }\n\n &[data-popper-placement^=\"right\"] > .arrow {\n   left: -4px;\n }\n`\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nOne more thing we could do is hide the arrow when it gets to the edge of the popper, since it being at the edge right now doesn\u2019t look so good. Doing so is easy! All we have to do is create a custom modifier and check when the arrow hits the edges:\n\n\nconst hideArrowAtEdges = useMemo(\n   () => ({\n     name: \"arrowHide\",\n     enabled: true,\n     phase: \"write\",\n     fn: ({ state }) => {\n       const { arrow } = state.elements;\n\n       if (arrow) {\n         if (state.modifiersData.arrow.centerOffset !== 0) {\n           arrowEl.setAttribute(\"data-hide\", true);\n         } else {\n           arrowEl.removeAttribute(\"data-hide\");\n         }\n       }\n     }\n   }),\n   [arrowEl]\n );\n\n const { styles, attributes } = usePopper(referenceEl, popperEl, {\n   placement: \"left\",\n   modifiers: [\n     { name: \"arrow\", options: { element: arrowEl } },\n     hideArrowAtEdges\n   ]\n });\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nFeel free to interact with this example in CodeSandbox.\n\n\n\n  Hiding popper elements\n\nYou can hide popper elements when the reference element is no longer visible on the viewport. \nThe hide modifier makes this possible by attaching an attribute \u2014 data-popper-reference-hidden \u2014 to the popper element when the reference element is no longer visible. \nAll we have to do is to select the attribute and attach a style to it like so:\n\n\n&[data-popper-reference-hidden=\"true\"] {\n   visibility: hidden;\n }\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nCheck it out for yourself.\n\n\n\n  Using React Portals with react-popper \n\n\nPortals are essential for managing popovers in large-scale applications. They help manage the DOM hierarchy of your popovers. \nUsually, you\u2019d want to use zIndex for small-scale applications. However, zIndex is not so effective for larger applications because it\u2019s hard to keep track of all zIndex values at scale. \nPortals allow you to render your popovers outside of React\u2019s default DOM hierarchy. Using Portals in React is pretty straightforward. \nUsing Portals with react-popper does not require anything special from the library. You don\u2019t need to turn anything on; you only need to wrap the popover with the portal and point to the destination:\n\n\n{createPortal(\n    <Tooltip\n      style={styles.popper}\n      data-show=\"true\"\n      {...attributes.popper}\n      ref={setPopperEl}\n    >\n     <p>A tooltip</p>\n     <span\n        ref={setArrowEl}\n        style={styles.arrow}\n        {...attributes.arrow}\n        className=\"arrow\"\n      />\n    </Tooltip>,\n    document.getElementById(\"popper\")\n)}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nSee the example in CodeSandbox.\n\n\n\n  Comparing Floating UI and Popper \n\n\nIn 2021, the creator of Popper announced that Popper is now Floating UI. Floating UI is simply the next level of Popper. \nIn terms of features, size, cross-platform support, scalability, and others, Floating UI is objectively the better option. \nPopper v2 is greatly improved in comparison to v1, but Floating UI is the future. Unlike Popper, which can only be used in vanilla JavaScript and React, Floating UI can also be used in React Native and Vue. \nIn terms of the way they work, there are not many differences. You can easily transition to Floating UI from Popper at any time. \nSo what could possibly want to make you use Popper over Floating UI? \nWell, a downside of Floating UI is that it hasn\u2019t seen as much adoption as Popper has, so there are fewer tutorials and project samples on it compared to Popper. \nHowever, a downside of Popper right now is that the creator also announced that the library will be kept in a state of low maintenance, and he has held true to his word. If you can, I\u2019d recommend you move to Floating UI.\n\n\n\n  Conclusion\n\nIn this tutorial, we looked at how to use Popper v2 in React to better position popovers. We looked at how we can create custom modifiers to extend react-popper and how we can use React Portals with react-popper, which turned out to be super easy and useful. \nWe also looked at styling our popovers with styled-components. As a side note, styled-components isn\u2019t just for styling popovers. You can also use it to style anything in React, be it a simple element like we saw in this article or a component from a library. \nThat\u2019s it. Thanks for reading, and happy hacking.\n\n\n\n\n  Cut through the noise of traditional React error reporting with LogRocket\n\nLogRocket is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.\n\nLogRocket automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.\nFocus on the React bugs that matter \u2014 try LogRocket today."
  },
  {
    "id": 43,
    "title": "How to debug any code properly.",
    "author": "Abdulmumin yaqeen",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--fhGpdEAX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/507576/15e87a9b-09ae-40f5-8e83-b9d0a0a7e153.jpg",
    "time": "2023-02-16T10:02:44Z",
    "likes": "2",
    "link": "https://dev.to/abdulmuminyqn/how-to-debug-any-code-properly-579j",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--IE-Q8-TT--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idcev37tye9rkb2lsg2x.png",
    "body": "Bugs are inevitable part of writing code and are part of our lives \ud83d\ude04, we deal with them every single time.\nThe process of tracking down the cause of the error or bug is what we call debugging.\nWe have always have the option to either paste our error in the Google search box or if we have some googling skills, we can figure out a way to ask Google and get the best result.\nBut, sometimes it not that you didn't use the framework correctly or you messed up with the module. It an internal bug, meaning your code itself is the problem.\nThere can be two face to a bug, your program could be:\n\nthrowing an error\nor, it not providing the desired result.\n\nIf the program is throwing errors, then it easier to fix or easier to Google search.\nThe real issue is when it not providing the desired result.\nIn this article we will be looking at steps that are guaranteed to help you in figuring out why, where and how to fix bugs in your code. \n\n\n\n  1. Printing\n\nWhat printing means is that you are outputing something at a point where you think the error is happening.\nThese varies alot based on the programming language and the program, each language has a way to output to the console.\nThis is the simplest form of debugging and can help alot with debugging your code.\n\n\n\n  2. Debugger\n\nThe debugger is a tool that will allow you to execute your code line by line at your own pace.\nDebuggers are built into the most popular ides, text editors and browsers. It works with multiple languages including compiled languages and also in browser.\nThe ways it works is, you set what is called a breakpoint; which is a line in your code which the execution will be paused. Then you can take over by executing subsequent lines manually.\nThis allow you to see the changes in your program line by line, and easily help you to figure where or what the issue might be.\n\n\n\n  3. Rubber duck\n\nRubber duck debugging simply means explaining your code to an object, your pet or even another human or developer.\nRubber duck is like an umbrella term, which is the object most developers have on their desk they explain their problems or errors to.\nThe duck or the object will not give you the answer or solve your problem. But in the process of saying your problem out loud \ud83d\udd0a , a solution might start to ring in head.\n\n\n\n  Conclusion\n\nThe bug you might be having may be a kind that never existed or a problem you cannot craft a question to feed into the Google search box.\nThese techniques will definitely help you to conquer most of your errors or bugs.\n\n\n\n  Happy debugging!"
  },
  {
    "id": 44,
    "title": "Make your design compatible with foldable device",
    "author": "Nicolas Frizzarin",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--YUtYH_M_--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3314/dc73eb74-08f9-4592-b599-c08f2bb14b4d.png",
    "time": "2023-02-16T14:42:57Z",
    "likes": "3",
    "link": "https://dev.to/this-is-learning/make-your-design-compatible-with-foldable-device-p4e",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--4IgBW3sP--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7evydjyayyuw91bzpxzy.jpg",
    "body": "Introduction\n\nThe way to think about the design of an application has never been simple. \nHow to correctly represent the information to the user? How to make the design pleasant and easy to use? How to adapt the interface to different sizes? are recurrent questions to ask when creating a user interface.\nOver the years, technology has continued to progress, and the Desktop First design approach has been quickly replaced by a Mobile First approach. \nIn September 2020 Samsung released the very first foldable device: the Galaxy Fold. This release of a brand new type of screen once again upsets the design approach we had until then. Mobile First approach is not enough anymore, developers and designers will have to take into account a new type of screen.\nThe era of responsive design has evolved again.\nSo how to make our application responsive to this type of screen? How to take into account the different foldable screen layouts?\nThis article aims to answer these questions and give you the necessary information to create responsive design on foldable device.\nWarning: the features described in this article are still experimental, may change in the future and are only available behind the flag: Experimental Web Platform features of chrome.\n\n\n\n  Posture of foldable device\n\n\nThere are several possible postures with foldable devices. These postures depend mainly on the angle of inclination.\nSome examples to better understand:\n\nan angle of 0 corresponds to a closed device\nan angle of 140 corresponds to a laptop or book shaped device\nan angle of 185 corresponds to a fully open device\n\nThe javascript and css API's must therefore take all these variations but also future scenarios.\nIt's not to be neglected that tomorrow a device can be foldable on the horizontal axis and at the same time on the vertical axis.\n\n\n\n  Viewport segments\n\nBy default, if we don't take into account the possibility of having a device with two or more screens, the design of our application may be \"broken\".\nBut what does broken mean? Well, it can be broken like the site you are reading this article on.\n\nThis image illustrates very well the fact of having a broken design. This emulation was done on a duo surface. The fold of this device hides some words, letters etc.\nTo solve this problem and tell to the browser where to placed the elements, a new media query is available: viewport-segments\nThis media query is declined in two ways:\n\nhorizontal-viewport-segments \nvertical-viewport-segments\n\nWhy two varieties? Well, simply because your device can be oriented in two different ways:\n\nportrait\nlandscape\n\nIf the device is oriented in landscape mode, this naturally means that the device have 1 or more screens on the horizontal axis. The media query to use will be the one associated with the horizontal axis.\n\n\n@media(horizontal-viewports-segments /**number of screen**/){}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIf the device is oriented in portrait mode, as opposed to landscape mode, the device have 1 or more screens on the vertical axis. The media query to use will be the one associated to the vertical axis.\n\n\n@media(vertical-viewports-segments /**number of screen**/){}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nAn example in image will be more telling.\n\nIn the case of a duo surface, if the device is oriented in landscape mode, the media query will be written as follows:\n\n\n@media(horizontal-viewport-segments 2) {}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nConversely, if the duo surface is oriented in portrait mode, then the media query will be written in this way:\n\n\n@media(vertical-viewport-segments 2) {}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn itself the media query viewport-segments does not help to design the application. This media is used to identify the number of screens on which the application will be displayed.\nTo be able to correctly place the different design elements of our application around the \"fold\", six new environment variables have been created.\n\n\n\n  Environments variable\n\nEnvironment variables in CSS allow you to factor awkward device intrusions into your styles.\nLet's take the example of iphones from version X. All these phones have a notch which can break the design of your application. \nTo place correctly the elements around this notch, environment variables have been created. This is the case for example of the environment variable safe-area-inset-top.\nIn the case of foldables devices 6 new environment variables appear:\n\nviewport-segment-width\nviewport-segment-height\nviewport-segment-top\nviewport-segment-right\nviewport-segment-bottom\nviewport-segment-left\n\nThese keywords are to be used in the env() function. The css environment variables behave like custom properties, which means that an additional value can be passed to the env function as a callback value in case the environment variable does not exist.\nThe environment variables are mainly based on the viewport. It is therefore necessary to add a meta tag in the main HTML page.\n\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\">\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nTo use a foldable device environment variable, the syntax is as follows:\n\n\nenv(viewport-segment-width x y, /** fallback value **/)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nx is the index of the screen on the horizontal axis and y is the index of the screen on the vertical axis.\nFor example, if we want to retrieve the size of the second screen on the horizontal axis, the syntax will be the following\n\n\nwidth: env(viewport-segment-width 1 0)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nA diagram is always more representative than a long speech\n\nWith these environmental variables, a multitude of design possibilities are available to us.\nWe could for example put on a screen a fixed image and on another one a long scrollable text.\nLet's code it :)\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"index.css\">\n    <title>Document</title>\n  </head>\n\n  <body>\n    <main>\n      <aside>\n        <img alt=\"foldable device image\" src=\"./foldable_screen.jpeg\" />\n      </aside>\n      <article>\n        Long scrollable text ...\n      </article>\n  </body>\n</html>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\nhtml {\n  height: 100%;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nmain {\n  display: flex;\n  height: 100%;\n  width: 100%;\n}\n\n@media (horizontal-viewport-segments: 2) and (vertical-viewport-segments: 1) {\n  aside img  {\n    position: absolute;\n    height: 100%;\n    width: env(viewport-segment-width 0 0);\n    top: env(viewport-segment-top 0 0);\n  }\n  main article {\n    position: absolute;\n    box-sizing: border-box;\n    padding-left: 1rem;\n    height: 100%;\n    overflow: auto;\n    left: env(viewport-segment-left 1 0);\n  }\n}\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe two lines\n\nwidth: env(viewport-segment-width 0 0)\n\ntop: env(viewport-segment-top 0 0)\nallow you to specify the position of the image and its size. In our case I want to place the image on the whole first screen.\n\nThe line left: env(viewport-segment-left 1 0) allow to place the text on the whole second screen. For visual aesthetics, the padding-left property allows to shift the text from the fold.\nThe result is the following:\n\n\n\n\n  Reacting to resize or posture change events\n\nSometimes we may want to realize some Javascript logic depending on the different posture of the device, or want to react to the resize.\nFor this javascipt allows us to easily retrieve the number of screen of the device\n\n\nwindow.addEventListener(() => {\n console.log(window.visualViewport.segments);\n/**\nIf no segments this seems that the foldable device is closed.\nIf one or more segements window.visualViewport.segments is an array\n**/\n})\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Want to play with these amazing API's\n\nFirst activate in the chrome flags\n\nExperimental JavaScript\nExperimental Web Platform features\nDevice Posture API\n\n\nIn the chrome devtools console, go to the settings section then go in the experiments panel and activate the option Emulation: Support dual screen mode\n\nYou are ready to go, now its possible to select suface duo or galexy fold device when you emulate a mobile device ;)\n\n\n\n  Conclusion\n\nAre foldable screens the next generation of mobile? It's still way too early to tell; so it's very important for a web developer to keep an open mind and code the design of his application so that it is adaptable to whatever the future may bring. This is what responsive design offers.\nThe responsive design offers you a set of practical techniques but also an open mind that will allow you to adapt your applications for the web of tomorrow.\n\n\n\n  Ressource\n\n\nhttps://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/Foldables/explainer.md\nhttps://web.dev/learn/design/screen-configurations/\nhttps://www.w3.org/TR/device-posture/"
  },
  {
    "id": 45,
    "title": "Detecting and Counting Objects with OpenCV",
    "author": "Furkan Gulsen",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--_x9_Lugz--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/184335/a4873808-2daa-4409-a636-3ea6c7bec800.jpeg",
    "time": "2023-02-16T06:23:44Z",
    "likes": "2",
    "link": "https://dev.to/furkangulsen/detecting-and-counting-objects-with-opencv-gde",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--gXibu5AG--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnws5k6nkvkiac2ur8zy.png",
    "body": "What I will tell in this article is very different in real projects. In real projects, object detection is not done with this method. This is just one of the steps to be taken when object detection. Here we will start with object detection and counting from the step. I will consider the more advanced algorithms of this, the method of application in the real world, in more detail in my next article.\n\nFirst of all, let\u2019s load our libraries.\n\n\nimport cv2\nimport imutils\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nI choose a picture with coins for this job.\n\nLet\u2019s import this picture.\n\n\nimage = cv2.imread(\"coins.jpg\")\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIf you notice, you can see the bright spots on the coin. And again, there are sharp lines on the money. This will reduce efficiency when filtering this image. So let\u2019s make our picture available.\n\n\nimage_blur = cv2.medianBlur(image,25)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWhen applying the medianBlur method, as seen above, the first parameter is the picture itself, and the second parameter is the blurring rate. If you use different pictures, you can adjust this ratio according to your picture.\n\nOne of the most important steps in object detection is to make the picture colorless. So we will turn our picture into a black and white tone. This is generally used in all object detection methods. This allows the image to run more efficiently because it reduces the number of scans.\n\n\nimage_blur_gray = cv2.cvtColor(image_blur, cv2.COLOR_BGR2GRAY)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIf pixel value is greater than a threshold value, it is assigned one value (may be white), else it is assigned another value (may be black). The function used is cv2.threshold. First argument is the source image, which should be a grayscale image. Second argument is the threshold value which is used to classify the pixel values. Third argument is the maxVal which represents the value to be given if pixel value is more than (sometimes less than) the threshold value.\n\n\nimage_res ,image_thresh = cv2.threshold(image_blur_gray,240,255,cv2.THRESH_BINARY_INV)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nI preferred the \u201cTHRESH_BINARY_INV\u201d method because I want the coins to remain white here and the rest to be black. You can choose the appropriate values \u200b\u200baccording to your own picture.\n\nNow we will create a kernel here. This kernel will be 3x3 size.\n\n\nkernel = np.ones((3,3),np.uint8)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThen we will apply this to our picture as follows.\n\n\nopening = cv2.morphologyEx(image_thresh,cv2.MORPH_OPEN,kernel) \n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe reason for creating a kernel and applying it with the morphologyEx method is that although we blur the picture, some small black or white areas (noise) may remain. We used this method to destroy these.\n\nNow it is time to replace the value of each pixel with the distance to the nearest background pixel using distanceTransform. We will do this using the distanceTransform method. When we apply this method, our array type turns into float32. So we will do 2 more steps and convert our array back to uint8 type.\n\n\ndist_transform = cv2.distanceTransform(opening,cv2.DIST_L2,5)\nret, last_image =  cv2.threshold(dist_transform, 0.3*dist_transform.max(),255,0)\nlast_image = np.uint8(last_image)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe have the last 2 blocks of code left. In this section, we will now process the counting of objects and recording the positions of the objects. We use findContours to detect objects. Then we make our array regular with the grap_contours method.\n\n\ncnts = cv2.findContours(last_image.copy(), cv2.RETR_EXTERNAL,\n    cv2.CHAIN_APPROX_SIMPLE)\ncnts = imutils.grab_contours(cnts)\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nFinally, we turn our picture.\n\n\ndef display(img,count,cmap=\"gray\"):\n    f_image = cv2.imread(\"coins.jpg\")\n    f, axs = plt.subplots(1,2,figsize=(12,5))\n    axs[0].imshow(f_image,cmap=\"gray\")\n    axs[1].imshow(img,cmap=\"gray\")\n    axs[1].set_title(\"Total Money Count = {}\".format(count))\n\nfor (i, c) in enumerate(cnts):\n    ((x, y), _) = cv2.minEnclosingCircle(c)\n    cv2.putText(image, \"#{}\".format(i + 1), (int(x) - 45, int(y)+20),\n        cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 0, 0), 5)\n    cv2.drawContours(image, [c], -1, (0, 255, 0), 2)\n\ndisplay(image,len(cnts))\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\nI tried to write as briefly and clearly as possible. For more detailed information, I will add the source documents below in this article. You can read them and get more in-depth information.\n\nhttps://docs.opencv.org/3.4/d2/dbd/tutorial_distance_transform.html\nhttps://docs.opencv.org/3.4/d9/d8b/tutorial_py_contours_hierarchy.html\nhttps://pyimagesearch.com/2016/02/01/opencv-center-of-contour/"
  },
  {
    "id": 46,
    "title": "A Anatomia de um reposit\u00f3rio",
    "author": "Pachi \ud83e\ude90 (she/her/ela)",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--mnP6DgnH--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2575/3da37f64-b46e-4fa5-bf86-01b63ba5f57b.png",
    "time": "2023-02-16T15:12:52Z",
    "likes": "20",
    "link": "https://dev.to/github/a-anatomia-de-um-repositorio-5cda",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--zzRYCwwa--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fd2976vh9yz7r2085vqm.png",
    "body": "Por muito tempo eu tive o costume de subir meu c\u00f3digo no Github, escrever um arquivo README.md bem b\u00e1sico, e achava que estava fazendo o melhor uso poss\u00edvel do meu reposit\u00f3rio. \nMas com o tempo e curiosidade, descobri que voc\u00ea pode fazer muito mais do que apenas armazenar seu c\u00f3digo em um reposit\u00f3rio no Github.\n\n\n\n  Mas o que \u00e9 mesmo um Reposit\u00f3rio?\n\nUm reposit\u00f3rio, ou repo, \u00e9 um espa\u00e7o especial na internet onde seu c\u00f3digo (ou qualquer outro tipo de dado que voc\u00ea decida guardar) vive.\nEsse espa\u00e7o, al\u00e9m de oferecer um ambiente seguro para seu c\u00f3digo, oferece v\u00e1rias ferramentas de produtividade e colabora\u00e7\u00e3o, vamos falar um pouco delas, aba por aba.\n\n\n\n\n  Code\n\nCome\u00e7amos com a aba Code, que \u00e9 a p\u00e1gina principal do reposit\u00f3rio e o lugar onde seu c\u00f3digo vive. Al\u00e9m do c\u00f3digo, aqui voc\u00ea pode ver o README.md do repo, sua descri\u00e7\u00e3o, releases, packages, quantos forks e stars ele tem.\n\n\n\n  Issues\n\nA pr\u00f3xima aba \u00e9 a de issues. Issues s\u00e3o uma \u00f3tima ferramenta de colabora\u00e7\u00e3o, onde voc\u00ea pode pedir ajuda para consertar bugs, solicitar features e muito mais. Voc\u00ea pode marcar uma pessoa espec\u00edfica para resolver cada issue, usar labels para facilitar que pessoas colaboradoras saibam que tipo de ajuda \u00e9 esperada, e voc\u00ea pode adicionar issues aos seus projetos, para acompanh\u00e1-las com mais facilidade.\n\n\n\n  Pull Request\n\nNa aba de Pull Request \u00e9 onde encontramos as colabora\u00e7\u00f5es para serem revisadas. Quando uma pessoa trabalha no issue, ela cria um PR com as mudan\u00e7as feitas, e a pessoa mantenedora com reposit\u00f3rio pode revisar essas mudan\u00e7as, para aceit\u00e1-las ou n\u00e3o. Voc\u00ea tamb\u00e9m pode criar um PR sem uma issue espec\u00edfica, mas se voc\u00ea est\u00e1 colaborando para um projeto que n\u00e3o \u00e9 seu, recomendamos que crie uma issue explicando suas contribui\u00e7\u00f5es antes de enviar um PR para revis\u00e3o.\n\n\n\n  Actions\n\nEm seguida temos Actions, que \u00e9 uma ferramenta de automa\u00e7\u00e3o do GitHub. Se seu repo tem alguma Action, aqui voc\u00ea pode ver se ela est\u00e1 correndo corretamente, caso contr\u00e1rio, nessa aba voc\u00ea encontra informa\u00e7\u00f5es para criar Actions.\n\n\n\n  Projects\n\nProjects \u00e9 um lugar onde voc\u00ea encontra os projetos linkados a esse reposit\u00f3rio. Vou falar mais sobre Projects num futuro pr\u00f3ximo, mas em resumo, \u00e9 uma ferramenta onde voc\u00ea pode criar listas, kanbans, tabelas, tudo customizado, para te ajudar na organiza\u00e7\u00e3o e planejamento dos seus projetos.\n\n\n\n  Wiki\n\nEu pessoalmente nunca usei, mas a Wiki \u00e9 uma ferramenta muito legal, que te permite criar uma documenta\u00e7\u00e3o para seu reposit\u00f3rio. Enquanto o READMD.md explica rapidamente o que \u00e9 seu projeto e como us\u00e1-lo, na wiki voc\u00ea tem espa\u00e7o para compartilhar uma documenta\u00e7\u00e3o mais extensa e detalhada sobre seu projeto.\n\n\n\n  Security\n\nUma feature super importante, \u00e9 a da aba de Security, que garante a seguran\u00e7a do seu reposit\u00f3rio e dos dados contidos nele. J\u00e1 subiu uma chave secreta em um reposit\u00f3rio aberto sem querer? (n\u00e3o? s\u00f3 eu? \ud83d\ude05) Quando isso acontece, voc\u00ea logo recebe um email avisando e te instruindo sobre quais medidas de seguran\u00e7a tomar. Esse \u00e9 apenas um pequeno exemplo de seguran\u00e7a no GitHub. Nessa aba voc\u00ea consegue habilitar pol\u00edticas de seguran\u00e7a personalizadas, configurar alertas do Dependabot, configurar um escaneamento do seu c\u00f3digo e muito mais.\nVoc\u00ea pode aprender mais sobre como deixar seu reposit\u00f3rio mais seguro com o Dependabot nesse artigo.\n\n\n\n  Insights\n\nA aba de Insights traz informa\u00e7\u00f5es sobre as atividades acontecendo no seu reposit\u00f3rio, ver um gr\u00e1fico de contribui\u00e7\u00f5es e pessoas contribuidoras, forks e muito mais. Recomendo muito que voc\u00ea d\u00ea uma olhada nessa aba e em todas as informa\u00e7\u00f5es que ela cont\u00e9m.\nOutra coisa bem legal em Insights \u00e9 uma lista de Community Standards, que mostra passos e a\u00e7\u00f5es a serem tomadas para que seu reposit\u00f3rio esteja nos padr\u00f5es da Comunidade Open Source, como ter um README, C\u00f3digo de Conduta, dentre outras coisas.\nNessa aba voc\u00ea consegue ter acesso a muitas informa\u00e7\u00f5es interessantes, vale a pena dar uma explorada.\n\n\n\n  Settings\n\nA \u00faltima aba \u00e9 uma das mais importantes: Settings (ou configura\u00e7\u00f5es) e aqui voc\u00ea pode fazer muita coisa. Ativar GitHub Pages, adicionar pessoas colaboradoras, configurar e personalizar seu reposit\u00f3rio todinho al\u00e9m de delet\u00e1-lo e mudar sua visibilidade. Eu preciso de um artigo todo s\u00f3 pra falar sobre essa parte do reposit\u00f3rio.\n\n\n\n  B\u00f4nus: Discussions\n\nComo b\u00f4nus, temos a aba de Discussions, que s\u00f3 aparece se voc\u00ea ativ\u00e1-la nas configura\u00e7\u00f5es. Essa ferramenta te d\u00e1 um espa\u00e7o dentro do seu reposit\u00f3rio (ou organiza\u00e7\u00e3o) para conversas, perguntas e comunica\u00e7\u00e3o em geral, sem a necessidade de se abrir issues. Voc\u00ea pode criar at\u00e9 enquetes l\u00e1 dentro.\n\n\n\n  E \u00e9 isso\u2026\n\nTerminamos aqui nosso post sobre a anatomia de um reposit\u00f3rio no GitHub. Escrevendo esse artigo eu aprendi bastante e descobri que tenho muito mais para aprender, principalmente sobre a aba de Insights e a de Settings, ent\u00e3o provavelmente vou escrever sobre elas em mais detalhe no futuro.\n\n\n\n  Obrigada por ler at\u00e9 e sigam o GitHub Brasil das redes sociais para ficar por dentro de novidades <3\n\nGitHub Brasil Twitter \ud83d\udc26\nGitHub Brasil no LinkedIn \ud83d\udcdd\nGitHub Brasil na Twitch \ud83d\udfe3\nMeet-ups do GitHub em portugu\u00eas\ud83d\udde3\ufe0f"
  },
  {
    "id": 48,
    "title": "How to Handle Secrets in Docker",
    "author": "Keshav Malik",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--naeRy4VE--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4775/c847a31e-0f21-49f1-a6fe-7b55c0e0c954.png",
    "time": "2023-02-16T07:51:38Z",
    "likes": "4",
    "link": "https://dev.to/gitguardian/how-to-handle-secrets-in-docker-3plm",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--9J8lz8j5--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx84apaygu40elfpxcku.png",
    "body": "Secrets management in Docker is a critical security concern for any business. When using Docker containers, it is essential to keep sensitive data such as passwords, API keys, and other credentials secure.\nThis blog post will discuss some best practices for managing secrets in Docker, including how to store them securely and minimize their exposure. We will explore multiple solutions: using Docker Secrets with Docker Swarm, Docker Compose, or Mozilla SOPS. Feel free to choose what\u2019s more appropriate to your use case. But most importantly is to remember to never hard-code your Docker secrets in plaintext in your Dockerfile!\nFollowing these guidelines ensures that your organization's sensitive information remains safe even when running containerized services.\n\n\n\n  4 Ways to Store & Manage Secrets in Docker\n\n\n\n\n  Using Docker Secrets & Docker Swarm\n\nDocker Secrets and Docker Swarm are two official and complimentary tools allowing to securely manage secrets when running containerized services.\nDocker Secrets provides a secure mechanism for storing and retrieving secrets from the system without exposing them in plaintext. It enables users to keep their credentials safe by encrypting the data with a unique key before passing it to the system.\nDocker Swarm is a powerful tool for managing clusters of nodes for distributed applications. It provides an effective means of deploying containerized applications at scale. With this tool, you can easily manage multiple nodes within a cluster and automatically distribute workloads among them. This helps ensure that your application has enough resources available at all times, even during peak usage periods or unexpected traffic spikes.\nTogether, these two tools provide an effective way to ensure that your organization's sensitive information remains safe despite ever-evolving security needs.\nLet\u2019s see how create and manage an example secret.\n\n\n\n  Creating a Secret\n\nTo create a secret, we need to first initialize Docker Swarm. You can do so using the following command:\n\n\ndocker swarm init\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nOnce the service is initialized, we can use the docker secret create command to create the secret:\n\n\nssh-keygen -t rsa -b 4096 -N \"\" -f mykey\ndocker secret create my_key mykey\nrm mykey\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn these commands, we first create an SSH key using the ssh-keygen command and write it to mykey. Then, we use the docker secret command to generate the secret. Ensure that you delete the mykey file to avoid any security risks.\nYou can use the following command to confirm that the secret is created successfully:\n\n\ndocker secret ls\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe can now use this secret in our Docker containers. One way is to pass this secret with \u2013secret flag when creating a service.\n\n\ndocker service  create --name mongodb --secret my_mongodb_secret redis:latest\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nWe can also pass this secret to docker-compose.yml file. Let\u2019s take a look at an example file:\n\n\nversion: '3.7'\nservices:\n  myapp:\n    image: mydummyapp:latest\n    secrets:\n      - my_secret\n    volumes:\n      - type: bind\n        source: my_secret_key\n        target: /run/secrets/my_secret\n        read_only: true\nsecrets:\n  my_secret:\n    external: true\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn the example compose file, the secrets section defines a secret named my_secret_key (discussed earlier). The myapp service definition specifies that it requires my_secret_key , and mounts it as a file at /run/secrets/my_secret in the container.\n\n\n\n  Using Docker Compose\n\nDocker Compose is a powerful tool for defining and running multi-container applications with Docker. A stack is defined by a docker-compose file allowing you to define and configure the services that make up your application, including their environment variables, networks, ports, and volumes. \nWith Docker Compose, it is easy to set up an application in a single configuration file and deploy it quickly and consistently across multiple environments.\nDocker Compose provides an effective solution for managing secrets for organizations handling sensitive data such as passwords or API keys. You can read your secrets from an external file (like a TXT file). But be careful not to commit this file with your code!\n\n\nversion: '3.7'\nservices:\n  myapp:\n    image: myapp:latest\n    secrets:\n      - my_secret\nsecrets:\n  my_secret:\n    file: ./my_secret.txt\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Using a Sidecar Container\n\nA typical strategy for maintaining and storing secrets in a Docker environment is to use sidecar containers. Secrets can be sent to the main application container via the sidecar container, which can also operate a secrets manager or another secure service.\nLet\u2019s understand this using a Hashicorp Vault sidecar for a MongoDB container:\n\nFirst, create a Docker Compose (docker-compose.yml) file with two services: mongo and secrets.\nIn the secrets service, use an image containing your chosen secret management tool, such as a vault.\nMount a volume from the secrets container to the mongo container so the mongo container can access the secrets stored in the secrets container.\nIn the mongo service, use environment variables to set the credentials for the MongoDB database, and reference the secrets stored in the mounted volume.\n\nHere is the example compose file:\n\n\nversion: '3.7'\n\nservices:\n  mongo:\n    image: mongo\n    volumes:\n      - secrets:/run/secrets\n    environment:\n      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo-root-username\n      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo-root-password\n  secrets:\n    image: vault\n    volumes:\n      - ./secrets:/secrets\n    command: [\"vault\", \"server\", \"-dev\", \"-dev-root-token-id=myroot\"]\n    ports:\n      - \"8200:8200\"\n\nvolumes:\n  secrets:\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Using Mozilla SOPS\n\nMozilla SOPS (Secrets Ops) is an open-source platform that provides organizations with a secure and automated way to manage encrypted secrets in files. \nIt offers a range of features designed to help teams share secrets in code in a safe and practical way. The following assumes you are already familiar with SOPS, if that's not the case, start here.\nHere is an example of how to use SOPS with docker-compose.yml :\n\n\nversion: '3.7'\n\nservices:\n  myapp:\n    image: myapp:latest\n    environment:\n      API_KEY: ${API_KEY}\n    secrets:\n      - mysecrets\n\n  sops:\n    image: mozilla/sops:latest\n    command: [\"sops\", \"--config\", \"/secrets/sops.yaml\", \"--decrypt\", \"/secrets/mysecrets.enc.yaml\"]\n    volumes:\n      - ./secrets:/secrets\n    environment:\n      # Optional: specify the path to your PGP private key if you encrypted the file with PGP\n      SOPS_PGP_PRIVATE_KEY: /secrets/myprivatekey.asc\n\nsecrets:\n  mysecrets:\n    external: true\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nIn the above, the myapp service requires a secret called API_KEY. The secrets section uses a secret called mysecrets, which is expected to be stored in an external key/value store, such as Docker Swarm secrets or HashiCorp Vault.\nThe sops service uses the official SOPS Docker image to decrypt the mysecrets.enc.yaml file, which is stored in the local ./secrets directory. The decrypted secrets are mounted to the myapp service as environment variables.\nNote: Make sure to create the secrets directory and add the encrypted mysecrets.enc.yaml file and the sops.yaml configuration file (with SOPS configuration) in that directory.\n\n\n\n  Scan for secrets in your Docker images\n\nHard coding secrets in Docker is a significant security risk, making them vulnerable to attackers. We have seen different best practices to avoid hard-coding secrets in plaintext in your Docker images, but security doesn't stop there.\nYou should also scan your images for secrets.\nAll Dockerfiles start with a FROM directive that defines the base image. It's important to understand that when you use a base image, especially from a public registry like Docker Hub, you are pulling external code that may contain hardcoded secrets. \nMore information is exposed than visible in your single Dockerfile. Indeed, it's possible to retrieve a plaintext secret hard-coded in a previous layer starting from your image.\nIn fact, many public Docker images are concerned: in 2021, we estimated that 7% of the Docker Hub images contained at least one secret.\nFortunately, you can easily detect them with ggshield (GitGuardian CLI). For example:\n\n\nggshield secret scan docker ubuntu:22.04\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\n\n\n  Conclusion\n\nTo sum up, managing secrets in Docker is a crucial part of preserving the security of your containerized apps. Docker includes several built-in tools for maintaining secrets, such as Docker Secrets and Docker Compose files.\nAdditionally, organizations can use third-party solutions like HashiCorp Vault and Mozilla SOPS to manage secrets in Docker. These technologies offer extra capabilities like access control, encryption, and audit logging to strengthen the security of your secret management.\nFinally, finding and limiting accidental or unintended exposure of sensitive information is crucial to handling secrets in Docker. Companies are invited to use secret scanning tools such as GitGuardian to scan the Docker images built in their CI/CD pipelines as mitigation to prevent supply-chain attacks.\nIf you want to know more about Docker security, we also summarized some of the best practices in a cheat sheet."
  },
  {
    "id": 49,
    "title": "How to Handle Offline Data Using flutter_data?",
    "author": "Kuldeep Tarapara",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--RSjWpPu7--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/770056/06feb277-54f5-482f-be53-0a26057b1957.jpg",
    "time": "2023-02-16T07:11:57Z",
    "likes": "1",
    "link": "https://dev.to/kuldeeptarapara/how-to-handle-offline-data-using-flutterdata-2780",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--gXoy8XXj--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zwiv28zezm90ef7103d.jpg",
    "body": "Flutter_Data helps in simplifying common programming works and web app development. The most common question asked is what is meant by Flutter_Data. The Flutter_Data are the components that can be easily accessed with the single lines of the Flutter code. \nThe user can build their Flutter_Data with the help of the Flutter_Data, which is saved, or the user can use the built-in Flutter_Data. For more information, users can learn how to use Flutter_Data. \nThere are also certain Flutter_Data used to process the most important facts of the various services with the content. The Flutter is a method that is used to return the string over the various pages to proceed with the most useful schemes. \n\n\n\n  Accomplish the Goals\n\nOne can see the use of the particular Flutter processing to accomplish the goals, which is used to help the application development with the best process. But the processes used to be in the form of the development to know the facts of the Flutter_Data to take the task most easily. \nWith the advantage of Flutter_Data, you can build the views to process a work using useful schemes. Now we will see some of the important Flutter_Data. It simplifies the method for displaying the data. \nAutomatically it will set the Flutter table for displaying the data. It also supports several different choices for formatting. It also supports paging that is first, previous, next, and last with the data. By clicking on the column headings, it supports sorting. \n\n\n\n  Define the Flutter Type\n\nWith the help of the Flutter_Data, the Flutter images are displayed in different types using lots of options for formatting and labels. The Flutter_Data is useful for displaying the data from files. The code is required for displaying the Flutter from the array values. \nThe new Flutter creates the new object and sets the height and width. The added title is used for specifying the title of the Flutter. Add series is used to include the data in the Flutter. The Flutter type is the parameter used to define the Flutter type. \nFlutter_Data offers functions that are useful for sending email messages with the help of essential impact. At first, the app start page was initially edited, then the email input page was created, and the email sends page was created. \nFlutter_Data gives the functionality for managing the images on the web page. Some of the keywords are watermarked, resized, rotated, and flip. \nIt is one of the Flutter_Data. With the help of Flutter, lots of benefits can be for building the or with the help of the third party Flutter_Data. It is easy to simplify social networks, multimedia, databases, email, and many other problems like web security and navigation. \nIn general, Flutter_Data also stores data in plain text, even if it is the hardware and software independent way of transport, storing, etc. On the other hand, Flutter_Data supports expanding new operating systems, browsers, and applications. With Flutter_Data, data is also available to different reading machines.\n\n\n\n  The Syntax For the flutter_data\n\nIf the document includes the Flutter declaration, it will be the first statement of the Flutter document. Here the initialization in the helping process can compete with the best process that can complete with useful techniques.\nA protocol also overrides the encoding process, which plays a vital role in the Flutter declaration. The overriding process is one of the most important processes to perform multiple operations in the scheme of certain important issues.\nThe Flutter includes version number attributes like the parameter names and values. These also have case-sensitive properties. The properties used here must be most case-sensitive for the important forms. \nPlacing parameters is one of the most important factors. The right order of the parameter declaration is five by version, encoding, and standalone.\nOf course, both single as well as double quotes are also used. The Flutter documents always have a root element, even if it has a closing tag. All the elements should be properly nested.\n\n\n\n  The Process of Using Flutter_Data\n\nAlready there will be some of the Flutter_Data included in the Flutter_Data, and if the user needs it, they install others. If the process has an effective process created in the Flutter app development, they can use the following methods for installing the Flutter_Data. \nThe first thing is opening the workspace of the site in the web matrix. Then select the web page administration. The web page administration can be login with the help of the password. \nWith the help of the search, the field searches the Flutter_Data. Then install the required Flutter_Data by clicking install. If the user uses the web page administration for the first time, it will ask to create a password.\n\n\n\n  How to Use the flutter_data?\n\nFlutter app development is the markup syntax used for embedding the code, which is server-based, into the web pages. Dynamic web content is created in the server-based code on the fly, whereas the web page is written on the browser. \nThe server will execute the code based on the server inside the web page and again return to the browser when the web page is called. While running on the server, the code will have complex tasks, such as accessing databases. \nBased on Flutter, Flutter is functioning and designed to create web applications. Flutter is traditional and very easy to use and learn. The user can build their Flutter_Data or with the built-in Flutter_Data.\n\n\n\n  Choose the Best Flutter Services For the Best Results\n\nSelect the Flutter services, which attract many users for developing professional and dynamic websites, which is useful for taking the business to the next level with more benefits. \nFlutter is an effective technology developed for connecting the process on the Flutter web. It is also helpful for common activities like database access, database management, frameworks, templates, and other activities. Since the invention of Flutter, it has been very easy to update web pages. This app development framework is made for the individual for web development. \nTo use flutter_data, you have to add the flutter_data package from here.\nrun this command in your terminal  flutter pub add flutter_data\n\nLet\u2019s see an example of flutter_data\n\n\nlib/main.dart\n\nimport 'dart:io';\nimport 'package:flutter_data/flutter_data.dart';\nimport 'package:flutter_data_example/models/main.data.dart';\nimport 'models/user.dart';\nvoid main() async {\n  late final Directory _dir;\n  try {\n    final container = ProviderContainer(\n      overrides: [\n        configureRepositoryLocalStorage(\n          baseDirFn: () => _dir.path,\n          encryptionKey: _encryptionKey,\n          clear: LocalStorageClearStrategy.always,\n        ),\n      ],\n    );\n    _dir = Directory.systemTemp.createTempSync();\n    print('Using temporary directory: ${_dir.path}');\n    _dir.deleteSync(recursive: true);\n    await container.read(repositoryInitializerProvider.future);\n    container.users.logLevel = 2;\n    container.tasks.logLevel = 2;\n    await container.tasks.findAll(params: {'user_id': 1, '_limit': 3});\n    final user = User(id: 19, name: 'Zeku');\n    final user2 = await container.users.findOne(19, remote: false);\n    assert(user == user2);\n    assert(user.tasks.length == 3);\n  } finally {\n    _dir.deleteSync(recursive: true);\n  }\n}\nconst List<int> _encryptionKey = [146,54,40,58,46,90,152,02,193,210,220,199,16,96,107,4,243,133,171,31,241,26,149,53,172,36,121,103,17,155,120,61];\n</int>\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nyou can find the full source code here. \n\n\n\n  Conclusion\n\nThis article has given the idea that how to use the Flutter_Data programming in app development. However, this function will make the various Flutter functions, and it is the combination of various functionalities which will bring out the best in your application. Thank you for reading my article. Let me know your thoughts on comment. You can ask queries and share your suggestion in the comment section. I would be happy to hear from you. See you in the next article.  \n\n\n\n  Frequently Asked Questions (FAQs)\n\n1. Is it possible to run Flutter offline?\nFlutter has the IDE, which needs an internet connection to include the dependency and sync the grade files. Gradle search into the repository for the dependency utilizes the internet, but after it downloads all the libraries, you can use it offline.\n2. Which is the best offline database for Flutter development?\nUse SQflite if you require a relational database with total control over database queries. It is the best option if you can conveniently write the queries and code. Drift is an easy-to-use with a reactive and persistent library for Flutter apps.\n3. Which emulator is best for Flutter development?\nAppetize is the emulator and simulator for iOS and Android app development. This tool is completely operated online. Hence, it assists the Flutter mobile app development procedure."
  },
  {
    "id": 50,
    "title": "Documenting a Go API with OpenAPI 3 Standard: A Practical Guide",
    "author": "Ekemini Samuel",
    "author_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--HxqwHZwI--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/823697/1719a073-55bc-43e3-b830-d3b4191244d2.jpg",
    "time": "2023-02-16T14:50:12Z",
    "likes": "30",
    "link": "https://dev.to/envitab/documenting-a-go-api-with-openapi-3-standard-a-practical-guide-jod",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--5WIfr_E---/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mdcorkzwcyjwtkhwzsd.jpg",
    "body": "APIs have become an integral part of modern software development, allowing applications to communicate with each other and exchange data. However, building an API is only half the battle. Without proper documentation, developers may struggle to understand how to use the API, leading to wasted time and resources. This is where API documentation comes in.\nOpenAPI is a widely used specification for describing RESTful APIs. With its powerful schema and documentation capabilities, it is now the de facto standard for API documentation. In this article, we will explore the importance of API documentation, introduce OpenAPI, and provide examples of how to write OpenAPI documentation using Go.\nLet's dive in!\n\n\n\n  What is an API?\n\nAn API, or Application Programming Interface, is a set of protocols, routines, and tools for building software applications. APIs allow different applications to communicate with each other, making it easier to share data and functionality. APIs can take many different forms, including RESTful APIs, SOAP APIs, and GraphQL APIs.\n\n\n\n  RESTful API\n\nRESTful APIs adhere to the principles of Representational State Transfer (REST). RESTful APIs use HTTP requests to interact with web resources and represent resources as URLs. This makes it easy to use standard HTTP verbs such as GET, POST, PUT, and DELETE to manipulate resources.\n\n\n\n  SOAP API\n\nA SOAP API, (Simple Object Access Protocol) is a protocol for exchanging XML-based messages over a network. It uses a set of rules for sending and receiving messages, and is typically used in enterprise-level applications.\n\n\n\n  GraphQL API\n\nGraphQL is a newer API technology that provides a more flexible way of requesting data. It allows developers to send a single request to the server, specifying the exact data they need. This can help reduce the number of requests needed to retrieve data, and can improve performance.\n\n\n\n  Why Document APIs?\n\nClear and concise documentation is essential for any API. It can improve adoption and developer experience, leading to faster development times and improved quality.\nProper API documentation should include a description of the API, its endpoints, and its input and output parameters. It should also be written with the target audience in mind and include examples of how to use the API, along with any error codes that may be returned.\n\n\n\n  Introducing OpenAPI\n\nOpenAPI was formerly known as Swagger and has since become the standard for API documentation. OpenAPI allows you to define your API using a JSON or YAML file and provides a wide range of documentation features.\nThe key components of an OpenAPI specification include:\n\nInfo: This provides basic information about the API, including its title, version, and description.\nPaths: The Paths define the different endpoints of the API, along with their input and output parameters.\nParameters: This defines the input and output parameters for each endpoint, including their data type and any restrictions.\nResponses: This defines the different responses that can be returned by the API, including their status codes and any error messages.\n\n\n\n\n  Best practices for writing OpenAPI 3 documentation\n\nNow that we have a basic understanding of OpenAPI, let's look at how we can use it to document APIs. Writing documentation is not an easy task, but OpenAPI provides a clear and structured way of describing APIs. Some best practices include:\n\nUse clear and concise language: Avoid using technical jargon on technical terms that may not be familiar to the intended audience.\nProvide examples and use cases: This helps developers understand how to use the API in real-world scenarios.\nUse formatting and organization: Use headings, bullet points, and other formatting options to make the documentation easy to read and navigate.\nKeep the documentation up to date: As the API changes, so should the documentation. Make sure to keep it up to date so that it remains a useful resource.\n\n\n\n\n  An Example of Documenting APIs with OpenAPI 3 in Go\n\nLet's say we have an API that allows users to retrieve information about books. Here's how we can use OpenAPI 3 to document it:\n\nThe main.go file that contains the Go API:\n\n\n\npackage main\n\nimport (\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n\n    \"github.com/go-chi/chi\"\n    \"github.com/go-chi/chi/middleware\"\n    \"github.com/go-chi/render\"\n)\n\ntype Book struct {\n    ID     int    `json:\"id\"`\n    Title  string `json:\"title\"`\n    Author string `json:\"author\"`\n}\n\nvar books = []Book{\n    {1, \"The Go Programming Language\", \"Alan A. A. Donovan, Brian W. Kernighan\"},\n    {2, \"Designing Data-Intensive Applications\", \"Martin Kleppmann\"},\n    {3, \"Code Complete\", \"Steve McConnell\"},\n}\n\nfunc main() {\n    r := chi.NewRouter()\n    r.Use(middleware.Logger)\n    r.Use(render.SetContentType(render.ContentTypeJSON))\n\n    r.Get(\"/books/{id}\", GetBook)\n\n    log.Println(\"Starting server on :3000\")\n    http.ListenAndServe(\":3000\", r)\n}\n\nfunc GetBook(w http.ResponseWriter, r *http.Request) {\n    bookID := chi.URLParam(r, \"id\")\n    for _, book := range books {\n        if strconv.Itoa(book.ID) == bookID {\n            render.JSON(w, r, book)\n            return\n        }\n    }\n    render.Status(r, http.StatusNotFound)\n}\n\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\n\nAnd here is the corresponding book.yaml file that documents the API using OpenAPI 3 standard:\n\n\n\nopenapi: 3.0.0\ninfo:\n  title: Book API\n  description: API for retrieving information about books\n  version: 1.0.0\nservers:\n  - url: http://localhost:3000\n    description: Local server\npaths:\n  /books/{id}:\n    get:\n      summary: Get a book by ID\n      description: Returns a single book object by ID\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: ID of the book to retrieve\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Book'\n        '404':\n          description: Book not found\n          content: {}\ncomponents:\n  schemas:\n    Book:\n      type: object\n      required:\n        - id\n        - title\n        - author\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: Unique identifier of the book\n        title:\n          type: string\n          description: Title of the book\n        author:\n          type: string\n          description: Author of the book\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThe book.yaml file defines the API version, the base URL, and the paths for each endpoint. It also specifies the HTTP methods allowed for each endpoint, such as GET, POST, PUT, DELETE, and so on. For example, the GetBook endpoint is defined in the YAML file with the following details:\n\n\n  /books/{id}:\n    get:\n      summary: Retrieve a book by ID\n      description: Retrieve the book with the given ID from the library.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the book to retrieve.\n      responses:\n        '200':\n          description: A book object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Book'\n        '404':\n          description: The specified book was not found.\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThis definition specifies that the endpoint is a GET method that retrieves a book by ID. It also specifies the parameters that the endpoint accepts and the responses that it returns. In this case, the GetBook endpoint returns a JSON object representing a book, or a 404 error if the specified book is not found.\nThe book.yaml file also includes definitions of the data models used by the API. For example, the \"Book\" object is defined as follows:\n\n\ncomponents:\n  schemas:\n    Book:\n      type: object\n      properties:\n        id:\n          type: integer\n        title:\n          type: string\n        author:\n          type: string\n      required:\n        - id\n        - title\n        - author\n\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThis definition specifies that the Book object is an object that has three properties: id, title, and author. The id property is an integer, while the title and author properties are strings. It also specifies that all three properties are required.\nLet's break down the key components of the YAML file specification for the Go book API above:\n\nopenapi: specifies the version of the OpenAPI specification being used.\ninfo: provides metadata about the API, including the title, description, version, and contact information.\nservers: defines the server information including the URL and description.\npaths: defines the available endpoints(routes) of the API, including the HTTP method used to access each endpoint, and the request and response parameters for each endpoint.\ncomponents: defines reusable schema, parameters, responses, and security schemes used in the API.\nsecurity: defines the security schemes used to secure the API and which endpoints require authorisation.\ntags: provides metadata about the API paths, including a brief description and an optional external documentation link.\nresponses: defines the possible responses that the API can return, including the response code, description, and the content schema.\nrequestBody: defines the expecterd request body for an endpoint, including the content type and content schema.\nparameters: defines the parameters that can be used in the path, query, header, or cookie of a request, including the type, description, and default value.\n200: this component specifies the response when the request is successful with a status code of 200.\n\nOnce we have created the OpenAPI specification file, we can use it to generate documentation in various formats, such as HTML, PDF, or Markdown. There are many tools available for generating documentation from OpenAPI specifications, such as Swagger UI, ReDoc, and Slate.\nBy defining the API endpoints and data models in the OpenAPI 3 specification file, the file provides a comprehensive documentation of the API that can be used to generate code, test cases, client libraries, server stubs, and interactive API documentation. This not only makes it easier for developers to understand and use the API, but also saves time and effort in the long run.\nThis is just one example of how OpenAPI can be used to document an API in Go. There are many other ways to write OpenAPI specifications and integrate them into your application. The exact approach may differ depending on the specific API being documented and the desired output format.\n\n\n\n  Testing the Book API\n\nTo test the Go book API and run it locally, you can follow these steps:\n\nIn your terminal or code editor, navigate to the project directory.\nRun the go mod init <module_name> to create a new Go module.\nRun the command go install github.com/go-chi/chi/v5 to install the package.\nOnce the package has been installed, you should be able to import it into your Go code and use its functions and methods.\nNote: Go version 1.18, no longer installs packages with the go get command. Instead, we use the go install command.\nThen we run the main.go file to start the server. Following our program above, it will be listed on port :3000\nWe can then test the API on the terminal, Postman or ReqBin. (I used ReqBin, it is an online API testing tool for REST and SOAP APIs, works directly from your browser.)\n\n\nIn the terminal, we can use the cURL tool to make requests to the API. \nTo make a request to the /books/1 endpoint, run this command in your terminal:\n\n\n\ncurl http://localhost:3000/books/1\n\n\n\nEnter fullscreen mode\n\n\nExit fullscreen mode\n\n\n\n\n\nThis should return a JSON response containing an array of books.\n\nTo make requests using ReqBin, set the request method to GET, and set the request URL to http.//localhost:3000/books/1. You can then send the request and view the response in the \"Response\" tab.\n\nThis is a screenshot of when I tested the Go book API using ReqBin.\nThe box highlighted in 'Magenta' is for the GET request URL, while the one highlighted in 'Red-orange' is for the 'Response'\n\n\n\n\n  Tools for Documenting APIs\n\nOnce you have created your API documentation, it is important to choose the right tool to present it to your users. There are many tools available for documenting APIs, each with its own strengths and weaknesses. Some of the most popular tools for documenting APIs include:\n\nSwagger UI: Swagger UI is a popular open-source tool for documenting REST APIs. It allows you to create interactive documentation for your API using OpenAPI, and provides a user-friendly interface for exploring your API.\nPostman: Postman is a popular API development environment that can also be used for API documentation. It allows you to create documentation for your API using Markdown, and provides a user-friendly interface for exploring your API.\nOpenAPI Generator: The OpenAPI generator is a code generator that can automatically create documentation for your API using the OpenAPI specification. This specification is a standardised format for describing RESTful APIs, which makes it easy to generate documentation in a consistent and predictable way. The OpenAPI generator supports a wide range of programming languages, including Go, Java, Python, and many others.\nReadme: Readme is a popular documentation platform that can be used for API documentation. It provides a user-friendly interface for creating and publishing API documentation, and supports both OpenAPI and Swagger.\nReDocly: ReDocly is an open-source tool for creating API documentation. It allows you to create documentation for your API using OpenAPI, and provides a user-friendly interface for exploring your API.\n\nWhen choosing a tool for documenting your API, it is important to consider your specific needs and requirements. Some important factors to consider include:\n\nEase of use: Is the tool user-friendly and easy to navigate? Can users easily find the information they need?\nCustomisation: Can you customize the look and feel of the documentation to match your brand?\nIntegration: Can the tool integrate with other tools and platforms, such as GitHub, Jira, or Slack?\nCollaboration: Does the tool allow for collaboration between team members, such as commenting or version control?\nScalability: Can the tool scale with your API as it grows and evolves?\n\nRegardless of the tool you choose, investing time and effort into creating good API documentation is well worth the effort, and will pay off in the long run.\n\n\n\n  Conclusion\n\nDocumenting APIs is an essential part of software development, and OpenAPI provides a powerful and flexible way to create clear and concise API documentation. By following best practices for writing documentation and using API documentation tools, you can make your API more accessible to other developers and improve their overall experience. With the increasing popularity of RESTful APIs and the growth of the API economy, it's more important than ever to invest time and resources into creating high-quality API documentation.\nI hope this article has provided a useful introduction to API documentation and OpenAPI, as well as practical tips and examples for how to use OpenAPI 3 specifications to document APIs in Go. By following these guidelines and best practices, you can create APIs that are well-documented, easy to use, and more widely adopted by other developers.\nFeel free to reach out, or drop your questions in the comment section below.\nWe can also connect on LinkedIn and Twitter.\nHappy coding! \ud83d\udc68\u200d\ud83d\udcbb\ud83d\ude80\nImage by pikisuperstar on Freepik"
  }
]
